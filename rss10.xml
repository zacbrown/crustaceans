<?xml version="1.0"?>
<rdf:RDF
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns="http://purl.org/rss/1.0/"
>
<channel rdf:about="http://crustaceans.hmmz.org/">
	<title>Planet Crustaceans</title>
	<link>http://crustaceans.hmmz.org/</link>
	<description>Planet Crustaceans - http://crustaceans.hmmz.org/</description>

	<items>
		<rdf:Seq>
			<rdf:li rdf:resource="http://shape-of-code.coding-guidelines.com/?p=3841" />
			<rdf:li rdf:resource="http://benaiah.me/posts/configuring-go-apps-with-toml" />
			<rdf:li rdf:resource="https://blog.artemix.org/article/show/kickstart" />
			<rdf:li rdf:resource="https://www.junglecoder.com/blog/factorlang-review" />
			<rdf:li rdf:resource="https://medium.com/p/7eb491389b23" />
			<rdf:li rdf:resource="https://itscode.red/posts/announcing-pikatrack-an-open-source-fitness-tracker/" />
			<rdf:li rdf:resource="https://www.ponylang.org/blog/2018/08/last-week-in-pony---august-12-2018/" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/08/13/algorithmically-fingering-guitar-chords-with-elixir/" />
			<rdf:li rdf:resource="https://patrick.marchand.ski/tech/run-bsd.html" />
			<rdf:li rdf:resource="https://vfoley.xyz/rust-compile-speed-tips/" />
			<rdf:li rdf:resource="http://shape-of-code.coding-guidelines.com/?p=3819" />
			<rdf:li rdf:resource="https://jonwillia.ms/2018/08/10/new-post" />
			<rdf:li rdf:resource="https://jonwillia.ms/2018/08/10/dockertest" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-08-07-22-18-41" />
			<rdf:li rdf:resource="tag:sgoel.org,2018-08-07:/posts/switching-from-keepassxc-to-bitwarden/" />
			<rdf:li rdf:resource="https://leotindall.com/post/pdf-embedding-attacks/" />
			<rdf:li rdf:resource="https://blog.wallaroolabs.com/2018/08/dynamic-keys/" />
			<rdf:li rdf:resource="http://sevag.xyz/post/sudo/" />
			<rdf:li rdf:resource="tag:gerikson.com,2018:/photo/2018-06" />
			<rdf:li rdf:resource="tag:gerikson.com,2018:/photo/2018-07" />
			<rdf:li rdf:resource="tag:gerikson.com,2018:/books/read/Go-Like-Hell" />
			<rdf:li rdf:resource="https://www.cambus.net/the-future-of-via-x86-processors/" />
			<rdf:li rdf:resource="https://blog.ovalerio.net/?p=1557" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir/" />
			<rdf:li rdf:resource="http://beza1e1.tuxen.de/cost_of_agile.html" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-28-22-34-16" />
			<rdf:li rdf:resource="http://journal.dedasys.com/?p=1346" />
			<rdf:li rdf:resource="https://medium.com/p/ea43d46cdbc6" />
			<rdf:li rdf:resource="https://sulami.github.io/How this blog is madeHow this blog is made" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-25-20-00-29" />
			<rdf:li rdf:resource="https://silky.github.io/posts/2018-07-25-ethics-of-AI.html" />
			<rdf:li rdf:resource="https://asylum.madhouse-project.org/blog/2018/07/24/on-git-github-and-email/" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-23-14-48-17" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/07/23/building-a-better-receive-loop/" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-21-08-20-07" />
			<rdf:li rdf:resource="http://pzel.github.io/til/2018/07/21/sending-0000-doesnt-make-sense.html" />
			<rdf:li rdf:resource="http://kaushikghose.wordpress.com/?p=7031" />
			<rdf:li rdf:resource="https://www.geeklan.co.uk/?p=2266" />
			<rdf:li rdf:resource="https://kev.inburke.com/?p=3636" />
			<rdf:li rdf:resource="http://codeplea.com/embedding-files-in-c-programs" />
			<rdf:li rdf:resource="https://www.anishathalye.com/2018/07/19/gemini-a-modern-beamerposter-theme/" />
			<rdf:li rdf:resource="https://www.brianthicks.com/post/2018/07/18/lets-make-nice-packages/" />
			<rdf:li rdf:resource="https://j11g.com/?p=2103" />
			<rdf:li rdf:resource="http://jakob.spaceReplacing+Anki+With+org-drill" />
			<rdf:li rdf:resource="https://medium.com/p/7bb3f57d4641" />
			<rdf:li rdf:resource="https://medium.com/p/88a25e162bf6" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-12-18-24-17" />
			<rdf:li rdf:resource="http://caiustheory.com/running-rails-tests-under-circleci-2.0-with-mariadb/" />
			<rdf:li rdf:resource="tag:sweetness.hmmz.org,2018-07-10:/2018-07-10-mitogen-released.html" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/07/09/golfing-for-fizzbuzz-in-clojure-and-elixir/" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/07/09/ping-pong-and-unresponsive-bitcoin-nodes/" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-08-12-28-47" />
			<rdf:li rdf:resource="http://beza1e1.tuxen.de/raspberry_rfid_music_player.html" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-07-19-03-33" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-07-00-36-37" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-06-16-44-02" />
			<rdf:li rdf:resource="https://blog.asrpo.com/making_a_low_level_debugger_part_3" />
			<rdf:li rdf:resource="https://unrelenting.technology/notes/2018-07-05-21-10-59" />
			<rdf:li rdf:resource="http://pepijndevos.nl/2018/07/05/futhark-python-gotta-go-faster" />
			<rdf:li rdf:resource="https://push.cx/?p=3334" />
			<rdf:li rdf:resource="http://pepijndevos.nl/2018/07/04/loefflers-discrete-cosine-transform-algorithm-in-futhark" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/07/02/making-noise-with-j/" />
			<rdf:li rdf:resource="https://asylum.madhouse-project.org/blog/2018/07/01/kaleidoscope-progress-report/" />
			<rdf:li rdf:resource="https://asylum.madhouse-project.org/blog/2018/07/01/cleaning-up-part-two/" />
			<rdf:li rdf:resource="https://medium.com/p/b191d0376708" />
			<rdf:li rdf:resource="https://www.cambus.net/oldest-domains-in-the-com-net-and-org-tlds/" />
			<rdf:li rdf:resource="tag:gerikson.com,2018:/alt/Fotografiska-2018-06" />
			<rdf:li rdf:resource="https://gkbrk.com/2018/04/generating-vanity-infohashes-for-torrents/" />
			<rdf:li rdf:resource="https://gkbrk.com/2018/01/evolving-line-art/" />
			<rdf:li rdf:resource="https://gkbrk.com/2018/01/welcome-2018/" />
			<rdf:li rdf:resource="https://gkbrk.com/2017/10/putting-my-blog-on-ipfs/" />
			<rdf:li rdf:resource="https://gkbrk.com/2017/06/unprotected-redis/" />
			<rdf:li rdf:resource="https://gkbrk.com/2017/05/android-dialer-packets/" />
			<rdf:li rdf:resource="https://gkbrk.com/2017/04/graphs-from-my-todo-txt/" />
			<rdf:li rdf:resource="https://gkbrk.com/2017/02/numerical-domains-of-china/" />
			<rdf:li rdf:resource="https://wozniak.ca/blog/2018/06/25/Massacring-C-Pointers/index.html" />
			<rdf:li rdf:resource="https://www.brautaset.org/articles/2018/org-mode-rss.html" />
			<rdf:li rdf:resource="https://www.cambus.net/booting-openbsd-kernels-in-efi-mode-with-qemu/" />
			<rdf:li rdf:resource="http://pepijndevos.nl/2018/06/24/sysenv-virtualenv-for-system-packages" />
			<rdf:li rdf:resource="https://www.jeffcarp.com/posts/cryptography-in-tensorflow/" />
			<rdf:li rdf:resource="https://silky.github.io/posts/2018-06-23-Diagrams-In-Hakyll.html" />
			<rdf:li rdf:resource="https://defn.io/2018/06/23/ann-molten/" />
			<rdf:li rdf:resource="http://pepijndevos.nl/2018/06/22/ev3-soccer-robot-with-ros" />
			<rdf:li rdf:resource="tag:kmjn.org,2018-06-21:stamping_pdfs" />
			<rdf:li rdf:resource="https://cryptolosophy.org/defer-stacking-go" />
			<rdf:li rdf:resource="http://brooker.co.za/blog/2018/06/20/littles-law" />
			<rdf:li rdf:resource="https://gkbrk.com/2018/06/fetching-activitypub-feeds/" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/06/18/limiting-peers-with-dynamicsupervisor-options/" />
			<rdf:li rdf:resource="http://beza1e1.tuxen.de/m302_rf_id_reader.html" />
			<rdf:li rdf:resource="https://www.brautaset.org/articles/2004/water-please.html" />
			<rdf:li rdf:resource="https://www.brautaset.org/articles/2002/heinlein.html" />
			<rdf:li rdf:resource="https://silky.github.io/posts/2018-06-16-when-will-google-translate-be-great.html" />
			<rdf:li rdf:resource="http://pepijndevos.nl/2018/06/13/lego-ev3-robocup-robot" />
			<rdf:li rdf:resource="http://atilanevesoncode.wordpress.com/?p=767" />
			<rdf:li rdf:resource="https://cryptolosophy.org/pursuit-of-posthumous-peace" />
			<rdf:li rdf:resource="http://www.petecorey.com/blog/2018/06/11/generating-test-fixtures-with-wireshark/" />
			<rdf:li rdf:resource="https://www.brautaset.org/articles/2018/no-more-superloopy.html" />
			<rdf:li rdf:resource="http://www.the-paper-trail.org/page/cap-faq/" />
			<rdf:li rdf:resource="https://silky.github.io/posts/2018-06-06-fugu-the-generalised-relu-activation-function.html" />
			<rdf:li rdf:resource="https://begriffs.com/posts/2018-06-05-mailing-list-vs-github.html" />
		</rdf:Seq>
	</items>
</channel>

<item rdf:about="http://shape-of-code.coding-guidelines.com/?p=3841">
	<title>Derek Jones (derek-jones): 2018 in the programming language standards’ world</title>
	<link>http://shape-of-code.coding-guidelines.com/2018/08/14/2018-in-the-programming-language-standards-world/</link>
	<content:encoded>&lt;p&gt;I am sitting in the room, at the &lt;a href=&quot;https://en.wikipedia.org/wiki/BSI_Group&quot;&gt;British Standards Institution&lt;/a&gt;, where today&amp;#8217;s meeting of &lt;a href=&quot;https://standardsdevelopment.bsigroup.com/committees/50001786&quot;&gt;IST/5&lt;/a&gt;, the committee responsible for programming languages, has just adjourned (it&amp;#8217;s close to where I have to be in a few hours).&lt;/p&gt;
&lt;p&gt;BSI have downsized us, they no longer provide a committee secretary to take minutes and provide a point of contact.  Somebody from a service pool responds (or not) to emails.  I did not blink first to our chair&amp;#8217;s request for somebody to take the minutes &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-includes/images/smilies/simple-smile.png&quot; alt=&quot;:-)&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;
&lt;p&gt;What interesting things came up?&lt;/p&gt;
&lt;p&gt;It transpires that &lt;a href=&quot;http://shape-of-code.coding-guidelines.com/2017/07/12/2017-in-the-programming-language-standards-world/&quot;&gt;reports of the death of Cobol standards work&lt;/a&gt; may be premature.  There are a few people working on &amp;#8216;new&amp;#8217; features, e.g., support for JSON.  This work is happening at the ISO level, rather than the national level in the US (where the real work on the Cobol standard used to be done, before being handed on to the ISO).  Is this just a couple of people pushing a few pet ideas or will it turn into something more substantial?  We will have to wait and see.&lt;/p&gt;
&lt;p&gt;The Unicode consortium (a vendor consortium) are &lt;a href=&quot;https://www.buzzfeednews.com/article/charliewarzel/inside-the-great-poop-emoji-feud&quot;&gt;continuing to propose&lt;/a&gt; new &lt;a href=&quot;https://en.wikipedia.org/wiki/Pile_of_Poo_emoji&quot;&gt;pile of poo emoji&lt;/a&gt; and &lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG20/&quot;&gt;WG20&lt;/a&gt; (an ISO committee) were doing what they can to stay sane.&lt;/p&gt;
&lt;p&gt;Work on the &lt;a href=&quot;https://isotc.iso.org/livelink/livelink/open/jtc1SC22wg17&quot;&gt;Prolog standard&lt;/a&gt;, now seems to be concentrated in Austria.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Prolog&quot;&gt;Prolog&lt;/a&gt; was the language to be associated with, if you were on the 1980s AI bandwagon (and the Japanese were going to take over the world unless we did something about it, e.g., spend money); this time around, it&amp;#8217;s machine learning.  With one &lt;a href=&quot;http://www.swi-prolog.org/&quot;&gt;dominant open source implementation&lt;/a&gt; and &lt;a href=&quot;https://quintus.sics.se/&quot;&gt;one commercial vendor&lt;/a&gt; (cannot think of any others), standards work is a relic of past glories.&lt;/p&gt;
&lt;p&gt;In pre-internet times there was an incentive to kill off committees that were past their sell-by date; it cost money to send out mailings and document storage occupied shelf space.  In an electronic world there is no incentive to spend time killing off such committees, might as well wait until those involved retire or die.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG23/&quot;&gt;WG23&lt;/a&gt; (programming language vulnerabilities) reported &lt;a href=&quot;https://www.google.com/search?q=site%3Aopen-std.org%2Fjtc1%2Fsc22%2Fwg21%2F+sg12&quot;&gt;lots of interest in their work&lt;/a&gt; from people involved in the C++ standard, and for some reason the C++ committee people in the room started glancing at me.  I was a good boy, and did not mention &lt;a href=&quot;http://shape-of-code.coding-guidelines.com/2016/07/27/is-the-iso-c-standards-committee-past-its-sell-by-date/&quot;&gt;bored consultants&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It looks like &lt;a href=&quot;http://www.iso.org/iso/catalogue_detail.htm?csnumber=43781&quot;&gt;ISO/IEC 23360-1:2006&lt;/a&gt;, the ISO version of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_Standard_Base&quot;&gt;Linux Base Standard&lt;/a&gt; is going to be updated to reflect LBS 5.0; something that was &lt;a href=&quot;http://shape-of-code.coding-guidelines.com/2015/08/18/2015-in-the-programming-language-standards-world/&quot;&gt;not certain few years ago&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-14T16:17:29+00:00</dc:date>
</item>
<item rdf:about="http://benaiah.me/posts/configuring-go-apps-with-toml">
	<title>Benaiah Mischenko (benaiah): Configuring Go Apps with TOML</title>
	<link>http://benaiah.me/posts/configuring-go-apps-with-toml</link>
	<content:encoded>&lt;h1&gt;Configuring Go Apps with TOML&lt;/h1&gt;
&lt;p&gt;So you’ve been writing an application in Go, and you’re getting to the
point where you have a lot of different options in your program.
You’ll likely want a configuration file, as specifying every option on
the command-line can get difficult and clunky, and launching
applications from a desktop environment makes specifying options at
launch even more difficult.&lt;/p&gt;
&lt;p&gt;This post will cover configuring Go apps using a simple, INI-like
configuration language called &lt;a href=&quot;https://github.com/toml-lang/toml&quot;&gt;TOML&lt;/a&gt;, as well as some related
difficulties and pitfalls.&lt;/p&gt;
&lt;p&gt;TOML has quite a few implementations, including several libraries for
Go. I particularly like
&lt;a href=&quot;https://github.com/burntsushi/toml&quot;&gt;BurntSushi’s TOML parser and decoder&lt;/a&gt;, as it lets
you marshal a TOML file directly into a struct. This means your
configuration can be fully typed and you can easily do custom
conversions (such as parsing a &lt;code&gt;time.Duration&lt;/code&gt;) as you read the
config, so you don’t have to do them in the rest of your application.&lt;/p&gt;
&lt;h2&gt;Configuration location&lt;/h2&gt;
&lt;p&gt;The first question you should ask when adding config files to any app
is &quot;where should they go?&quot;. For tools that aren’t designed to be run
as a service, as root, or under a custom user (in other words, most of
them), you should be putting them in the user’s home directory, so
they’re easily changed. A few notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Even if you currently have only one file, you should use a folder
and put the config file within it. That way, if and when you do need
other files there, you won’t have to clutter the user’s home
directory or deal with loading config files that could be in two
different locations (Emacs, for instance, supports both
&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; and &lt;code&gt;~/.emacs&lt;/code&gt; for historical reasons, which
ends up causing confusing problems when both exist).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should name your configuration directory after your program.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should typically prefix your config directory with a &lt;code&gt;.&lt;/code&gt; (but
see the final note for Linux, as configuration directories within
&lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; should not be so prefixed).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On most OSs, putting your configuration files in the user’s “home”
directory is typical. I recommend the library
&lt;a href=&quot;https://github.com/mitchellh/go-homedir&quot;&gt;go-homedir&lt;/a&gt;, rather than the &lt;code&gt;User.Homedir&lt;/code&gt; available
in the stdlib from &lt;a href=&quot;https://golang.org/pkg/os/user/&quot;&gt;&lt;code&gt;os/user&lt;/code&gt;&lt;/a&gt;. This is because use of
&lt;code&gt;os/user&lt;/code&gt; uses &lt;a href=&quot;https://golang.org/cmd/cgo/&quot;&gt;cgo&lt;/a&gt;, which, while useful in many situations,
also &lt;a href=&quot;https://dave.cheney.net/2016/01/18/cgo-is-not-go&quot;&gt;causes a number of difficulties&lt;/a&gt; that can
otherwise be avoided - most notably, cross-compilation is no longer
simple, and the ease of deploying a static Go binary gets a number
of caveats.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On Linux specifically, I strongly encourage that you do &lt;em&gt;not&lt;/em&gt; put
your configuration directory directly in the user’s home directory.
Most commonly-used modern Linux distributions use the
&lt;a href=&quot;https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specification&lt;/a&gt; from
&lt;a href=&quot;https://www.freedesktop.org/wiki/&quot;&gt;freedesktop.org&lt;/a&gt;, which specifies standard locations
for various directories on an end-user Linux system. (Despite this,
many applications don’t respect the standard and put their
configurations directly in &lt;code&gt;~&lt;/code&gt; anyway). By default, this is
&lt;code&gt;~/.config/&lt;/code&gt;, but it can also be set with the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt;
environment variable. Directories within this should &lt;em&gt;not&lt;/em&gt; use a
leading &lt;code&gt;.&lt;/code&gt;, as the directory is already hidden by default.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following function should get you the correct location for your
config directory on all platforms (if there’s a platform with a
specific convention for config locations which I’ve missed, I’d
appreciate you letting me know so I can update the post - my email is
at the bottom of the page).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;import (
    &quot;path/filepath&quot;
    &quot;os&quot;
    &quot;runtime&quot;

    &quot;github.com/mitchellh/go-homedir&quot;
)

var configDirName = &quot;example&quot;

func GetDefaultConfigDir() (string, error) {
    var configDirLocation string

    homeDir, err := homedir.Dir()
    if err != nil {
        return &quot;&quot;, err
    }

    switch runtime.GOOS {
    case &quot;linux&quot;:
        // Use the XDG_CONFIG_HOME variable if it is set, otherwise
        // $HOME/.config/example
        xdgConfigHome := os.Getenv(&quot;XDG_CONFIG_HOME&quot;)
        if xdgConfigHome != &quot;&quot; {
            configDirLocation = xdgConfigHome
        } else {
            configDirLocation = filepath.Join(homeDir, &quot;.config&quot;, configDirName)
        }

    default:
        // On other platforms we just use $HOME/.example
        hiddenConfigDirName := &quot;.&quot; + configDirName
        configDirLocation = filepath.Join(homeDir, hiddenConfigDirName)
    }

    return configDirLocation, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within the config folder, you can use any filename you want for your
config - I suggest &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Loading the config file&lt;/h2&gt;
&lt;p&gt;To load a config file, you’ll first want to define the what config
values you’ll use. &lt;code&gt;burntsushi/toml&lt;/code&gt; will ignore options in the TOML
file that you don’t use, so you don’t have to worry about that causing
errors. For instance, here’s the proposed configuration for a project
I’m maintaining, &lt;a href=&quot;https://github.com/asciimoo/wuzz&quot;&gt;wuzz&lt;/a&gt; (the keybindings aren’t currently
implemented, but I’ve left them in for the sake of demonstration):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;type Config struct {
    General GeneralOptions
    Keys    map[string]map[string]string
}

type GeneralOptions struct {
    FormatJSON             bool
    Insecure               bool
    PreserveScrollPosition bool
    DefaultURLScheme       string
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s pretty simple. Note that we use a named struct for
&lt;code&gt;GeneralOptions&lt;/code&gt;, rather than making &lt;code&gt;Config.General&lt;/code&gt; an anonymous
struct. This makes nesting options simpler and aids tooling.&lt;/p&gt;
&lt;p&gt;Loading the config is quite easy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;import (
    &quot;errors&quot;
    &quot;os&quot;
    
    &quot;github.com/BurntSush/toml&quot;
)

func LoadConfig(configFile string) (*Config, error) {
    if _, err := os.Stat(configFile); os.IsNotExist(err) {
        return nil, errors.New(&quot;Config file does not exist.&quot;)
    } else if err != nil {
        return nil, err
    }
    
    var conf Config
    if _, err := toml.DecodeFile(configFile, &amp;amp;conf); err != nil {
        return nil, err
    }

    return &amp;amp;conf, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;toml.DecodeFile&lt;/code&gt; will automatically populate &lt;code&gt;conf&lt;/code&gt; with the values
set in the TOML file. (Note that we pass &lt;code&gt;&amp;amp;conf&lt;/code&gt; to &lt;code&gt;toml.DecodeFile&lt;/code&gt;,
not &lt;code&gt;conf&lt;/code&gt; - we need to populate the struct we actually have, not a
copy). Given the above &lt;code&gt;Config&lt;/code&gt; type and the following TOML file…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[general]
defaultURLScheme = &quot;https&quot;
formatJSON = true
preserveScrollPosition = true
insecure = false

[keys]

  [keys.general]
  &quot;C-j&quot; = &quot;next-view&quot;
  &quot;C-k&quot; = &quot;previous-view&quot;
  
  [keys.response-view]
  &quot;&amp;lt;down&amp;gt;&quot; = &quot;scroll-down&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…we’ll get a &lt;code&gt;Config&lt;/code&gt; like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;Config{
    General: GeneralOptions{
        DefaultURLScheme:       &quot;https&quot;,
        FormatJSON:             true,
        PreserveScrollPosition: true,
        Insecure:               false,
    },
    Keys: map[string]map[string]string{
        &quot;general&quot;: map[string]string{
            &quot;C-j&quot;: &quot;next-view&quot;,
            &quot;C-k&quot;: &quot;previous-view&quot;,
        },
        &quot;response-view&quot;: map[string]string{
            &quot;&amp;lt;down&amp;gt;&quot;: &quot;scroll-down&quot;,
        },
    },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Automatically decoding values&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;wuzz&lt;/code&gt; actually uses another value in its config - a default HTTP
timeout. In this case, though, there’s no native TOML value that
cleanly maps to the type we want - a &lt;code&gt;time.Duration&lt;/code&gt;. Fortunately, the
TOML library we’re using supports automatically decoding TOML values
into custom Go values. To do so, we’ll need a type that wraps
&lt;code&gt;time.Duration&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;type Duration struct {
    time.Duration
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we’ll need to add an &lt;code&gt;UnmarshalText&lt;/code&gt; method, so we satisfy the
&lt;code&gt;toml.TextUnmarshaler&lt;/code&gt; interface. This will let &lt;code&gt;toml&lt;/code&gt; know that we
expect a string value which will be passed into our &lt;code&gt;UnmarshalText&lt;/code&gt;
method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;func (d *Duration) UnmarshalText(text []byte) error {
    var err error
    d.Duration, err = time.ParseDuration(string(text))
    return err
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we’ll need to add it to our &lt;code&gt;Config&lt;/code&gt; type. This will go in
&lt;code&gt;Config.General&lt;/code&gt;, so we’ll add it to &lt;code&gt;GeneralOptions&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;type GeneralOptions struct {
    Timeout                Duration
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can add it to our TOML file, and &lt;code&gt;toml.DecodeFile&lt;/code&gt; will
automatically populate our struct with a &lt;code&gt;Duration&lt;/code&gt; value!&lt;/p&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[general]
timeout = &quot;1m&quot;
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Equivalent output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;Config{
    General: GeneralOptions{
        Timeout: Duration{
            Duration: 1 * time.Minute
        },
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Default config values&lt;/h2&gt;
&lt;p&gt;We now have configuration loading, and we’re even decoding a text
field to a custom Go type - we’re nearly finished! Next we’ll want to
specify defaults for the configuration. We want values specified in
the config to override our defaults. Fortunately, &lt;code&gt;toml&lt;/code&gt; makes really
easy to do.&lt;/p&gt;
&lt;p&gt;Remember how we passed in &lt;code&gt;&amp;amp;conf&lt;/code&gt; to &lt;code&gt;toml.DecodeFile&lt;/code&gt;? That was an
empty &lt;code&gt;Config&lt;/code&gt; struct - but we can also pass one with its values
pre-populated. &lt;code&gt;toml.DecodeFile&lt;/code&gt; will set any values that exist in the
TOML file, and ignore the rest. First we’ll create the default values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;import (
    &quot;time&quot;
)
var DefaultConfig = Config{
    General: GeneralOptions{
        DefaultURLScheme:       &quot;https&quot;,
        FormatJSON:             true,
        Insecure:               false,
        PreserveScrollPosition: true,
        Timeout: Duration{
            Duration: 1 * time.Minute,
        },
    },
    // You can omit stuff from the default config if you'd like - in
    // this case we don't specify Config.Keys
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we simply modify the &lt;code&gt;LoadConfig&lt;/code&gt; function to use
&lt;code&gt;DefaultConfig&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;func LoadConfig(configFile string) (*Config, error) {
    if _, err := os.Stat(configFile); os.IsNotExist(err) {
        return nil, errors.New(&quot;Config file does not exist.&quot;)
    } else if err != nil {
        return nil, err
    }

    conf := DefaultConfig
    if _, err := toml.DecodeFile(configFile, &amp;amp;conf); err != nil {
        return nil, err
    }

    return &amp;amp;conf, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The important line here is &lt;code&gt;conf := DefaultConfig&lt;/code&gt; - now when &lt;code&gt;conf&lt;/code&gt;
is passed to &lt;code&gt;toml.DecodeFile&lt;/code&gt; it will populate that.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I hope this post helped you! you should now be able to configure Go
apps using TOML with ease.&lt;/p&gt;
&lt;p&gt;If this post was helpful to you, or you have comments or corrections,
please let me know! My email address is at the bottom of the page. I’m
also looking for work at the moment, so feel free to get in touch if
you’re looking for developers.&lt;/p&gt;
&lt;h2&gt;Complete code&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;package config

import (
    &quot;errors&quot;
    &quot;path/filepath&quot;
    &quot;os&quot;
    &quot;runtime&quot;
    &quot;time&quot;

    &quot;github.com/BurntSushi/toml&quot;
    &quot;github.com/mitchellh/go-homedir&quot;
)

var configDirName = &quot;example&quot;

func GetDefaultConfigDir() (string, error) {
    var configDirLocation string

    homeDir, err := homedir.Dir()
    if err != nil {
        return &quot;&quot;, err
    }

    switch runtime.GOOS {
    case &quot;linux&quot;:
        // Use the XDG_CONFIG_HOME variable if it is set, otherwise
        // $HOME/.config/example
        xdgConfigHome := os.Getenv(&quot;XDG_CONFIG_HOME&quot;)
        if xdgConfigHome != &quot;&quot; {
            configDirLocation = xdgConfigHome
        } else {
            configDirLocation = filepath.Join(homeDir, &quot;.config&quot;, configDirName)
        }

    default:
        // On other platforms we just use $HOME/.example
        hiddenConfigDirName := &quot;.&quot; + configDirName
        configDirLocation = filepath.Join(homeDir, hiddenConfigDirName)
    }

    return configDirLocation, nil
}

type Config struct {
    General GeneralOptions
    Keys    map[string]map[string]string
}

type GeneralOptions struct {
    DefaultURLScheme       string
    FormatJSON             bool
    Insecure               bool
    PreserveScrollPosition bool
    Timeout                Duration
}

type Duration struct {
    time.Duration
}

func (d *Duration) UnmarshalText(text []byte) error {
    var err error
    d.Duration, err = time.ParseDuration(string(text))
    return err
}

var DefaultConfig = Config{
    General: GeneralOptions{
        DefaultURLScheme:       &quot;https&quot;,
        FormatJSON:             true,
        Insecure:               false,
        PreserveScrollPosition: true,
        Timeout: Duration{
            Duration: 1 * time.Minute,
        },
    },
}

func LoadConfig(configFile string) (*Config, error) {
    if _, err := os.Stat(configFile); os.IsNotExist(err) {
        return nil, errors.New(&quot;Config file does not exist.&quot;)
    } else if err != nil {
        return nil, err
    }

    conf := DefaultConfig
    if _, err := toml.DecodeFile(configFile, &amp;amp;conf); err != nil {
        return nil, err
    }

    return &amp;amp;conf, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;If you’d like to leave a comment, please email &lt;a href=&quot;mailto:benaiah@mischenko.com&quot;&gt;benaiah@mischenko.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-14T14:17:29+00:00</dc:date>
</item>
<item rdf:about="https://blog.artemix.org/article/show/kickstart">
	<title>Artemis (Artemix): Kickstart, a fast and simple project template bootstrapper</title>
	<link>https://blog.artemix.org/article/show/kickstart</link>
	<content:encoded>&lt;p&gt;Ever had some code base that you regularly use to start a new project?&lt;/p&gt;
&lt;p&gt;Until now, you've probably lost some time refactoring everything to fill out the right project name, title etc.&lt;/p&gt;
&lt;p&gt;A few tools already exist but either you're lost in feature bloating hell or you're fighting to configure everything in most cases.&lt;/p&gt;
&lt;p&gt;The following tool is an early-developement, rust-based, template tool made to be more versatile that its closest python counter-part, &lt;a href=&quot;https://github.com/audreyr/cookiecutter&quot;&gt;cookiecutter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, it perfectly works on Windows, Linux and MacOS without any issue!&lt;/p&gt;
&lt;h2&gt;A demonstration&lt;/h2&gt;
&lt;p&gt;Let me demonstrate this tool from a user's point of view.&lt;/p&gt;
&lt;p&gt;Say I'm John. I have a need to make several workers for my job queue.&lt;/p&gt;
&lt;p&gt;All workers follow the same base structure and only a few bits of code change.
Error management is the same, etc.&lt;/p&gt;
&lt;p&gt;Without any external tool,
the easiest way I could handle that would be to put the template in a Git repository,
clone it when needed and change the few fields,
like the handler's class name, the configuration file etc.&lt;/p&gt;
&lt;p&gt;Still, I'd like to quickly bootstrap all my workers and not have to, by hand,
replace each key with the right value.&lt;/p&gt;
&lt;p&gt;At the same time, I'm too lazy to set up an entire boostrapping suite or tool,
and I'd like to be able to make some very basic project templates that'd work almost out of the box.&lt;/p&gt;
&lt;p&gt;My example of worker system uses the following file structure for worker classes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nohighlight&quot;&gt;.
├── {{name}}.java
└── template.toml&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, this tool supports templating in file and folder names!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;{{name}}.java&lt;/code&gt; file contains the following very basic template code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;package org.artemix.worker;

class {{name}} extends WorkerBase {
        public void handle(Payload payload) {
                // Some default code
        }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;template.toml&lt;/code&gt; contains a few template-specific fields (like its name, description and configuration format version), but also variable declaration for setup prompts.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;toml&quot;&gt;name = &quot;Worker&quot;
description = &quot;Worker base template&quot;
kickstart_version = 1

[[variable]]
name=&quot;name&quot;
default=&quot;MyClass&quot;
prompt=&quot;Which class name do you want to give to your worker ?&quot;
validation=&quot;^[A-Z]\w+$&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, with the validation regex, we can attest that we'll get a valid Java class file starting with a capitalized letter.&lt;/p&gt;
&lt;p&gt;And that's it!&lt;/p&gt;
&lt;p&gt;In a few instants, we created our worker template, and we have a nice base we can later grow if we need any new more complex worker.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Now, how do you create a worker with this template?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The easiest way is by simply running the following command from inside the folder in which you want the files to be created.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ kickstart /path/to/my/template&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will parse the &lt;code&gt;template.toml&lt;/code&gt; inside the given template path and,
for each &lt;code&gt;[[variable]]&lt;/code&gt; block, will ask the prompt, validate the input,
and repeat until it's rightly entered.&lt;/p&gt;
&lt;p&gt;Once all prompts have been resolved, it'll copy and parse the files into the current directory.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But I don't want to have all my templates in local, or pass the path every time!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sure, having everything in local can be bothersome,
especially if you're starting a project from a huge project template.&lt;/p&gt;
&lt;p&gt;To answer that, in the current version, kickstart supports cloning from a git remote by either HTTP(S), SSH or even git shortcuts!&lt;/p&gt;
&lt;p&gt;In that sense, all the following commands are perfectly valid and will clone from a git remote.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;nohighlight&quot;&gt;$ kickstart git@gitlab.com:MyUser/MyTemplate
$ kickstart https://git.local/test
# With git shortcuts in the configuration, see https://stackoverflow.com/a/25975967/10165294
$ kickstart gl:MyUser/MyTemplate&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;In conclusion&lt;/h2&gt;
&lt;p&gt;While still young, this tool is already, as-is, really useful and can handle a lot of situations.&lt;/p&gt;
&lt;p&gt;Since the goal of this tool is to be as lightweight and basic as possible, you can have a fair
guarantee that it won't become an over-complex, feature-bloated, tool.&lt;/p&gt;
&lt;p&gt;Not every feature has been showcased in this article, so I can only recommend you to go to the &lt;a href=&quot;https://github.com/Keats/kickstart&quot;&gt;official Github repository&lt;/a&gt;,
and take a look at the &lt;code&gt;README.md&lt;/code&gt; file, which should contains every information you'd need to learn how to use it.&lt;/p&gt;
&lt;p&gt;As I publish this article, the official &lt;code&gt;v0.1.7&lt;/code&gt; version have been released, and you can find the relesae on the &lt;a href=&quot;https://github.com/Keats/kickstart/releases&quot;&gt;releases page&lt;/a&gt;.
If you'd prefer to be on the latest version, you can simply clone the repository, and, while inside it, run &lt;code&gt;cargo builld&lt;/code&gt; and have a working version just for you.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-14T14:17:29+00:00</dc:date>
</item>
<item rdf:about="https://www.junglecoder.com/blog/factorlang-review">
	<title>Andrew Owen (yumaikas): Factor: An impressive stack-based language environment</title>
	<link>https://www.junglecoder.com/blog/factorlang-review</link>
	<content:encoded>&lt;p&gt;Recently the &lt;a href=&quot;https://factorcode.org&quot;&gt;Factor&lt;/a&gt; programming language had a new 0.98 release, after a 4 year hiatus after the 0.97 release. Finding this on lobsters, I decided to take Factor for a spin again, after years of having left it mostly alone to work on PISC. I decided I wanted to try to build a (still slightly buggy) &lt;a href=&quot;https://gist.github.com/yumaikas/6c8aebf8b0baf20431e06bd20c47dec4&quot;&gt;4-function calculator&lt;/a&gt;, as I find that a good way to gauge how easy/hard it is to use a GUI system for small things, and as a way to gauge what Factor is like in general.&lt;/p&gt;

&lt;h3&gt;The (quite frankly) awesome&lt;/h3&gt;

&lt;p&gt;Probably by &lt;em&gt;far&lt;/em&gt; the most impressive part of Factor that I&amp;rsquo;ve seen so far: Factor is the second language I&amp;rsquo;ve come across that I&amp;rsquo;d comfortably take on a deserted island without an internet connection (the other being Go with it&amp;rsquo;s godoc server). This is due to the fact that a) 95% of all Factor documentation I&amp;rsquo;ve seen is accessible from the included Help browser, and b) the Factor debugger/inspector can inspect itself in great detail. This is the cherry atop Factor: You don&amp;rsquo;t just get a REPL, you also get a &lt;em&gt;really&lt;/em&gt; useful set of debugging tools (especially the object inspector), and can dig into any of the state in the system, and using the help tools, once you understand some basics, you stand a decent chance of being able to either correct the state, or diagnose the bug.&lt;/p&gt;

&lt;p&gt;This sort of tooling is something that SmallTalk is famous for, but any time I&amp;rsquo;ve tried SmallTalk, I&amp;rsquo;ve usually bounced off of it because most SmallTalk implementations end up living in their own world, making it hard to bring some of my favorite programming tools with me, and making it hard to interact with the outside world (footnote 3). Factor, on the other hand, even though it has an image that can updated to keep state around, and has a really good debugger, still integrates well with the outside world.&lt;/p&gt;

&lt;p&gt;Really well, in fact. It&amp;rsquo;s easy to scaffold a vocabulary &lt;code&gt;USE: tools.scaffold &amp;quot;vocabulary-name&amp;quot; scaffold-vocabulary&lt;/code&gt; , and then run &lt;code&gt;USE: editors.sublime&lt;/code&gt; (or emacs, or vim, or any of about 24 other fairly popular editors), and then run &lt;code&gt;&amp;quot;vocabulary-name&amp;quot; edit&lt;/code&gt; and have it open the vocabulary in the editor in question. This allows you to open up any of the Factor source code in the editor of your choice. And when you&amp;rsquo;re ready to start using/testing the vocabulary, running &lt;code&gt;&amp;quot;vocabulary-name&amp;quot; reload&lt;/code&gt; puts you right into compile-fixing mode, where you can fix the bug in question, and then reload the vocabulary. When I was working on a 4-function calculator using the Factor listener and Sublime Text, it was a &lt;em&gt;really&lt;/em&gt; tight feedback loop.&lt;/p&gt;

&lt;p&gt;The GUI framework has a pretty nifty sorta-FRP like approach to how to handles data binding in controls, allowing you to daisy chain models (data that can be updated over time) via arrows (models with a quotation they apply to a base model when it&amp;rsquo;s data changes).&lt;/p&gt;

&lt;p&gt;Also, Factor has a mostly working dark-mode setup (there are some sections of the inspector that have poor contrast, but the listener is in a good state), if you dislike the default black-on-white color scheme (I found it difficult for some of the late night hacking I was doing). Run the following commands in the listener (assuming Factor 0.98)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;USE: tools.scaffold 
scaffold-factor-boot-rc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then edit the .factor-boot-rc to look like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;USE: ui.theme.switching 

dark-mode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then then run &lt;code&gt;run-bootstrap-init save&lt;/code&gt; in the listener, and close and re-open the listener. Viola, Factor&amp;rsquo;s dark mode!&lt;/p&gt;

&lt;h3&gt;Consequences of (relative) obscurity&lt;/h3&gt;

&lt;p&gt;That being said, there are still a few rough edges with Factor. For one, even though most things are documented, and those that are not have easily accessible source, Factor itself has almost no Google presence, which means that you have to be comfortable digging though the included help docs a bit longer to sort things out. This played out in a few practical ways when I was working on the 4-function calculator. Until the end of the project, I missed that &lt;code&gt;gadgets&lt;/code&gt; (Factor&amp;rsquo;s equivalent for controls in WinForms) were subclasses of &lt;code&gt;rectangles&lt;/code&gt;, which meant that I could set their width and height by storing to the &lt;code&gt;dim&lt;/code&gt;(ension) on a gadget:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;factor&quot;&gt;&amp;quot;Test&amp;quot; &amp;lt;label&amp;gt; { 200 300 } &amp;gt;&amp;gt;dim &amp;quot;example of a 200x300 label&amp;quot; open-window 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ended up looking around the documentation about 4 times before I made that connection. This is the sort of question that would be on stack overflow for a more popular language.&lt;/p&gt;

&lt;p&gt;For another, I seemed to be running across rendering or state glitches in the listener that could cause buttons to be mislabeled. I&amp;rsquo;m unsure what was leading to it, but it was distracting, to say the least. The other thing with Factor that became evident was the singled threaded nature of it&amp;rsquo;s runtime (as of currently). When first making a search in the help system, it would lock up, sometimes as long as 10-15 seconds, as it was indexing or loading in the various articles and such into memory. This limitation has kept me from digging into some languages (like Ocaml, though there are a bunch of other reasons, like iffy Windows support) in the past, especially when alternatives like Go and Erlang with their strong multi-threaded runtimes exist, but I think I&amp;rsquo;m willing to look past it in Factor for now, especially since I hear that there is a half decent IPC story for Factor processes.&lt;/p&gt;

&lt;p&gt;The other consequence of all this was that it took me roughly 10-15 hours of noodling around with Factor, and writing an even smaller example GUI script to be able to get the linked calculator above done. I think I could build other new things with far less stumbling around, but it was a good reminder of how slow learning something new can be.&lt;/p&gt;

&lt;p&gt;The other minor frustration I have with Factor is the fact that any file that does much work tends to accrete quite a few imports in its &lt;code&gt;USING:&lt;/code&gt; line (the calculator I wrote has 23 imports across 4 lines, even though it&amp;rsquo;s only 100 lines of code). This is mostly due to a lot of various Factor systems being split into quite a few vocabularies. I could see this being helpful with compilation&lt;/p&gt;

&lt;h3&gt;Comparisons to PISC&lt;/h3&gt;

&lt;p&gt;Factor was a big inspiration for &lt;a href=&quot;https://pisc.junglecoder.com/&quot;&gt;Position Independent Source Code&lt;/a&gt; (PISC), especially since it gave me the idea of code quotations some basic ideas for a few stack shuffling operations and some combinators (like &lt;code&gt;when&lt;/code&gt; or &lt;code&gt;bi&lt;/code&gt;). Factor and PISC have diverged a decent amount, though Factor is far and away further down the general path I&amp;rsquo;d been wanting to take PISC in terms of documentation and interactivity. Revisiting it after spending 3 years of assorted free time working with PISC demonstrated that in a lot of ways.&lt;/p&gt;

&lt;p&gt;Factor has a much higher level of introspection. When making the calculator I only had to think in Factor, rather than thinking in both PISC and Go (which is common when writing PISC). I also didn&amp;rsquo;t have to rebuild many building blocks to get where I was going, like I would in PISC, as Slava and the other maintainers have done a &lt;em&gt;lot&lt;/em&gt; of the foundational work already. Revisiting Factor after having written so much PISC did make understanding the stack a lot easier. I imagine that stack management will be most people&amp;rsquo;s struggle with Factor. I&amp;rsquo;ve found that implementing a stack language helped me there, but for some people, they may just have to do some exercises with it.&lt;/p&gt;

&lt;h3&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;I do anticipate building more side-projects in Factor, as I&amp;rsquo;ve yet to try out the web framework, and I have a couple of ideas for websites in the back of my mind. There&amp;rsquo;s a &lt;em&gt;lot&lt;/em&gt; of vocabularies that come with the base Factor download. I get the feeling that I may be adding some to it in the future, though time will tell.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-14T14:17:27+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/7eb491389b23">
	<title>Indrek Lasn (indreklasn): Want to become a top writer? Follow this simple framework and you will succeed</title>
	<link>https://medium.com/swlh/want-to-write-about-tech-follow-this-simple-framework-and-become-a-top-writer-7eb491389b23?source=rss-ce572601b7e------2</link>
	<content:encoded>&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*cVBgcFz9Df0vQj2H&quot; /&gt;“A sticker reading “good news is coming” on an advertising column” by &lt;a href=&quot;https://unsplash.com/@jontyson?utm_source=medium&amp;utm_medium=referral&quot;&gt;Jon Tyson&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;p&gt;Let’s face it — writing is hard. Writing to a tech savvy crowd is even harder. The tech industry is one of the most competitive and lucrative fields. It’s no surprise the demand for quality articles is very high. Everyone in the tech field is bright, hungry for knowledge and success. They won’t let you waste their time even if you tried.&lt;/p&gt;&lt;p&gt;Which is exactly why I’ve put together a small framework on how to write well and succeed at it.&lt;/p&gt;&lt;p&gt;I will do my best to extract my approach to writing so you can apply the same methods.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*_wkR7c3dkmElih6tjrSuXA.png&quot; /&gt;Hi, this is me!&lt;p&gt;Without further ado, let’s jump in!&lt;/p&gt;&lt;h3&gt;Persistence is key&lt;/h3&gt;&lt;p&gt;You guessed it! The very first and most important rule is to have persistence and the “never give up” mentality. When I started writing, I had close to 100 reader per month, and I was very grateful for even that. Thank you!&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*C7K-rJerBhT5I15IWZBMLQ.jpeg&quot; /&gt;300k monthly views back in ‘17 December&lt;p&gt;If you like what you’re doing, keep doing it. If you don’t like it, don’t keep doing it. It’s easy as that — if you enjoy writing, keep doing it. Be open to criticism and feedback so you can improve. Never let anyone tell you how and what to say. Keep a healthy balance.&lt;/p&gt;&lt;p&gt;Come up with a realistic number of article you can produce per month and stick with it. You will be surprised how much you can achieve in year if you follow this quick practise.&lt;/p&gt;&lt;h3&gt;Humility loves humor&lt;/h3&gt;&lt;p&gt;You are never too important. I’m never too important. No one is too important, ever. Even the most famous kings have fallen and so will we.&lt;/p&gt;&lt;p&gt;Be humble and don’t lose the bond between readers. Always consider your readers and be open for dialog. Don’t have &lt;a href=&quot;https://blog.codinghorror.com/strong-opinions-weakly-held/&quot;&gt;strong opinions weakly held&lt;/a&gt;.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*CWylVNTeCs7SoK3u0Mgwsg.png&quot; /&gt;Comment found on the internet&lt;p&gt;Besides, who doesn’t love jokes ❤&lt;/p&gt;&lt;h3&gt;Have something interesting to say&lt;/h3&gt;&lt;p&gt;Writing is a monologue, always write about something which provides value. When following this advice — don’t take it to the extreme. Your next article doesn’t have to carry the burden of discovering the cure for cancer — although that would definitely help.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*arD09HXVX9-jcc9C1zB4BA.png&quot; /&gt;These authors have something interesting to say&lt;p&gt;Why are some articles popular and some are not? It’s possible people don’t read some articles because they’re not interesting enough, right?&lt;/p&gt;&lt;blockquote&gt;A story should entertain the writer too — &lt;em&gt;Stephen King&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;It’s very common to feel not having anything of value to say. Especially to a big audience. Which exactly brings me to my next point since they compliment each other.&lt;/p&gt;&lt;h3&gt;Read more than you write&lt;/h3&gt;&lt;p&gt;This one is obvious, but I also need to remind myself this. Reading will help you come up with new ideas and extend on ideas. The perfect time to pick up a book or browse through the dust of bookmarks is when the mind is blank.&lt;/p&gt;&lt;p&gt;Embrace it, own it and use it to your advantage. Having a blank mind is the perfect time for accepting new ideas.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/personal-growth/12-top-rated-courses-for-writers-1af0af23334a&quot;&gt;15 Top Rated Courses For Writers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/personal-growth/29-awesome-audiobooks-a30dc13b78b5&quot;&gt;29 Awesome Audiobooks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Be trendy and irresistible&lt;/h3&gt;&lt;p&gt;That’s right, the subject matters a lot. Let’s say we two article:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The first article is about a new Javascript framework which will be next React and take over the world.&lt;/li&gt;&lt;li&gt;The second article is about the terms and conditions for the microwave.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Which one would you read?&lt;/p&gt;&lt;p&gt;Keep your eyes open and try to come up with new and fresh topics. Readers are demanding and won’t even click on articles which give the slightest scent of being boring. And why would they? There’s so much good material out there.&lt;/p&gt;&lt;p&gt;Find an interesting subject, have a great title and have something interesting to say.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*qUFYcgxQ-6CSx1AM&quot; /&gt;“Modern art piece featuring a halved orange with the rind painted blue on a blue background” by &lt;a href=&quot;https://unsplash.com/@codytdavis?utm_source=medium&amp;utm_medium=referral&quot;&gt;Cody Davis&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;p&gt;If you combine all these five tips, success is sure to follow. Tomorrow already starts today, pick up that pen or keyboard and start writing!&lt;/p&gt;&lt;p&gt;Thanks for reading! ❤&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@wesharehoodies&quot;&gt;Indrek Lasn - Medium&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/lasnindrek&quot;&gt;Indrek Lasn (@lasnindrek) | Twitter&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;a href=&quot;https://medium.com/swlh&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*YqDjlKFwScoQYQ62DWEdig.png&quot; /&gt;&lt;/a&gt;&lt;h4&gt;This story is published in &lt;a href=&quot;https://medium.com/swlh&quot;&gt;The Startup&lt;/a&gt;, Medium’s largest entrepreneurship publication followed by 358,974+ people.&lt;/h4&gt;&lt;h4&gt;Subscribe to receive &lt;a href=&quot;http://growthsupply.com/the-startup-newsletter/&quot;&gt;our top stories here&lt;/a&gt;.&lt;/h4&gt;&lt;a href=&quot;https://medium.com/swlh&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*ouK9XR4xuNWtCes-TIUNAw.png&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7eb491389b23&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/swlh/want-to-write-about-tech-follow-this-simple-framework-and-become-a-top-writer-7eb491389b23&quot;&gt;Want to become a top writer? Follow this simple framework and you will succeed&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/swlh&quot;&gt;The Startup&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-14T14:09:33+00:00</dc:date>
</item>
<item rdf:about="https://itscode.red/posts/announcing-pikatrack-an-open-source-fitness-tracker/">
	<title>Luke Picciau (user545): Announcing Pikatrack an Open Source Fitness Tracker</title>
	<link>https://itscode.red/posts/announcing-pikatrack-an-open-source-fitness-tracker/</link>
	<content:encoded>Just a short post today to show off what I have been working on for the last few weeks. I have been busy making a website for activity tracking primarily for cycling and running. The website is 100% open source and you can check it out on GitLab. Currently the project is in a very early stage and you can&amp;rsquo;t do a whole lot but I will be updating this blog with the progress.</content:encoded>
	<dc:date>2018-08-13T13:36:37+00:00</dc:date>
</item>
<item rdf:about="https://www.ponylang.org/blog/2018/08/last-week-in-pony---august-12-2018/">
	<title>Ponylang (SeanTAllen): Last Week in Pony - August 12, 2018</title>
	<link>https://www.ponylang.org/blog/2018/08/last-week-in-pony---august-12-2018/</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Last Week In Pony&lt;/em&gt; is a weekly blog post to catch you up on the latest news for the Pony programming language. To learn more about Pony check out &lt;a href=&quot;https://www.ponylang.org/blog/ponylang.org&quot;&gt;our website&lt;/a&gt;, our Twitter account &lt;a href=&quot;https://twitter.com/ponylang&quot;&gt;@ponylang&lt;/a&gt;, our &lt;a href=&quot;https://pony.groups.io/g/user&quot;&gt;users&amp;rsquo; mailing list&lt;/a&gt; or join us &lt;a href=&quot;https://webchat.freenode.net/?channels=%23ponylang&quot;&gt;on IRC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Got something you think should be featured? There&amp;rsquo;s a GitHub issue for that! Add a comment to the &lt;a href=&quot;https://github.com/ponylang/ponylang.github.io/issues?q=is%3Aissue+is%3Aopen+label%3Alast-week-in-pony&quot;&gt;open &amp;ldquo;Last Week in Pony&amp;rdquo; issue&lt;/a&gt;.
&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-13T00:46:37+00:00</dc:date>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/08/13/algorithmically-fingering-guitar-chords-with-elixir/">
	<title>Pete Corey (petecorey): Algorithmically Fingering Guitar Chords with Elixir</title>
	<link>http://www.petecorey.com/blog/2018/08/13/algorithmically-fingering-guitar-chords-with-elixir/</link>
	<content:encoded>&lt;p&gt;Last time we wrote about using Elixir to generate all possible voicings of a given guitar chord &lt;a href=&quot;http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir/&quot;&gt;to find the voicing with the best voice leading between another chord&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While this was great, there were several issues. We were conflating the idea of “musical distance” and “physical distance” when calculating optimal voice leading, and we weren’t taking the playability of the progressions we were generating into account.&lt;/p&gt;

&lt;p&gt;To address both of these issues, we need to know not only &lt;em&gt;which&lt;/em&gt; voicings are possible for a given chord, but also &lt;em&gt;how&lt;/em&gt; each of those voicings can be played. We need to generate all possible fingerings for a given guitar chord voicing.&lt;/p&gt;

&lt;p&gt;This sounds like a fantastic excuse to flex our Elixir muscles!&lt;/p&gt;

&lt;h2 id=&quot;calculating-fingerings&quot;&gt;Calculating Fingerings&lt;/h2&gt;

&lt;p&gt;We’ll start our journey into calculating all possible fingerings for a given guitar chord by creating a new Elixir module, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Fingering&lt;/span&gt;&lt;/code&gt;, and a new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defmodule Chord.Fingering do
  def fingerings(chord)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our high level plan of attack for computing possible fingerings is fairly straight forward. Given that each &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; is &lt;a href=&quot;http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir#rendering-chords&quot;&gt;a six-element array of frets being played&lt;/a&gt;, like &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;, we want to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Attach all possible fingerings that can be played on each fret.&lt;/li&gt;
  &lt;li&gt;Choose each possible finger in turn, sieve out all subsequent impossible fingers, and recursively repeat to get all possible fingerings.&lt;/li&gt;
  &lt;li&gt;Perform any necessary cleanup.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our final &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function makes these steps fairly explicit:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def fingerings(chord),
  do:
    chord
    |&amp;gt; attach_possible_fingers()
    |&amp;gt; choose_and_sieve()
    |&amp;gt; cleanup()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;possible-fingers-sieves&quot;&gt;Possible Fingers? Sieves?&lt;/h2&gt;

&lt;p&gt;Before we dive deeper into our solution, we should take a detour and talk about how we’re computing fingerings.&lt;/p&gt;

&lt;p&gt;Our solution takes inspiration from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&quot;&gt;“Sieve of Eratosthenes”&lt;/a&gt;, which is a clever technique for calculating prime numbers. The basic idea of a “sieve” is that a choice made &lt;em&gt;now&lt;/em&gt; can be used to filter out &lt;em&gt;future&lt;/em&gt; unwanted results.&lt;/p&gt;

&lt;p&gt;To bring it back to our situation, imagine we’re trying to play a D minor chord on the fifth fret:&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/algorithmically-fingering-guitar-chords-with-elixir/Dm.png&quot; /&gt;
  &lt;p&gt;Our D minor chord.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If we were to start fingering this chord by placing our second finger on the low D note, we know that we couldn’t use our first finger on any of the other notes in the chord. Our first finger would have to wrap over or sneak under our second finger to reach those notes, and that’s essentially impossible:&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/algorithmically-fingering-guitar-chords-with-elixir/sieve.png&quot; /&gt;
  &lt;p&gt;We can't use our first finger anywhere!&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;So by choosing to use our second finger on the fifth string and fret, we can sieve out the possibility of using our first finger on any of the remaining notes.&lt;/p&gt;

&lt;p&gt;If we think about it, we can also sieve out the possibility of re-using our second finger. A finger can’t be re-used unless it’s forming a bar or a double-stop on an adjacent fret.&lt;/p&gt;

&lt;p&gt;Our remaining set of possible fingers for the remaining notes are fingers three and four.&lt;/p&gt;

&lt;p&gt;By recursively picking another of our possible fingers on another string and applying our sieving rules, we can come up with our entire set of possible fingers.&lt;/p&gt;

&lt;h2 id=&quot;choosing-and-sieving&quot;&gt;Choosing and Sieving&lt;/h2&gt;

&lt;p&gt;The meat of our algorithm lives in the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;choose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function, which takes an initial &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;, complete with “possible fingers”, and a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt; argument that defaults to an empty list:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp choose_and_sieve(chord, fingerings \\ [])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt; argument will be used to hold each finger choice for our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;, as we choose them.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;choose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function expects each element of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; to be a two-element tuple, where the first element is the fret being played, and the second element is the set of possible fingers that could be chosen to play that fret.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;attach_possible_fingers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper function transforms our initial chord into that expected structure:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp attach_possible_fingers(chord),
  do: Enum.map(chord, &amp;amp;{&amp;amp;1, 1..4})
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Our implementation of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;choose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; is recursive, so we should start our implementation by defining our base case. The base case for &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;choose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; is triggered when &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; is empty. At that point, we’ve handled every note in the chord, and need to return our fully constructed fingering:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp choose_and_sieve([], fingerings),
  do:
    fingerings
    |&amp;gt; Enum.reverse()
    |&amp;gt; List.to_tuple()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we’ll soon see, chosen fingers are appended onto &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt; in reverse order, so we &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; our list to reorient our strings. Lastly we turn our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt; list into a tuple so that we can safely &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; our resulting list of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt; without losing our groupings.&lt;/p&gt;

&lt;p&gt;Once flattened, our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function maps over this final list and converts each tuple back into an array:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp cleanup(fingerings),
  do: Enum.map(fingerings, &amp;amp;Tuple.to_list/1)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Moving on from our base case, it’s time to start thinking of other simple to handle situations.&lt;/p&gt;

&lt;p&gt;If the next element in our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; list is an unplayed string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;), we add it to our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt; list and designate it to be played with no finger (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;), and recursively call &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;choose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; on our remaining &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp choose_and_sieve([{nil, _possible_fingers} | chord], fingerings),
  do: choose_and_sieve(chord, [{nil, nil} | fingerings])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, if the next element of our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; is an open string, we’re recursively call &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;, passing in our remaining &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;, and our set of fingers appended with the open string played with no finger (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;):&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp choose_and_sieve([{0, _possible_fingers} | chord], fingerings),
  do: choose_and_sieve(chord, [{0, nil} | fingerings])
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;In the case of actually needing to finger a note, the situation becomes more complicated. In that case, the next element of our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; is a fret and some set of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;possible_fingers&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We’ll map over each of the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;possible_fingers&lt;/span&gt;&lt;/code&gt;, appending each &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;finger&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fret&lt;/span&gt;&lt;/code&gt; to our list of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fingerings&lt;/span&gt;&lt;/code&gt;, sieving out any now-impossible &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;possible_fingerings&lt;/span&gt;&lt;/code&gt; from the remaining notes in our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;, and then recursively calling our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;choose_and_sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function with our newly sieved &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;new_fingerings&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp choose_and_sieve([{fret, possible_fingers} | chord], fingerings),
  do:
    possible_fingers
    |&amp;gt; Enum.map(fn finger -&amp;gt;
      new_fingerings = [{fret, finger} | fingerings]

      chord
      |&amp;gt; sieve_chord(new_fingerings)
      |&amp;gt; choose_and_sieve(new_fingerings)
    end)
    |&amp;gt; List.flatten()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;sieve_chord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; helper function maps over each of the notes in what’s left of our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord&lt;/span&gt;&lt;/code&gt;, and updates the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;possible_fingers&lt;/span&gt;&lt;/code&gt; tuple element to sieve any fingerings that are now deemed impossible to play after placing our most recent finger:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp sieve_chord(chord, fingerings),
  do:
    chord
    |&amp;gt; Enum.map(fn {fret, possible_fingers} -&amp;gt;
      {fret, sieve_fingers(possible_fingers, fret, fingerings)}
    end)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;sieve_fingers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt; helper function is where we make real decisions about the behavior of our fingering algorithm. The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;sieve_fingers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt; function itself is fairly straight forward. It simply rejects and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;possible_fingers&lt;/span&gt;&lt;/code&gt; that are considered “bad” by our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;bad_finger?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt; helper function:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp sieve_fingers(possible_fingers, fret, fingerings),
  do: Enum.reject(possible_fingers, &amp;amp;bad_finger?(fret, &amp;amp;1, fingerings))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;bad_finger?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt; function runs each &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;finger&lt;/span&gt;&lt;/code&gt;/&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fret&lt;/span&gt;&lt;/code&gt; combinations through four rules used by our algorithm to determine if a finger choice is “impossible”, and should be culled from our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;possible_fingers&lt;/span&gt;&lt;/code&gt; set:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp bad_finger?(fret, finger, fingerings),
  do:
    Enum.any?([
      fret_above_finger_below?(fret, finger, fingerings),
      fret_below_finger_above?(fret, finger, fingerings),
      same_finger?(fret, finger, fingerings),
      impossible_bar?(fret, finger, fingerings)
    ])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If any of those rules are violated, the finger is rejected.&lt;/p&gt;

&lt;p&gt;The first two rules check if a possible finger would need to stretch over or under an already placed finger, respectively:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp fret_above_finger_below?(fret, finger, [{new_fret, new_finger} | _]),
  do: fret &amp;gt; new_fret &amp;amp;&amp;amp; finger &amp;lt; new_finger

defp fret_below_finger_above?(fret, finger, [{new_fret, new_finger} | _]),
  do: fret &amp;lt; new_fret &amp;amp;&amp;amp; finger &amp;gt; new_finger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The third rule verifies that no finger can be used twice, unless when performing a bar or double-stop over adjacent frets:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp same_finger?(fret, finger, [{new_fret, new_finger} | _]),
  do: finger == new_finger &amp;amp;&amp;amp; fret != new_fret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we need to prevent “impossible bars”, or bars that would mute notes played on lower frets:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp impossible_bar?(_fret, finger, fingerings = [{new_fret, _} | _]),
  do:
    fingerings
    |&amp;gt; Enum.filter(fn {fret, _finger} -&amp;gt; fret &amp;gt; new_fret end)
    |&amp;gt; Enum.map(fn {_fret, finger} -&amp;gt; finger end)
    |&amp;gt; Enum.member?(finger)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-results&quot;&gt;The Results&lt;/h2&gt;

&lt;p&gt;Now that we’ve implemented our fingering algorithm, let’s try a few examples.&lt;/p&gt;

&lt;p&gt;We’ll start by calculating the possible fingerings for the D minor chord we’ve been using as an example. Fingering suggestions are listed below each string:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[nil, 5, 7, 7, 6, nil]
|&amp;gt; Chord.Fingering.fingerings()
|&amp;gt; Enum.map(&amp;amp;Chord.Renderer.to_string/1)
|&amp;gt; Enum.join(&quot;\n\n&quot;)
|&amp;gt; IO.puts
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/algorithmically-fingering-guitar-chords-with-elixir/Dm-voicings.png&quot; /&gt;
  &lt;p&gt;Fingerings for our D minor chord.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Awesome! The first suggested bar can be difficult to play, but with some practice doing &lt;a href=&quot;http://forums.tedgreene.com/post/how-to-do-a-a-ted-greene-double-stop-8526262&quot;&gt;Ted Greene-style double-stops&lt;/a&gt;, it’s manageable. The second and third suggestions are what I would normally reach for.&lt;/p&gt;

&lt;p&gt;Another interesting example is an open G major shape:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[3, 2, 0, 0, 3, 3]
|&amp;gt; Chord.Fingering.fingerings()
|&amp;gt; Enum.map(&amp;amp;Chord.Renderer.to_string/1)
|&amp;gt; Enum.join(&quot;\n\n&quot;)
|&amp;gt; IO.puts
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/algorithmically-fingering-guitar-chords-with-elixir/G-voicings.png&quot; /&gt;
  &lt;p&gt;Fingerings for our G chord.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The first few fingering suggestions make sense, but as we get closer to the end of the list, some of the suggestions are increasingly difficult to play. I don’t think I’ll ever be able to play this fingering:&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/algorithmically-fingering-guitar-chords-with-elixir/G-bad-voicing.png&quot; /&gt;
  &lt;p&gt;An &quot;impossible&quot; to play fingering.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;As a human, I can explain to you why this is difficult to play, but I haven’t been able to come up with a general rule to add to our rule set that would prevent these kinds of fingerings from being suggested. At this point, I’d rather have the algorithm present &lt;em&gt;potentially impossible&lt;/em&gt; fingerings, than have it over-aggressively prune &lt;em&gt;possible&lt;/em&gt; fingerings from the result set.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next?&lt;/h2&gt;

&lt;p&gt;In my previous article on &lt;a href=&quot;http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir/&quot;&gt;“Voice Leading with Elixir”&lt;/a&gt;, I mentioned that I was conflating the ideas of “musical distance” and “physical distance”. In terms of voice leading, all I really care about is optimizing a chord progression for musical distance. But as a guitar player, I also want to consider “physical distance”.&lt;/p&gt;

&lt;p&gt;If a set of chords all have the same “musical distance” from a given starting chord, I want to choose the chord that has the lowest “physical distance”. By “physical distance”, I mean literally fret distance, but also how difficult it is to transition from one chord to another. Do I just need to slide one finger? That’s easy! Do I need to lift and replace three fingers while sliding the fourth? That’s not so easy…&lt;/p&gt;

&lt;p&gt;We can’t calculate the “physical distance” between chords unless we know the fingerings for the chords in question. Now that we know the potential fingerings for a given chord, we can compute a (modified) &lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;levenshtein distance&lt;/a&gt; between the fingerings of two chords!&lt;/p&gt;

&lt;p&gt;Why is that cool?&lt;/p&gt;

&lt;p&gt;Once that’s done, we’ll be able to take a starting chord (optionally with a starting fingering), and find the best voicing of the landing chord in terms of voice leading and ease of playability!&lt;/p&gt;

&lt;p&gt;Be sure to check out &lt;a href=&quot;https://github.com/pcorey/chord/&quot;&gt;the entire project on Github&lt;/a&gt;, and stay tuned for more.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-13T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://patrick.marchand.ski/tech/run-bsd.html">
	<title>Patrick Marchand (superpat): Run BSD</title>
	<link>https://patrick.marchand.ski/tech/run-bsd.html</link>
	<content:encoded>&lt;h1 id=&quot;https://patrick.marchand.skiRun%20BSD&quot;&gt;Run BSD&lt;/h1&gt;

&lt;p&gt;By reading this blog, you will probably notice that I'm a bit a BSD fan. &lt;/p&gt;

&lt;p&gt;Roman Zolotarev hosts a series of stories about BSD users on his &lt;a href=&quot;https://patrick.marchand.skihttps://www.bsdjobs.com/&quot;&gt;BSD job board&lt;/a&gt;. There are a lot of fascinating stories about how people got into and / or use BSD.&lt;/p&gt;

&lt;p&gt;You can find mine &lt;a href=&quot;https://patrick.marchand.skihttps://www.bsdjobs.com/people/mathuin.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-12T15:00:00+00:00</dc:date>
</item>
<item rdf:about="https://vfoley.xyz/rust-compile-speed-tips/">
	<title>Vincent (vfoley): How to alleviate the pain of Rust compile times</title>
	<link>https://vfoley.xyz/rust-compile-speed-tips/</link>
	<content:encoded>A few days ago, I wrote about two Rust pain points when using Rust at work. One of these points were the long compile times. In this post, I want to share a few tips that can help alleviate that pain.
Use cargo check We typically use the compiler for two reasons: to verify if the syntax and/or types are correct and to generate a runnable program. When compiling a program, especially a release build, the majority of the time is spent generating LLVM bytecode and optimizing that bytecode.</content:encoded>
	<dc:date>2018-08-11T11:10:12+00:00</dc:date>
</item>
<item rdf:about="http://shape-of-code.coding-guidelines.com/?p=3819">
	<title>Derek Jones (derek-jones): Maximum team size before progress begins to stall</title>
	<link>http://shape-of-code.coding-guidelines.com/2018/08/11/maximum-team-size-before-progress-begins-to-stall/</link>
	<content:encoded>&lt;p&gt;On multi-person projects people have to talk to each other, which reduces the amount of time available for directly working on writing software.  How many people can be added to a project before the extra communications overhead is such that the total amount of code, per unit time, produced by the team decreases?&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://www.researchgate.net/publication/23871473_Staffing_implications_of_software_productivity_models&quot;&gt;rarely cited paper by Robert Tausworthe&lt;/a&gt; provides a simple, but effective analysis.&lt;/p&gt;
&lt;p&gt;&lt;ins datetime=&quot;2018-08-14T11:51:36+00:00&quot;&gt;The plot below shows team productivity rate for a given number of team sizes, based on the examples discussed below.&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.coding-guidelines.com/images/prod-rate-team-size.png&quot; alt=&quot;Team productivity for given number of members&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Activities are split between communicating and producing code.&lt;/p&gt;
&lt;p&gt;If we assume the communications overhead is give by: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_986.5_dd1abc08db2451d2256d18f1867b84a3.png&quot; alt=&quot;t_0(S^{alpha}-1)&quot; title=&quot;t_0(S^{alpha}-1)&quot; /&gt;, where &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_986.5_b5819b6624cac60dadbc37a5a1d5b271.png&quot; alt=&quot;t_0&quot; title=&quot;t_0&quot; /&gt; is the percentage of one person&amp;#8217;s time spent communicating in a two-person team, &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994.5_0dddeed4b0f51aaad8bcaf380fcbe48f.png&quot; alt=&quot;S&quot; title=&quot;S&quot; /&gt; the number of developers and &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994.5_d50f9308cbed63f78681eb5d428d5a8d.png&quot; alt=&quot;alpha&quot; title=&quot;alpha&quot; /&gt; a constant greater than zero (I&amp;#8217;m using Tausworthe&amp;#8217;s notation).&lt;/p&gt;
&lt;p&gt;The maximum team size, before adding people reduces total output, is given by: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_956.5_2d35fd90ed7010ccbba24a35fcbe1795.png&quot; alt=&quot;S=({1+t_0}/{(1+alpha)t_0})^{1/{alpha}}&quot; title=&quot;S=({1+t_0}/{(1+alpha)t_0})^{1/{alpha}}&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994_d70bc917cc8a4bf2d32eac6d20e035f1.png&quot; alt=&quot;alpha=1&quot; title=&quot;alpha=1&quot; /&gt; (i.e., everybody on the project has the same communications overhead), then &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_978_fb56a32de5ffd002b9fc1a20afc32012.png&quot; alt=&quot;S={1+t_0}/{2t_0}&quot; title=&quot;S={1+t_0}/{2t_0}&quot; /&gt;, which for small &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_986.5_b5819b6624cac60dadbc37a5a1d5b271.png&quot; alt=&quot;t_0&quot; title=&quot;t_0&quot; /&gt; is approximately &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_978_119351749e660c9a6ad4f78ee087ae08.png&quot; alt=&quot;S=1/{2t_0}&quot; title=&quot;S=1/{2t_0}&quot; /&gt;.  For example, if everybody on a team spends 10% of their time communicating with every other team member: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_983_53228ac33bf0a8e89d936c5688d95fe7.png&quot; alt=&quot;S={1+0.1}/{2*0.1}approx 5&quot; title=&quot;S={1+0.1}/{2*0.1}approx 5&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;In this team of five, 50% of each persons time will be spent communicating.&lt;/p&gt;
&lt;p&gt;If &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994_9e79376eca8627e5db439d0719bf41af.png&quot; alt=&quot;alpha=0.8&quot; title=&quot;alpha=0.8&quot; /&gt;, then we have &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_956.5_00622bd826c8549884e0b418068b5d43.png&quot; alt=&quot;S=({1+0.1}/{(1+0.8)*0.1})^{1/0.8}approx 10&quot; title=&quot;S=({1+0.1}/{(1+0.8)*0.1})^{1/0.8}approx 10&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;What if the percentage of time a person spends communicating with other team members has an exponential distribution?  That is, they spend most of their time communicating with a few people and very little with the rest; the (normalised) communications overhead is: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_994_d1937a3b362d1ca10f809b7db13408e9.png&quot; alt=&quot;1-e^{-(S-1)t_1}&quot; title=&quot;1-e^{-(S-1)t_1}&quot; /&gt;, where &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_986.5_d007e05a0ddcdf6ce72b72790f24f6d7.png&quot; alt=&quot;t_1&quot; title=&quot;t_1&quot; /&gt; is a constant found by fitting data from the two-person team (before any more people are added to the team).&lt;/p&gt;
&lt;p&gt;The maximum team size is now given by: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_979_9587e89c6e7daa27599435e8b4d69812.png&quot; alt=&quot;S=1/{t_1}&quot; title=&quot;S=1/{t_1}&quot; /&gt;, and if &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_987_8b59394b0a72e46fb1747a9d35acffe8.png&quot; alt=&quot;t_1=0.1&quot; title=&quot;t_1=0.1&quot; /&gt;, then: &lt;img src=&quot;http://shape-of-code.coding-guidelines.com/wp-content/plugins/wpmathpub/phpmathpublisher/img/math_983_e65cac11851dc592d229a296d5189a9a.png&quot; alt=&quot;S=1/{0.1}=10&quot; title=&quot;S=1/{0.1}=10&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;In this team of ten, 63% of each persons time will be spent communicating (team size can be bigger, but each member will spend more time communicating compared to the linear overhead case).&lt;/p&gt;
&lt;p&gt;Having done this analysis, what is now needed is some data on the distribution of individual communications overhead.  Is the distribution linear, square-root, exponential?  I am not aware of any such data (there is a chance I have encountered something close and not appreciated its importance).&lt;/p&gt;
&lt;p&gt;I have only every worked on relatively small teams, and am inclined towards the distribution of time spent communicating not being constant.  Was it exponential or a power-law?  I would not like to say.&lt;/p&gt;
&lt;p&gt;Could a communications time distribution be reverse engineered from email logs?  The cc&amp;#8217;ing of people who might have an interest in a topic complicates the data analysis; time spent in meetings are another complication.&lt;/p&gt;
&lt;p&gt;Pointers to data most welcome and as is any alternative analysis using data likely to have a higher signal/noise ratio.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-11T01:47:46+00:00</dc:date>
</item>
<item rdf:about="https://jonwillia.ms/2018/08/10/new-post">
	<title>Jon Williams (wizardishungry): new post</title>
	<link>http://feedproxy.google.com/~r/jonwillia-ms/~3/ggP68hUNC1c/new-post</link>
	<content:encoded>&lt;img src=&quot;http://feeds.feedburner.com/~r/jonwillia-ms/~4/ggP68hUNC1c&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</content:encoded>
	<dc:date>2018-08-10T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://jonwillia.ms/2018/08/10/dockertest">
	<title>Jon Williams (wizardishungry): dockertest timeouts</title>
	<link>http://feedproxy.google.com/~r/jonwillia-ms/~3/H3LKIqaX-j4/dockertest</link>
	<content:encoded>&lt;p&gt;Added Docker &lt;a href=&quot;https://github.com/ory/dockertest/pull/133&quot;&gt;container timeouts&lt;/a&gt; to &lt;a href=&quot;https://github.com/ory/dockertest&quot;&gt;dockertest&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/jonwillia-ms/~4/H3LKIqaX-j4&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</content:encoded>
	<dc:date>2018-08-10T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-08-07-22-18-41">
	<title>Unrelenting Technology (myfreeweb): Raptor has revealed pricing for their POWER9 &quot;cloud&quot; VPS. Almost AWS levels of complicated...</title>
	<link>https://unrelenting.technology/notes/2018-08-07-22-18-41</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;Raptor has revealed &lt;a href=&quot;https://secure.integricloud.com/content/base/managevms.html?viewrates=1&quot;&gt;pricing for their POWER9 &quot;cloud&quot; VPS&lt;/a&gt;. Almost AWS levels of complicated pricing. And it's expensive. Starting with 10$ per month for just 1 core and 256mb (!) RAM…&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-08-07T22:18:41+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="tag:sgoel.org,2018-08-07:/posts/switching-from-keepassxc-to-bitwarden/">
	<title>Siddhant Goel (siddhantgoel): Switching from KeePassXC to Bitwarden</title>
	<link>https://sgoel.org/posts/switching-from-keepassxc-to-bitwarden/</link>
	<content:encoded>&lt;p&gt;I have been looking to replace my password management setup for a few months
now. Up until now I was using &lt;a href=&quot;https://keepassxc.org/&quot;&gt;KeePassXC&lt;/a&gt;, but I never got around to putting in
the work to make it work properly on mobile.&lt;/p&gt;
&lt;p&gt;I understand that the standard solution is to just get the file synced on your
phone using Dropbox and then install a mobile app which can read the file off of
Dropbox. But the idea that all my passwords are in one single file somewhere on
the internet (cloud, if you will) is a bit disturbing.&lt;/p&gt;
&lt;p&gt;Incidentally, this is also the reason I never got around to using &lt;a href=&quot;https://1password.com/&quot;&gt;1password&lt;/a&gt;,
&lt;a href=&quot;https://www.lastpass.com/&quot;&gt;Lastpass&lt;/a&gt;, or other cloud-hosted password managers.&lt;/p&gt;
&lt;p&gt;This is not to discount the work that the security folks at these companies are
putting in on a daily basis to make their services secure. And I know that my
passwords file is encrypted. I've just seen enough mistakes happen and I'd like
to avoid being a part of one.&lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;My requirements were fairly simple. I wanted something that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;is open-source&lt;/li&gt;
&lt;li&gt;allows self-hosting&lt;/li&gt;
&lt;li&gt;works on mobile&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;... in that order.&lt;/p&gt;
&lt;p&gt;Turns out that just these 3 requirements narrowed down the search to
&lt;a href=&quot;https://bitwarden.com/&quot;&gt;Bitwarden&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bitwarden&lt;/h3&gt;
&lt;p&gt;Bitwarden is &lt;a href=&quot;https://github.com/bitwarden&quot;&gt;open source&lt;/a&gt;. There's a &lt;code&gt;core&lt;/code&gt; server written in C# and then there
are multiple client apps (iOS, Android, desktop).&lt;/p&gt;
&lt;p&gt;The backend appears quite heavy weight. Being written in C# and talking to a SQL
server installation, it's not exactly what I would call &quot;deployment friendly&quot;.
Luckily, they provide a &lt;a href=&quot;https://github.com/bitwarden/core#deploy&quot;&gt;Docker image&lt;/a&gt; which you can use to self-host the whole
thing.&lt;/p&gt;
&lt;p&gt;While this works on a modern machine, I wanted to run Bitwarden on a spare
Raspberry Pi connected to my home network where the system requirements are a
bit less than what the Docker image requires.&lt;/p&gt;
&lt;p&gt;It turns out that I'm not the first person to run into this problem. &lt;a href=&quot;https://jcs.org&quot;&gt;@jcs&lt;/a&gt;
already &lt;a href=&quot;https://jcs.org/2017/11/17/bitwarden&quot;&gt;wrote&lt;/a&gt; a &lt;a href=&quot;https://github.com/jcs/rubywarden&quot;&gt;Ruby server&lt;/a&gt; which is API-compatible with the &quot;official&quot;
Bitwarden backend. This implementation is &lt;strong&gt;very&lt;/strong&gt; lightweight, and completely
doable for the Pi. So all I had to do was create a new &lt;code&gt;bitwarden&lt;/code&gt; user on the
Pi, install &lt;code&gt;rvm&lt;/code&gt;, &lt;code&gt;git clone&lt;/code&gt; the repository, and then start the server
process.&lt;/p&gt;
&lt;p&gt;The only problem left now was setting up a static IP for the Pi so that the
desktop client on my laptop and the iOS app on my phone know the
(static &amp;amp; private) IP address they should be connecting to. Luckily my modem
supported allocating the same IP to devices based on their MAC addresses so this
was also easy.&lt;/p&gt;
&lt;h3&gt;Migrating from KeePassXC&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jcs/rubywarden&quot;&gt;rubywarden&lt;/a&gt; includes a script to import existing KeePassXC database files, and
it worked without any problems. The script somehow didn't handle my KeePassXC
folders very well. So an entry called &quot;Google&quot; in the &quot;Internet&quot; folder was
imported as &quot;Internet/Google&quot;. Those slashes look pretty annoying, so I took
some time out to delete some unused passwords and organize the rest into
folders.&lt;/p&gt;
&lt;p&gt;Migration was a non-issue, I would say.&lt;/p&gt;
&lt;h3&gt;Caveats&lt;/h3&gt;
&lt;p&gt;The only caveat with this system that I can think of right now is that when
you're not at home, you won't be able to save/edit/delete passwords. You'll be
able to read just fine, but editing won't work.&lt;/p&gt;
&lt;p&gt;The reason is that your client apps are configured to talk to a private IP
address (of the Pi in this case). But so far I haven't had the need to
save/edit/delete passwords when I'm outside. And reading them works just fine.&lt;/p&gt;
&lt;p&gt;If this is important for you, then this is probably the price you pay for
keeping the passwords on a machine you can physically look at.&lt;/p&gt;
&lt;p&gt;But overall, I find this setup quite nice to work with.&lt;/p&gt;</content:encoded>
	<dc:date>2018-08-06T22:00:00+00:00</dc:date>
</item>
<item rdf:about="https://leotindall.com/post/pdf-embedding-attacks/">
	<title>Leo Tindall (LeoLambda): PDF Embedding Attacks</title>
	<link>https://leotindall.com/post/pdf-embedding-attacks/</link>
	<content:encoded>PDF, or Portable Document Format, is an incredibly complex file format, governed by many standards and semi-standards. Like HTML and CSS, it was primarily designed for document layout and presentation. Also like HTML and CSS, it has been augmented with a JavaScript engine and document API that allows programmers to turn PDF documents into applications - or vehicles for malware.
Embedding Files in PDF Documents It&amp;rsquo;s very easy to embed any kind of file in a PDF document.</content:encoded>
	<dc:date>2018-08-04T17:17:11+00:00</dc:date>
</item>
<item rdf:about="https://blog.wallaroolabs.com/2018/08/dynamic-keys/">
	<title>Wallaroo Labs (chuckblake): Dynamic Keys</title>
	<link>https://blog.wallaroolabs.com/2018/08/dynamic-keys/</link>
	<content:encoded>Wallaroo is designed to help you build stateful event processing services that scale easily and elastically. State is partitioned across workers in the system and migrates when workers join or leave the cluster. Wallaroo routes messages to the correct worker by extracting a key from the message&amp;rsquo;s content. Our initial implementation of Wallaroo was designed so that all of the keys that would be used by the system were known when defining the application.</content:encoded>
	<dc:date>2018-08-02T11:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sevag.xyz/post/sudo/">
	<title>Sevag Hanssian (sevagh): Sudoers in namespace</title>
	<link>http://sevag.xyz/post/sudo/</link>
	<content:encoded>Motivation If your sudoers file has lots of aliases, wildcards, etc., the visudo command can validate them (or format them with JSON if your copy of visudo has the -x flag). However, it won&amp;rsquo;t resolve the indirection. Here&amp;rsquo;s what I mean:
$ cat test-sudoers-file Runas_Alias DANGEROUS = root User_Alias INNOCENT = sevagh INNOCENT remotehost = (DANGEROUS) /bin/sh $ visudo -cf ./test-sudoers-file ./test-sudoers-file: parsed OK  visudo will not tell you that sevagh can run sh as root.</content:encoded>
	<dc:date>2018-08-02T00:00:00+00:00</dc:date>
</item>
<item rdf:about="tag:gerikson.com,2018:/photo/2018-06">
	<title>Gustaf Erikson (gerikson): June</title>
	<link>http://gerikson.com/blog/photo/2018-06.html</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/gerikson/27851134097/in/dateposted/&quot; title=&quot;Rosebud bokeh wash&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1750/27851134097_afd1b393a1_z.jpg&quot; width=&quot;640&quot; height=&quot;426&quot; alt=&quot;Rosebud bokeh wash&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/gerikson/42739966181/in/dateposted/&quot; title=&quot;Meet the parents - Jan &amp; Karin, Stensun Jun 2018&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1737/42739966181_2e1b4985ac_z.jpg&quot; width=&quot;640&quot; height=&quot;512&quot; alt=&quot;Meet the parents - Jan &amp; Karin, Stensun Jun 2018&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gerikson.com/blog/photo/2017-06.html&quot;&gt;Jun 2017&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2016-06.html&quot;&gt;Jun 2016&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2015-06.html&quot;&gt;Jun 2015&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2014-06.html&quot;&gt;Jun 2014&lt;/a&gt; |
Jun 2013 |
&lt;a href=&quot;http://gerikson.com/blog/photo/2012-06.html&quot;&gt;Jun 2012&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2011-06.html&quot;&gt;Jun 2011&lt;/a&gt; |
Jun 2010 |
&lt;a href=&quot;http://gerikson.com/blog/photo/Summer-night.html&quot;&gt;Jun 2009&lt;/a&gt; &lt;/p&gt;</content:encoded>
	<dc:date>2018-07-31T16:21:00+00:00</dc:date>
	<dc:creator>Gustaf Erikson</dc:creator>
</item>
<item rdf:about="tag:gerikson.com,2018:/photo/2018-07">
	<title>Gustaf Erikson (gerikson): July</title>
	<link>http://gerikson.com/blog/photo/2018-07.html</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/gerikson/43549706802/in/dateposted/&quot; title=&quot;8:40PM local&quot;&gt;&lt;img src=&quot;https://farm1.staticflickr.com/941/43549706802_ae240d318a_z.jpg&quot; width=&quot;640&quot; height=&quot;236&quot; alt=&quot;8:40PM local&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gerikson.com/blog/photo/2017-07.html&quot;&gt;Jul 2017&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2016-07.html&quot;&gt;Jul 2016&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2015-07.html&quot;&gt;Jul 2015&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2014-07.html&quot;&gt;Jul 2014&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2013-07.html&quot;&gt;Jul 2013&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/2012-07.html&quot;&gt;Jul 2012&lt;/a&gt; |
&lt;a href=&quot;http://gerikson.com/blog/photo/Sonnar-contre-jour.html&quot;&gt;Jul 2011&lt;/a&gt; |
Jul 2010 | 
&lt;a href=&quot;http://gerikson.com/blog/alt/Vacation2009pt1.html&quot;&gt;Jul 2009&lt;/a&gt; &lt;/p&gt;</content:encoded>
	<dc:date>2018-07-30T20:29:00+00:00</dc:date>
	<dc:creator>Gustaf Erikson</dc:creator>
</item>
<item rdf:about="tag:gerikson.com,2018:/books/read/Go-Like-Hell">
	<title>Gustaf Erikson (gerikson): Go Like Hell: Ford, Ferrari, and Their Battle for Speed and Glory at Le Mans by A.J. Baime</title>
	<link>http://gerikson.com/blog/books/read/Go-Like-Hell.html</link>
	<content:encoded>&lt;p&gt;An entertaining account of the 1960s rivalry between Ford and Ferrari
at Le Mans.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-30T20:26:00+00:00</dc:date>
	<dc:creator>Gustaf Erikson</dc:creator>
</item>
<item rdf:about="https://www.cambus.net/the-future-of-via-x86-processors/">
	<title>Frederic Cambus (fcambus): The future of VIA x86 processors</title>
	<link>https://www.cambus.net/the-future-of-via-x86-processors/</link>
	<content:encoded>&lt;p&gt;I've been interested in &lt;strong&gt;VIA&lt;/strong&gt; motherboards and CPUs ever since they came
up with the &lt;strong&gt;Mini-ITX&lt;/strong&gt; standard in the very early 2000s. Their approach
of bringing fanless and power efficient designs to the x86 market was
ground breaking at the time.&lt;/p&gt;

&lt;p&gt;VIA processors are designed by &lt;strong&gt;Centaur Technology&lt;/strong&gt;, and there is an
excellent documentary entitled &quot;&lt;a href=&quot;https://vimeo.com/ondemand/riseofthecentaur&quot;&gt;Rise of the Centaur&lt;/a&gt;&quot; retracing their
history, which I really enjoyed watching.&lt;/p&gt;

&lt;p&gt;It's unfortunately very difficult to find information about recent VIA x86
CPUs. The VIA QuadCore, their latest one, was &lt;a href=&quot;https://www.viatech.com/en/2011/05/via-announces-new-via-quadcore-processor/&quot;&gt;announced&lt;/a&gt; in May 2011,
and it remains an open question whether there will be newer ones or not,
as the company seems to be focusing on the ARM architecture.&lt;/p&gt;

&lt;p&gt;In fact the status of VIA's x86 licensing agreement is quite unclear. There
was an &lt;a href=&quot;https://www.ftc.gov/news-events/press-releases/2010/08/ftc-settles-charges-anticompetitive-conduct-against-intel&quot;&gt;FTC ruling against Intel&lt;/a&gt; in 2010 specifying that a five years
extension should be offered to VIA once the ongoing agreement would expire
in 2013, and that the agreement should be modified to allow VIA (among other
companies) to consider mergers or joint ventures. The later being the way
VIA apparently took, which gave birth to &lt;a href=&quot;http://en.zhaoxin.com/&quot;&gt;Zhaoxin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some information in English about &lt;strong&gt;Zhaoxin x86 CPUs&lt;/strong&gt; is available on
&lt;a href=&quot;https://en.wikichip.org/wiki/zhaoxin&quot;&gt;WikiChip&lt;/a&gt;. However, those CPUs seems to only be available within China.
For now?&lt;/p&gt;

&lt;p&gt;Given the current state of affairs on the x86 market (Intel ME, AMD Secure
Technology, Meltdown, Spectre) and upcoming vulnerabilities annoucements
lurking on the horizon, there is definitely a spot for alternative x86
processors.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-30T18:08:00+00:00</dc:date>
</item>
<item rdf:about="https://blog.ovalerio.net/?p=1557">
	<title>Gonçalo Valério (dethos): Experiment: ChainSentinel.co</title>
	<link>https://blog.ovalerio.net/archives/1557</link>
	<content:encoded>&lt;p&gt;The amount and maturity of the tools available to help developers in process of building new applications and products is often crucial to the success of any given technology, platform or ecosystem.&lt;/p&gt;
&lt;p&gt;Nowadays in this blockchain trend we are witnessing, the front runner and most mature contender is Ethereum, for sure. The quality and quantity of the tools and content (documentation, tutorials, etc) available to developers in order to build on top of it, is miles away from the competition.&lt;/p&gt;
&lt;p&gt;Recently I&amp;#8217;ve been working and experimenting with NEO blockchain (&lt;a href=&quot;https://blog.ovalerio.net/archives/tag/neo&quot;&gt;as you can see on some of my previous posts&lt;/a&gt;), a team that I took part even won an&lt;a href=&quot;https://neo.org/blog/details/3074&quot;&gt; award of merit in their most recent dApp competition&lt;/a&gt; (&lt;a href=&quot;https://github.com/blocksmithtech/neo-vitae&quot;&gt;Github repository&lt;/a&gt;). During that period we felt the pain of the lack of maturity and documentation that affected this new &amp;#8220;ecosystem&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Things got better, but there are a few things still missing, such as tools that help you integrate your applications and services with the blockchain, tools to make the developer&amp;#8217;s life easier and tools to make their dApps more useful, such as the equivalent to Ethereum&amp;#8217;s &lt;code&gt;web3.js&lt;/code&gt; and &lt;code&gt;Metamask&lt;/code&gt;extension for example.&lt;/p&gt;
&lt;p&gt;Even though you can achieve a lot with NEO&amp;#8217;s JSON RPC API and through running your own node, I still think things should be easier. So at the last Whitesmith hackathon we&amp;#8217;ve tried to address a subset of these pains.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve put together, on that limited timeframe, a simple and rough service that delivers blockchain events as traditional Webhooks (websockets are planned) to make it easier for everybody to interact in real-time with any smart-contract.&lt;/p&gt;
&lt;p&gt;We are looking for feedback to understand if it is something more developers also need and in that case work towards improving the service. Feel free to take a look at:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chainsentinel.co&quot;&gt;https://chainsentinel.co&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-30T17:08:25+00:00</dc:date>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir/">
	<title>Pete Corey (petecorey): Voice Leading with Elixir</title>
	<link>http://www.petecorey.com/blog/2018/07/30/voice-leading-with-elixir/</link>
	<content:encoded>&lt;p&gt;I play quite a bit of guitar in my free time. Once of the things I’ve been practicing lately is improving my voice leading between chords.&lt;/p&gt;

&lt;p&gt;Voice leading refers to how the individual notes, or voices, within a chord move when you transition to another chord. You often want as little movement as possible to keep the transition from sounding jarring (unless you’re going for jarring).&lt;/p&gt;

&lt;p&gt;So for example, if I play a G7 way up the neck, I probably wouldn’t want to follow it with a Cmaj7 played towards the nut. Instead, I’d like to find another voicing of Cmaj7 that’s both physically and musically closer to our G7 chord.&lt;/p&gt;

&lt;p&gt;Knowing how to voice lead between chords usually requires a vast knowledge of the fretboard, a huge chord vocabulary, and lots of practice. But who needs all then when you have a computer and &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;the Elixir programming language&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Let’s use Elixir to chug through all of the possible Cmaj7 chords and find those with the best voice leading from our G7!&lt;/p&gt;

&lt;h2 id=&quot;rendering-chords&quot;&gt;Rendering Chords&lt;/h2&gt;

&lt;p&gt;Before we start talking about recruiting our computer to help us find the best voice leading between chords, we should take a detour and talk about guitar chords and how we’ll work with them.&lt;/p&gt;

&lt;p&gt;When you break it down to the basic, a “guitar” is just six strings attached to a piece of wood. A “chord” is just a set of notes played simultaneously across any number of those strings. Different notes can be played on each string by pressing on any “fret” along the neck.&lt;/p&gt;



&lt;p&gt;Given those definitions, the simplest ways to represent a chord using Elixir data structures probably be as a six element list (or tuple).&lt;/p&gt;

&lt;p&gt;Here’s our G7 chord represented as an array:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[nil, 10, 12, 10, 12, nil]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the thickest string to the thinnest, we’re not playing anything on the first string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;). We’re playing a G on the next string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;/code&gt;), a D on the next string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;/code&gt;), an F on the next string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;/code&gt;), a B on the next string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;/code&gt;), and nothing on the thinnest string (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To make our lives easier, we should come up with some way of displaying these chords in a more guitarist-friendly manner. One common option for displaying guitar chords is with &lt;a href=&quot;http://www.tedgreene.com/images/lessons/students/PaulVachon/HowToReadTedGreeneChordDiagrams.pdf&quot;&gt;chord charts&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;To kick things off, let’s write a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Renderer&lt;/span&gt;&lt;/code&gt; module with a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function that takes a chord and returns a unicode-based chart for the provided chord:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defmodule Chord.Renderer do
  def to_string(chord, chord_name) do
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing we’ll need to do is find out the “reach” of our chord. What’s the lowest fret used in the chord and the highest?&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
{min, max} =
  chord
  |&amp;gt; Enum.reject(&amp;amp;(&amp;amp;1 == nil))
  |&amp;gt; Enum.min_max()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use Elixir’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; to filter out unplayed strings and then use &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; to easily find both the lowest and highest fret used in the chord.&lt;/p&gt;

&lt;p&gt;Next we’ll iterate over every set of frets within the range of the chord and render each row using a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;row_to_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;/code&gt; helper function:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
0..max(max - min, 3)
|&amp;gt; Enum.map(&amp;amp;row_to_string(&amp;amp;1, min, chord, chord_name))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most fret charts render some minimum number of rows, even if the chord only takes up one fret of vertical space. We’ll iterate between &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt; and either &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;/code&gt;, or &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt;, depending on which value is larger. This means we’ll always render at least four rows of frets for each diagram.&lt;/p&gt;

&lt;p&gt;We’ll also want to intersperse the horizontal fret lines below each row of fingered notes on each row of frets:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.intersperse([:bright, :black, &quot;\n   ├┼┼┼┼┤\n&quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re using &lt;a href=&quot;https://hexdocs.pm/elixir/IO.ANSI.html&quot;&gt;Elixir’s ANSI color codes&lt;/a&gt; to color our fretboard lines a dark grey color, and building our final string as &lt;a href=&quot;https://www.bignerdranch.com/blog/elixir-and-io-lists-part-1-building-output-efficiently/&quot;&gt;an IO list&lt;/a&gt;, rather than a single concatenated string.&lt;/p&gt;

&lt;p&gt;Because we’re using ANSI color codes, we need to format and convert our resulting nested list structure into a string before returning it from our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; IO.ANSI.format()
|&amp;gt; IO.chardata_to_string()
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;row_to_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt; helper function is fairly straight forward. It simply renders a left gutter, the row of frets with any potential fingerings, and a right gutter:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp row_to_string(offset, base, chord, chord_name),
  do: [
    left_gutter(offset, base + offset),
    Enum.map(chord, &amp;amp;fret_to_string(&amp;amp;1, base + offset)),
    right_gutter(offset, chord_name)
  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;left_gutter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; helper function renders the lowest fret used in the chord on the first line of the chart:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp left_gutter(0, fret),
    do: [:bright, :yellow, String.pad_leading(&quot;#{fret}&quot;, 2, &quot; &quot;) &amp;lt;&amp;gt; &quot; &quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, we render a spacer:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp left_gutter(_, _),
  do: &quot;   &quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;right_gutter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; helper function either renders an optional &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;chord_name&lt;/span&gt;&lt;/code&gt; on the first line of the chord chart:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp right_gutter(0, chord_name),
  do: [:yellow, &quot; #{chord_name}&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or an empty string:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp right_gutter(_, _),
  do: &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s all there is to it!&lt;/p&gt;

&lt;p&gt;Now we can render chords by passing them into &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Chord.Renderer.to_string([nil, 10, 12, 10, 12, nil], &quot;G7&quot;)
|&amp;gt; IO.puts
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;language-*&quot;&gt;&lt;code class=&quot;language-*&quot;&gt;10 │●│●││ G7
   ├┼┼┼┼┤
   ││││││
   ├┼┼┼┼┤
   ││●│●│
   ├┼┼┼┼┤
   ││││││
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in its fully colored glory:&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/voice-leading-with-elixir/G7.png&quot; /&gt;
  &lt;p&gt;Our G7 chord, as rendered by our new module.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;chord-distance&quot;&gt;Chord Distance&lt;/h2&gt;

&lt;p&gt;We can roughly approximate how “good” the voice leading is between two chords by counting the number of frets each finger has to move when changing chords. We can call this the “distance” between the two chords. In the simplest terms, chords with good voice leading have minimal distance between each other.&lt;/p&gt;

&lt;p&gt;If we can write a function that computes this distance between chords, we might be able to generate all possible Cmaj7 voicings, and find the voicing that leads best from our G7!&lt;/p&gt;

&lt;p&gt;Let’s say that each fret moved on a single string equals one unit of “distance”, and adding or removing a note to or from a string also counts as a single unit of distance.&lt;/p&gt;

&lt;p&gt;Using that heuristic, let’s write a new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;/code&gt; module and a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function that calculates the distance between two chords.&lt;/p&gt;

&lt;p&gt;If both chords are equal, there is zero distance between them:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance(chord, chord),
  do: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, the distance between two chords is the sum of the distance between their individual fretted notes on each string:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance([fret_a | rest_a], [fret_b | rest_b]),
  do: distance(fret_a, fret_b) + distance(rest_a, rest_b)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a the first chord doesn’t have a note fretted on a string, and the next chord does, we’ll add one unit of distance:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance(nil, fret),
  do: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And visa versa:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance(fret, nil),
  do: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, if both strings have fretted notes, the distance moved on that string is the number of frets between the two chords on that string:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def distance(fret_a, fret_b),
  do: abs(fret_a - fret_b)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can manually calculate the distance between our G7 chord (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;), and a few different Cmaj7 voicings we may know:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Chord.distance([nil, 10, 12, 10, 12, nil], [nil, 3, 5, 4, 5, nil])   # 27
Chord.distance([nil, 10, 12, 10, 12, nil], [8, 10, 9, 9, nil, nil])  # 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So according to our heuristic, the second voicing of Cmaj7 has much better voice leading between our G7 than the first voicing of Cmaj7.&lt;/p&gt;

&lt;p&gt;This is great, but we’re still limited by our knowledge of the fretboard. What if we only know two voicings of a Cmaj7 chord. Is this the best we can do?&lt;/p&gt;

&lt;p&gt;Absolutely not!&lt;/p&gt;

&lt;h2 id=&quot;brute-forced-voicings&quot;&gt;Brute Forced Voicings&lt;/h2&gt;

&lt;p&gt;The last piece of this puzzle is to write a function that will generate all possible voicings of a given chord across the neck of the guitar. If we have all of the possible voicings of our Cmaj7, for example, we can easily find the voicing that has the best voice leading from our G7 chord!&lt;/p&gt;

&lt;p&gt;Let’s start by creating a new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;voicings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function in our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;/code&gt; module:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def voicings(notes) do
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;voicings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function accepts an array of numbers representing the notes we want in our chord. For example, if we wanted all of the voicings of our Cmaj7 chord, we’d call &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;vocings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; with a C (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt;), an E (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;/code&gt;), a G (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;/code&gt;), and a B (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;/code&gt;). These numbers correspond to the lowest set of &lt;a href=&quot;http://www.inspiredacoustics.com/en/MIDI_note_numbers_and_center_frequencies&quot;&gt;MIDI notes&lt;/a&gt;, ranging from &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt; to &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first thing we want to do is calculate all of the possible “note sets” that will be spread across our guitar strings:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
notes
|&amp;gt; all_note_sets()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a chord has fewer notes than the number of strings we want to play, some number of those notes will have to be repeated. To illustrate, imagine we want to play our four note Cmaj7 using all six strings of the guitar. We’ll obviously have four strings playing C, E, G, and B, but what will the other two strings play?&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;all_note_sets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper functions calculates this list of all possible note sets using some hand-waving combinatorics, and a few unfortunate list comprehensions:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def all_note_sets(notes) do
  for length &amp;lt;- 6..length(notes) do
    for base &amp;lt;- Combination.combine(notes, min(length, length(notes))) do
      for extension &amp;lt;- Combination.combine(notes, length - length(notes)) do
        base ++ extension
      end
    end
  end
  |&amp;gt; Enum.reduce(&amp;amp;Kernel.++/2)
  |&amp;gt; Enum.reduce(&amp;amp;Kernel.++/2)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;voicings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function needs to take each of these possible note sets and build all possible chords using that set of notes:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.map(&amp;amp;build_chords/1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;build_chords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper works by recursively building up all possible chords made of all possible notes in the provided note sets.&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def build_chords(note_set, chord \\ [nil, nil, nil, nil, nil, nil], chords \\ [])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It starts by looking at the first note in the provided note set and finds all occurrences of that note across all of the strings of our guitar using the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;all_notes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
note
|&amp;gt; all_notes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, it filters out notes on strings already used in the current chord under construction:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.filter(fn {string, fret} -&amp;gt; Enum.at(chord, string) == nil end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, it takes each note, inserts it into the current chord, and checks the “stretch” of the chord. If the chord spans more than five frets, we deem it impossible to play and filter it out (which is obviously an over-simplification, especially at higher frets). Otherwise, we recursively call &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;build_chords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;/code&gt;, passing in the newly updated current chord and the remaining set of notes in our note set:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.map(fn {string, fret} -&amp;gt;
  new_chord = List.replace_at(chord, string, fret)

  {min, max} =
    new_chord
    |&amp;gt; Enum.reject(&amp;amp;(&amp;amp;1 == nil))
    |&amp;gt; Enum.min_max(fn -&amp;gt; {0, 0} end)

  if max - min &amp;lt;= 5 do
    build_chords(rest, new_chord, chords)
  else
    chords
  end
end)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;all_notes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper function works by accepting the abstract value of the note we’re looking for (C is &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt;), the optional &lt;a href=&quot;http://www.inspiredacoustics.com/en/MIDI_note_numbers_and_center_frequencies&quot;&gt;MIDI notes&lt;/a&gt; of the tuning of each string, and the optional number of frets up the neck we want to look for notes:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def all_notes(target_note, strings \\ [40, 45, 50, 55, 59, 64], frets \\ 12) do
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It then constructs a two dimensional list of &lt;a href=&quot;http://www.inspiredacoustics.com/en/MIDI_note_numbers_and_center_frequencies&quot;&gt;MIDI notes&lt;/a&gt; up the neck and across the fretboard:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
fretboard =
  for fret &amp;lt;- 0..frets,
    do: Enum.map(strings, &amp;amp;(&amp;amp;1 + fret))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we’ve built up our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;fretboard&lt;/span&gt;&lt;/code&gt;, we’ll filter out all of the notes that aren’t the specific note we’re looking for. We loop over every row of frets, and every string:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
fretboard
|&amp;gt; Enum.with_index()
|&amp;gt; Enum.map(fn {row, index} -&amp;gt;
  row
  |&amp;gt; Enum.with_index()
  |&amp;gt; Enum.map(fn {note, string} -&amp;gt;
    ...
  end)
end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;/code&gt; we encounter, we check if &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt; equals our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;target_note&lt;/span&gt;&lt;/code&gt;. If it does, we replace the current note value with a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;/code&gt;/&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;/code&gt; tuple that can be used when building our guitar chord:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
if rem(note, 12) == target_note do
  {string, index}
else
  nil
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, we replace the current note with &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;post-footer&quot;&gt;
    &lt;div class=&quot;signup-form&quot;&gt;
        &lt;form action=&quot;http://east5th.us11.list-manage.com/subscribe/post?u=f8833fd40e2b1b28545d9f382&amp;id=c56ceba687&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; target=&quot;_blank&quot;&gt;
            &lt;p&gt;Sign up for &lt;a href=&quot;http://www.petecorey.com/newsletter&quot;&gt;Pete's mailing list&lt;/a&gt; and have fresh content delivered to you, hot off the presses every week!&lt;/p&gt;
            &lt;div class=&quot;email-wrapper&quot;&gt;
                &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;FNAME&quot; class=&quot;&quot; id=&quot;mce-FNAME&quot; /&gt;&lt;!--
                                                                                                           --&gt;&lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; id=&quot;mce-EMAIL&quot; /&gt;&lt;!--
                                                                                                                                                                                                    --&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; /&gt;
            &lt;/div&gt;
            &lt;div&gt;&lt;input type=&quot;text&quot; name=&quot;b_f8833fd40e2b1b28545d9f382_c56ceba687&quot; tabindex=&quot;-1&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Next, we flatten our multidimensional fretboard representation and filter out all of the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;/code&gt; values, leaving us with just the set of notes we’re looking for, and where they can be found on the fretboard.&lt;/p&gt;

&lt;p&gt;Perfect.&lt;/p&gt;

&lt;p&gt;Let’s try it out by listing the first three voicings of a Cmaj7 chord our new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;voicings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper finds:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Chord.voicings([0, 4, 7, 11])
|&amp;gt; Enum.take(3)
|&amp;gt; Enum.map(&amp;amp;Chord.Renderer.to_string/1)
|&amp;gt; Enum.map(&amp;amp;IO.puts/1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
 0 ││││●│   0 ││││●│   1 ││││●│ 
   ├┼┼┼┼┤     ├┼┼┼┼┤     ├┼┼┼┼┤
   ││││││     ││││││     │●●│││
   ├┼┼┼┼┤     ├┼┼┼┼┤     ├┼┼┼┼┤
   ││●│││     ││●│││     ●││││●
   ├┼┼┼┼┤     ├┼┼┼┼┤     ├┼┼┼┼┤
   ●●│││●     ●●│││●     │││●││
   ├┼┼┼┼┤     ├┼┼┼┼┤
   │││●││     │││●││
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool!&lt;/p&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all Together&lt;/h2&gt;

&lt;p&gt;Now that our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;voicings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper is finished, we can put all of the pieces together.&lt;/p&gt;

&lt;p&gt;Let’s start by calculating all of the possible voicings of our Cmaj7 chord:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[0, 4, 7, 11]
|&amp;gt; Chord.voicings()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, let’s map over each voicing and build a tuple who’s first element is the distance from our G7 chord, and who’s second element is the generated voicing itself:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.map(&amp;amp;{Chord.distance(&amp;amp;1, [nil, 10, 12, 10, 12, nil]), &amp;amp;1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s sort that list. Because the distance from our G7 chord is the first element in each tuple, we’re effectively sorting by distance:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.sort()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the “best” options for Cmaj7 voicings should be at the top of our list. Let’s take the first three:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.take(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll map each voicing through our chord chart renderer:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.map(fn {distance, chord} -&amp;gt; Chord.to_string(chord, &quot;Cmaj7&quot;) end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, let’s join each of our three charts together with newlines and print the result:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
|&amp;gt; Enum.join(&quot;\n\n&quot;)
|&amp;gt; IO.puts()
&lt;/code&gt;&lt;/pre&gt;



&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/voice-leading-with-elixir/Cmaj7+Voicings.png&quot; /&gt;
  &lt;p&gt;Our generated Cmaj7 voicings.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Each of the voicings recommended by our software sound fairly nice. Much nicer than the first voicing we were using way down the neck. The third voicing definitely has an interesting flavor, and is something I never would have reached for without the help of this software, but I’m glad to know it’s there.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts-and-future-work&quot;&gt;Final Thoughts and Future Work&lt;/h2&gt;

&lt;p&gt;I have many, many final thoughts about this project. If you can’t tell, I’m incredibly excited about this kind of thing.&lt;/p&gt;

&lt;p&gt;I’m currently working on improving the “distance” heuristic, which raises many interesting questions about what exactly voice leading is, and who it’s for. Should I optimize for the player, or the listener? Thanks to how the guitar works, chords on wildly different sections of the neck may be very close musically, but my algorithm will filter these chords out as being “too far.” In many ways, I’m conflating “voice leading” between chords with “playability” between chords. Is this what I want?&lt;/p&gt;

&lt;p&gt;I’m also working on optimizing the voice leading over entire chord progressions.  As you might guess, this is a much more expansive problem.&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/voice-leading-with-elixir/progression.png&quot; /&gt;
  &lt;p&gt;A generated chord progression.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Lastly, if you’re interested in this kind of thing, I highly recommend you check out Ted Greene’s guitar work. Ted is, in my opinion, one of the true masters of the guitar, and put some serious work into perfecting his voice leading skills.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://www.tedgreene.com/&quot;&gt;Ted Greene archive&lt;/a&gt;, the archive’s &lt;a href=&quot;http://www.youtube.com/user/TedGreeneArchives&quot;&gt;Youtube page&lt;/a&gt;, and &lt;strong&gt;definitely check out two of Ted’s books: &lt;a href=&quot;https://amzn.to/2uV6w1g&quot;&gt;Chord Chemistry&lt;/a&gt;, and &lt;a href=&quot;https://www.amazon.com/Modern-Chord-Progressions-Classical-Voicings/dp/0898986982/ref=tmm_pap_swatch_0?_encoding=UTF8&amp;qid=1532731370&amp;sr=1-1&quot;&gt;Modern Chord Progressions&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I’ve uploaded this entire project &lt;a href=&quot;https://github.com/pcorey/chord&quot;&gt;to Github&lt;/a&gt;, if you’re curious the see the source in its entirety. Check it out!&lt;/p&gt;

&lt;p&gt;Obviously, this kind of thing is just a tool, and the chord transitions and progressions generated by the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Chord&lt;/span&gt;&lt;/code&gt; module are just suggestions and starting places, not fully-fleshed out music. That being said, these tools have already given me many new ideas and shown me many interesting chords I never would have reached for without having them shown to me.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-30T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://beza1e1.tuxen.de/cost_of_agile.html">
	<title>Andreas Zwinkau (qznc): The Cost of Agile</title>
	<link>http://beza1e1.tuxen.de/cost_of_agile.html</link>
	<content:encoded>&lt;p&gt;Agile improves time to market at the cost of process efficiency&lt;/p&gt;
    &lt;p&gt;&lt;a href=&quot;http://beza1e1.tuxen.de/cost_of_agile.html&quot;&gt;Read full article!&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-29T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-28-22-34-16">
	<title>Unrelenting Technology (myfreeweb): yay, Firefox will use SHM_ANON on FreeBSD now</title>
	<link>https://unrelenting.technology/notes/2018-07-28-22-34-16</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;yay, &lt;a href=&quot;https://hg.mozilla.org/mozilla-central/rev/83bab8cf29bf&quot;&gt;Firefox will use &lt;code&gt;SHM_ANON&lt;/code&gt; on FreeBSD now&lt;/a&gt;&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-28T22:34:16+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="http://journal.dedasys.com/?p=1346">
	<title>David N. Welton (davidw): Fight or flight? YIMBYs and the exodus to smaller towns</title>
	<link></link>
	<content:encoded>Slate has an article about people departing larger cities for the &amp;#8220;greener pastures&amp;#8221; of small towns.  It&amp;#8217;s something that has had me thinking a lot lately. The damage that excessive housing regulation (restrictive zoning, parking minimums, etc&amp;#8230;) in our most productive places can be quantified in the billions of dollars.  Foregone jobs, more expensive university [&amp;#8230;]</content:encoded>
	<dc:date>2018-07-27T23:59:43+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/ea43d46cdbc6">
	<title>Alex Wilson (mrwilson): Teams from Scratch —Part 1: Psychological Safety</title>
	<link>https://medium.com/@probablyfine/teams-from-scratch-part-1-psychological-safety-ea43d46cdbc6?source=rss-e2a8548b9f4f------2</link>
	<content:encoded>&lt;p&gt;December 2017 — I had the privilege and opportunity of transitioning from Senior Developer at &lt;a href=&quot;https://medium.com/unruly-engineering&quot;&gt;Unruly&lt;/a&gt; to a Team Lead of a newly-created team.&lt;/p&gt;&lt;p&gt;The new team was created to tackle a recurring issue at Unruly — our teams relied on multiple shared services for observability, alerting, and configuration management.&lt;/p&gt;&lt;p&gt;These services, while functional and only rarely prone to error, did not receive the same level of attention as our core products and therefore were only maintained, not advanced. &lt;strong&gt;When everyone is responsible, no-one is.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Taking the name &lt;em&gt;SHIFT&lt;/em&gt; (a shortening of &lt;strong&gt;Sh&lt;/strong&gt;ared &lt;strong&gt;I&lt;/strong&gt;n&lt;strong&gt;f&lt;/strong&gt;rastructure &lt;strong&gt;T&lt;/strong&gt;eam), we had an opportunity to start a team from scratch, without needing to cookie-cutter process from the core product teams … although we could, if we wanted.&lt;/p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*qlCtU74fvVrJ6Yb7bgSlCg.jpeg&quot; /&gt;A snapshot from one of our team wipe-boards.&lt;p&gt;In this multi-part series, I’ll be recounting my experiences of the different facets of our team culture and process, deliberate &lt;strong&gt;and &lt;/strong&gt;emergent behaviors, and how it has shaped our team’s direction.&lt;/p&gt;&lt;p&gt;This part is about what we do to create an environment with &lt;strong&gt;Psychological Safety&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;I’ve been at Unruly for approaching six years, and with that comes six years of understanding from a &lt;strong&gt;lot&lt;/strong&gt; of mistakes—however, a lot of that knowledge is specialized, and the team as a whole come from front-end/back-end development backgrounds, not infrastructure.&lt;/p&gt;&lt;p&gt;Thus, it was important for us to build a culture where asking questions and admitting gaps in knowledge was okay.&lt;/p&gt;&lt;h4&gt;What is psychological safety?&lt;/h4&gt;&lt;p&gt;For us, &lt;a href=&quot;https://en.wikipedia.org/wiki/Psychological_safety&quot;&gt;psychological safety&lt;/a&gt; was that &lt;em&gt;every member of the team felt safe taking risks: asking “silly” questions, putting forward their views and arguments, making mistakes.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;A team of individuals that feel empowered to experiment, safe to make mistakes, and able to deal with conflict in a constructive and non-violent way will grow and learn incredibly quickly.&lt;/p&gt;&lt;p&gt;On a personal level, I wanted the team to feel happy working with each-other to tackle problems, and made it a top priority to embed this into our working practices and values.&lt;/p&gt;&lt;h4&gt;How did we build it into our team culture?&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Team Lead setting example&lt;/strong&gt; — I have been deliberately bringing my whole self to work, to encourage openness and set a positive example.&lt;br /&gt;I received a course of therapy earlier this year, to deal with some mental health issues, and I was very open about this with the team.&lt;br /&gt;This is not to say that everyone should be open about everything, but should feel safe speaking about themselves if they need to, in public or in private.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Regular feedback sessions&lt;/strong&gt; — We have sessions to give each-other both positive and constructive feedback. Some of the “rules” are that no team member &lt;em&gt;has&lt;/em&gt; to give or receive feedback, and that the feedback should be specific (not “You &lt;strong&gt;always&lt;/strong&gt; do X”) and &lt;a href=&quot;https://www.communicationandconflict.com/i-statements.html&quot;&gt;I-statements&lt;/a&gt; (not “&lt;strong&gt;You&lt;/strong&gt; always do X”).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Asking for clarification or more detail is fine&lt;/strong&gt;—There will be different methods by which team members learn best even in a small team like ours. Some of the team are very visual learners, and learn best from diagrams, and some prefer analogies and metaphor.&lt;br /&gt;We’ve tried to embed the idea that it’s okay for one member of the pair or mob to stop and ask for explanation in another form that helps them learn best.&lt;br /&gt;This empathy helps tailor our explanations in the moment, and encourages cognizance of each-other’s needs&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Blameless post-incident retrospectives &lt;/strong&gt;— The flip-side of being able to make mistakes safely is that when mistakes happen, we don’t point fingers and apportion blame.&lt;br /&gt;If something in our process enabled an outage to be manually triggered, that’s a problem with the process, not the person.&lt;br /&gt;We found &lt;a href=&quot;http://retrospectivewiki.org/index.php?title=The_Prime_Directive&quot;&gt;Norm Kerth’s Prime Directive&lt;/a&gt; a good starting point: “&lt;em&gt;Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.”&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Not everything works for everyone&lt;/strong&gt; — the tools above are fine and good, but they also make assumptions that everyone works the same way, or deals with questions/conflict equally. We encourage empathy and awareness of each-others’ needs where it’s &lt;em&gt;reasonable to expect &lt;/em&gt;(e.g. social cues may not be as obvious to some people as others).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are many more things we do, as part of our conscious everyday practice and process, but these are the first concrete first steps.&lt;/p&gt;&lt;p&gt;We found that these processes and cultural axioms created an environment that supported different kinds of positive emergent behavior that we &lt;em&gt;did not expect&lt;/em&gt;, and I’ll discuss in more detail in the next post, about our team’s sense of &lt;strong&gt;Belonging&lt;/strong&gt;.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ea43d46cdbc6&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2018-07-26T09:19:07+00:00</dc:date>
</item>
<item rdf:about="https://sulami.github.io/How this blog is madeHow this blog is made">
	<title>Robin Schroer (sulami): How this blog is made</title>
	<link>https://sulami.github.io/How this blog is madeHow this blog is made</link>
	<content:encoded>&lt;p&gt;While this blog has always been powered by a static-page generator, a while ago I switched from using &lt;a href=&quot;https://blog.getpelican.com/&quot;&gt;Pelican&lt;/a&gt;, a Python-based generator, to &lt;a href=&quot;https://jaspervdj.be/hakyll/&quot;&gt;Hakyll&lt;/a&gt;, a Haskell-based one. There was no real practical reason for this, and objectively the switch has been a huge waste of time, though I have learned a lot about Haskell and am very happy with how this blog currently works.&lt;/p&gt;
&lt;p&gt;The basic setup is quite simple, I am using &lt;a href=&quot;https://docs.haskellstack.org/en/stable/README/&quot;&gt;Stack&lt;/a&gt; to manage build dependencies and sandboxing for Haskell&lt;span&gt;&lt;label for=&quot;sn-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-1&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This is actually one of my basic requirements for new languages that I pick up. It is 2018, you can ship your language with a package manager that sandboxes by default. One of my biggest problems with Python is virtualenv.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;. For reasons that become clear later in this post, I also need a LaTeX installation, which currently is not managed in any way, but I do not require anything out of the ordinary, so usually it is just a matter of install ing the distribution for my operating system.&lt;/p&gt;
&lt;h2 id=&quot;hakyll-hacks&quot;&gt;Hakyll Hacks&lt;/h2&gt;
&lt;p&gt;To achieve a nice, human-readable URL scheme I am not only generating a slug from the original file name, which usually matches the title, but to get rid of the ugly &lt;code&gt;.html&lt;/code&gt; postfix I actually render all pages and posts to &lt;code&gt;index.html&lt;/code&gt; files in directories with the corresponding name, resulting in URLs with trailing slashes. Credit for this goes to &lt;a href=&quot;https://www.rohanjain.in/hakyll-clean-urls/&quot;&gt;Rohan Jain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course this blog also has an Atom feed&lt;span&gt;&lt;label for=&quot;sn-2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-2&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Atom vs. RSS has been &lt;a href=&quot;https://nullprogram.com/blog/2013/09/23/&quot;&gt;debated for a while&lt;/a&gt;, in the end my use case is super simple anyway, so I am just using Atom until I find an actually valid reason to get into comparing the two formats.&lt;br /&gt;
&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;, so you can follow my posts in your favourite newsreader, or use Firefox live bookmarks for example. I ran into one particular problem with this though, as one of my recent posts included an ampersand (&amp;amp;) in the title. The rendered feed file (no matter the format) would be invalid due to this. So I had to implement &lt;a href=&quot;https://en.wikipedia.org/wiki/Percent-encoding&quot;&gt;URL encoding&lt;/a&gt; for titles myself (this is already done for the body by Hakyll). Thanks to the way Hakyll embraces the Haskell philosphy, this was just a matter of mapping the encoding function over the post titles for the feed output.&lt;/p&gt;
&lt;h2 id=&quot;symetric-html-pdf-output&quot;&gt;Symetric HTML &amp;amp; PDF output&lt;/h2&gt;
&lt;p&gt;A long while ago I had the idea of making my CV available online in the browser, like many front end developers do to showcase their skills. At the same time I still need a PDF version that can be printed neatly. Being a developer, I of course cannot fathom the idea of having two sets of CVs, so I thought why not generate both versions from the same source (of truth), using one single build process. So that is what I am currently finalising.&lt;/p&gt;
&lt;p&gt;The HTML version for the website is just a static page in the blog, simple enough. Hakyll gives me very fine-grained control over the actual build process, so I can leverage custom Markdown tags to control layout if I need to. The PDF version of my CV has always been generated using &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt;, because it generates beautifully rendered output in a reproducible fashion. Because I am using &lt;a href=&quot;http://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt; to generate HTML from the Markdown source, I am also using it to generate the LaTeX source code from the same source, and then just pass it into a LaTeX template. Then I just run &lt;code&gt;xetex&lt;/code&gt; in a subprocess to render the final PDF.&lt;/p&gt;
&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;
&lt;p&gt;This blog is currently hosted in two locations, &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; which I have been using for many years, and &lt;a href=&quot;https://docs.gitlab.com/ee/user/project/pages/&quot;&gt;GitLab pages&lt;/a&gt;, which I only added recently. While the build and deployment process for these two platforms is slightly different, they mostly work off the same codebase, with the only difference being a &lt;a href=&quot;https://github.com/sulami/sulami.github.io/blob/develop/Makefile&quot;&gt;makefile for Github&lt;/a&gt; being replaced by the &lt;a href=&quot;https://gitlab.com/sulami/sulami.gitlab.io/blob/develop/.gitlab-ci.yml&quot;&gt;GitLab-specific build file&lt;/a&gt;. The Github version I generate locally with my locally compiled Hakyll, and then push the the right branch using the makefile. This makefile also allows me to run a local server to preview the rendered output before committing. The GitLab repository is setup to mirror the one on GitHub and rebuild via GitLab CI on every change, so it is compiling the Hakyll application in a Docker container and the generating the output.&lt;/p&gt;
&lt;p&gt;These two build processes have different pros and cons. The GitHub version is available slightly faster, as my local render only takes a couple of seconds and after pushing I just have to wait for Github’s cache to refresh, which usually takes only a couple of minutes, while the GitLab version has to run the CI job which takes a couple of minutes. On the upside the GitLab version does not require me to have a locally installed version of Haskell, Stack or anything else, as long as I can push to the repository, allowing me to explore workflows which happen end-to-end on iOS. I have been investigating this exact workflow, using a combination of &lt;a href=&quot;https://itunes.apple.com/us/app/ia-writer/id775737172&quot;&gt;iA Writer&lt;/a&gt;, &lt;a href=&quot;https://itunes.apple.com/us/app/workflow/id915249334&quot;&gt;Workflow&lt;/a&gt; and &lt;a href=&quot;https://itunes.apple.com/us/app/working-copy/id896694807&quot;&gt;Working Copy&lt;/a&gt; to write, transform and push the posts, leaving the build process to GitLab CI.&lt;/p&gt;
&lt;p&gt;If you are interested in details, have a look at the source on either &lt;a href=&quot;https://github.com/sulami/sulami.github.io&quot;&gt;Github&lt;/a&gt; or &lt;a href=&quot;https://gitlab.com/sulami/sulami.gitlab.io&quot;&gt;GitLab&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-26T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-25-20-00-29">
	<title>Unrelenting Technology (myfreeweb): An SPI flash chip module arrived in the mail today. I ordered that for...</title>
	<link>https://unrelenting.technology/notes/2018-07-25-20-00-29</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;An SPI flash chip module arrived in the mail today. I ordered that for replicating &lt;a href=&quot;https://linux-sunxi.org/File:Xunlong_Orange_Pi_PC_with_improvised_SPI_flash_shield.jpg&quot;&gt;this&lt;/a&gt; basically. To (network) boot the Orange Pi PC without microSD.&lt;/p&gt;
&lt;p&gt;Naturally, instead of booting Linux to flash or (?) trying flash from U-Boot itself, time was spent on &lt;a href=&quot;https://github.com/flashrom/flashrom/pull/53&quot;&gt;making flashrom work on FreeBSD&lt;/a&gt; :)&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-25T20:00:29+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="https://silky.github.io/posts/2018-07-25-ethics-of-AI.html">
	<title>Noon van der Silk (silky): The Ethics of AI - An Empathy-Based Approach?</title>
	<link>https://silky.github.io/posts/2018-07-25-ethics-of-AI.html</link>
	<content:encoded>&lt;div class=&quot;info&quot;&gt;
    Posted on July 25, 2018
    
        by Noon van der Silk
    
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;There’s lots of talk about the Ethics of AI at the moment. As with any research, there’s too much for any one person to read. Here’s a bunch of papers that I’ve collected haphazardly in the early part of this year:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.03846&quot;&gt;“Dave…I can assure you…that it’s going to be all right…” – A definition, case for, and survey of algorithmic assurances in human-autonomy trust relationships&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1709.06692&quot;&gt;A Voting-Based System for Ethical Decision Making&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1511.06578&quot;&gt;Actually, It’s About Ethics in Computational Social Science: A Multi-party Risk-Benefit Framework for Online Community Research&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.07373&quot;&gt;Attentive Explanations: Justifying Decisions and Pointing to the Evidence (Extended Abstract)&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1502.05838&quot;&gt;Automated Reasoning for Robot Ethics&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1702.00137&quot;&gt;Blue Sky Ideas in Artificial Intelligence Education from the EAAI 2017 New and Future AI Educator Program&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1710.06881&quot;&gt;Children and the Data Cycle: Rights and Ethics in a Big Data World&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1606.06565&quot;&gt;Concrete Problems in AI Safety&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.07076&quot;&gt;Does mitigating ML’s impact disparity require treatment disparity?&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1706.03021&quot;&gt;Ethical Artificial Intelligence - An Open Question&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1701.07769&quot;&gt;Ethical Considerations in Artificial Intelligence Courses&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1707.05259&quot;&gt;Ethics of autonomous information systems towards an artificial thinking&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1504.05603&quot;&gt;Formalizing Preference Utilitarianism in Physical World Models&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1703.06354&quot;&gt;Goal Conflict in Designing an Autonomous Artificial System&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1610.03229&quot;&gt;In The Wild Residual Data Research and Privacy&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1709.05929&quot;&gt;Institutionally Distributed Deep Learning Networks&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.05791&quot;&gt;Maintaining The Humanity of Our Models&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1607.08289&quot;&gt;Mammalian Value Systems&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1710.06882&quot;&gt;Mapping for accessibility: A case study of ethics in data science for social good&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.07111&quot;&gt;Modeling Epistemological Principles for Bias Mitigation in AI Systems: An Illustration in Hiring Decisions&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.06664&quot;&gt;Predict Responsibly: Increasing Fairness by Learning To Defer&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1609.03266&quot;&gt;Recovering the History of Informed Consent for Data Science and Internet Industry Research Ethics&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1706.02513&quot;&gt;Responsible Autonomy&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1701.02388&quot;&gt;Stoic Ethics for Artificial Agents&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1606.02583&quot;&gt;The Dark Side of Ethical Robots&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.00561&quot;&gt;This robot stinks! Differences between perceived mistreatment of robot and computer partners&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1703.04741&quot;&gt;Towards Moral Autonomous Systems&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://scirate.com/arxiv/1711.05905&quot;&gt;Using experimental game theory to transit human values to ethical AI&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;One thing I wanted to think about is, speaking as someone working in this field and interested in making changes in my day-to-day life, what kind of tools or ideas would be useful for me? What should I do?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Alongside this thought, another thought I had is that somehow the big lists of rules feel very impersonal and disconnected from my experiences. I also feel a little bit unsatisfied about opt-in rules. Here’s a few from the around the place, that I’ve seen:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://futureoflife.org/ai-principles/&quot;&gt;Future of Life&lt;/a&gt; (June 2018, relevant items)
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
5 - Race Avoidance: Teams developing AI systems should actively cooperate to avoid corner-cutting on safety standards.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
6 - Safety: AI systems should be safe and secure throughout their operational lifetime, and verifably so where applicable and feasible
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
7 - Failure Transparency: If an AI system causes harm, it should be possible to ascertain why.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
8 - Judical Transparency: Any involvement by an autonomous system in judicial decision-making should provide a satisfactory explanation auditable by a competent human authority.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
9 - Responsibility: Designers and building of advanced AI systems are stakeholders in the moral implications of their use, misuse, and actions, with a responsibility and opportunity to shape those implications.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
10 - Value Alignment: Highly autonomous AI systems should be designed so that their goals and behviours
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
11 - Human Values: AI Systems should be designed and operated so as to be compatible with ideals of human dignift, rights, freedoms, and cultural diversity.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
12 - Personal Privacy: People should have the right to access, manage and control the data they generate, given AI systems’ power to analyze and utilize that data.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
13 - Liberty and Privacy: The application of AI to personal data must not unreasonably curtail people’s real or perceived liberty.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
14 - Shared Benefit: AI technologies should benefit and empower as many people as possible.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
15 - Shared Prosperity: The economic prosperity created by AI should be shared broadly, to benefit all of humanity.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
16 - Human Control: Humans should choose how and whether to delegate decisions to AI systems, to accomplish human chose objectives.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
17 - Non-subversion: The power conferred by control of highly advanced AI systems should respect and improve, rather an subvert, the social and civic processes on which the health of society depends.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
18 - AI Arms Race: An arms race in lethal autonomous weapons should be avoided.
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://www.aiforhumanity.fr/en/&quot;&gt;AI For Humanity&lt;/a&gt; (June 2018)
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
01 - Develop an aggressive data policy
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
02 - Targeting four strategic sectors
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
03 - Boosting the potential of French research
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
04 - Planning for the impact of AI on labour
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
05 - Making AI more environmentally friendly
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
06 - Opening up the black boxes of AI
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
07 - Ensuring that AI supports inclusivity and diversity
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;http://humansforai.com/&quot;&gt;Humans for AI&lt;/a&gt; (June 2018)
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
Broaden the pipeline of minorities currently in tech careers, seeking to move to careers in AI by being the go to destination for all things AI because we believe that diversity of thought and opinion ultimately builds better products.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Open and inclusive community of people interested in AI by facilitating interactions with experts, practitioners and thought leaders in the field.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Leverage AI to release a set of free products built by this community to further our mission of bringing diversity to AI.
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Demystify AI by providing a basic understanding of the concepts, thinking and events in AI for novices and non-technical people interested in how AI will impact their lives and their jobs.
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://arxiv.org/pdf/1606.06565.pdf&quot;&gt;Concrete Problems in AI Safety&lt;/a&gt; (2016)
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
Avoid Negative Side Effects
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Avoid Reward Hacking
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Scalable Oversight
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Safe Exploration
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Robustness to Distributional Shift
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;I have a few problems with these rules:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
It’s easy to imagine situations in which they are counter-productive,
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
I don’t feel a lot of ownership of them, as I wasn’t involved in their construction,
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
No-one is enforcing them on me,
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
They’re often highly impractical or contain colloquial/regional/policital concerns (“Boost French Research …”),
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
They’re also very overwhelming and demanding, how can I ensure that we do &lt;em&gt;all&lt;/em&gt; of them?
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
Even if I &lt;em&gt;say&lt;/em&gt; I’m doing these things, how does any non-technical person know? How can I prove it?
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The positive aspects of them are:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
It’s sometimes easy to think about how to apply them to day-to-day work,
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
They help me think of things that I might not care about day-to-day (i.e. the environmental concerns?),
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
It might help to lobby governments/organisations to get funding to make progress on certain aspects?
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
It provides a framework that might be useful for discussing with colleagues/other people
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;So, what should any given engineer working in this area do? One thought I’ve had recently is a simple one: Let’s just aim at building empathy for the people that will be affected by our software.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is reasonably actionable, say, with local groups by organising meetings between technical people and the people that may be affected. I.e. in the medical-AI setting, let’s organise regular catch-ups between the engineers, the doctors, nursing staff, and hospital adminstration types, along with perhaps patient representatives.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In the setting, of, say, law software, again we just set up regular events for the two groups to chat through issues, work together on small projects, and build a mutual understanding of difficulties.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;I think this approach is a bit nicer than, say, creating a new set of rules that make sense for us locally, and then forcing people to follow them. One idea I like about the empathy-based/collaborative approach (or “human-centered design”; another term for this kind thing), is that it allos people to &lt;em&gt;adapt to local circumstances&lt;/em&gt;, which I think is really crucial in allowing any one person to feel like they have some control over the application of any rules they come up with, and thus getting them to actually take an interest in enforcing them in their organisation.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;So, my new rule of thumb for this ethics-related AI stuff will be: Can I meet with some of the people that will be affected? What are their thoughts? What problems are they working through and what are they interested in?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;As always, I’m interested in your thoughts on the matter!&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2018-07-25T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://asylum.madhouse-project.org/blog/2018/07/24/on-git-github-and-email/">
	<title>Gergely Nagy (algernon): GitHub vs mailing lists, from another perspective</title>
	<link>https://asylum.madhouse-project.org/blog/2018/07/24/on-git-github-and-email/</link>
	<content:encoded>&lt;p&gt;The other day, I made the mistake of getting involved in a kind of flamewar, that revolved around GitHub versus an email-driven workflow. As can be safely inferred, I do not subscribe to the email-driven workflow idea. There seem to be fundamental disagreements, and I think it's worth a shot to show my side of things.&lt;/p&gt;&lt;p&gt;In this first part, I will reflect on an article titled &quot;&lt;a href=&quot;https://begriffs.com/posts/2018-06-05-mailing-list-vs-github.html&quot;&gt;Mailing lists vs Github&lt;/a&gt;&quot;, which should have been titled &quot;Mailing lists vs the GitHub web UI&quot;, but I digress. Lets cut to the chase!&lt;/p&gt;&lt;h2&gt;Critique&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Code changes are proposed by making another Github-hosted project (a “fork”), modifying a remote branch, and using the GUI to open a pull request from your branch to the original.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;That is a bit of a simplification, and completely ignores the fact that GitHub has an API. So does GitLab and most other similar offerings. You can work with GitHub, use all of its features, without ever having to open a browser. Ok, maybe once, to create an OAuth token.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Email sub-threads allow specialized discussion about different aspects or sections of the code. A linear Github-style discussion would mix those conversations.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I'm not a fan of deep threads. If something has many sub-threads, or the thread goes too deep, for me that indicates that there's a deeper problem. That the patch may need to be split up, or discussed, or even re-designed first. A certain level of discussion is useful, but once it splits up into longer sub-threads, it becomes way too easy to loose sight of the whole picture.&lt;/p&gt;&lt;p&gt;GitHub's flat discussion discourages this, and I find that to be beneficial most of the time. There are times when I don't, but that happens rarely enough that I can live with it.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;On Github, comments continually change. They become “outdated” and disappear when attached to a line that has been changed. Same for the commits, which vanish after a force-push to the pull request branch. In an email thread, by contrast, the original messages and proposed changes remain for comparison with later messages and patches.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;On mailing lists, when you &quot;force push&quot;, and start a new thread (or subthread at best) with the new version of a patchset, the history is similarly hard to use. You can link the new patchset to the older discussion, but comparsion has to be done manually. Same applies to GitHub. I don't see much of a difference here.&lt;/p&gt;&lt;p&gt;If you send updated patches, that's the same as pushing new commits on GitHub, which appear clearly, and still keep older comments available. Some may get marked outdated, but I consider that a good thing. I don't want to see typically irrelevant, already-addressed comments by default. I can still look at them if I want to, mind you.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Furthermore, patches from multiple authors can’t mix in a Github pull request.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Except, you can, and there are a number of ways to accomplish that. You can &lt;a href=&quot;https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/&quot;&gt;allow maintainers of the upstream repo&lt;/a&gt; to edit your pull request. You can also give permission to other to collaborate with you on a repo, and push to your branches. The latter does give a bit wider access than one might wish, but it is an option. Furthermore, others can open pull request against the branch you used to open yours from. When you merge those, their commits will be added to the pull-request you opened.&lt;/p&gt;&lt;p&gt;This last one fits the GitHub pull-request model best, and when you are comfortable with working with GitHub, it is not any more complex to work this way than with e-mail. Instead of applying patchsets, you merge PRs. Both are supported by integrations, the difference in complexity is none.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The pull requester must turn those comments into commits on the branch if he or she wants to incorporate the suggested changes.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Or the commenter can send a pull-request against the branch the PR in question was opened from. You can have a discussion there, to discuss the changes (much like a subthread on the mailing list). You can even link the two together, and navigate between the two.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Another nice effect is that other people can carry the patch to the finish line if the original author stops caring or being involved.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;On GitHub, if the original proposer goes MIA, anyone can take the pull request, update it, and push it forward. Just like on a mailing list. The difference is that this'll start a new pull request, which is not unreasonable: a lot of time can pass between the original request, and someone else taking up the mantle. In that case, it can be a good idea to start a new thread, instead of resurrecting an ancient one.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Patch Format&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;This is indeed a case where an e-mail based workflow is more flexible. Yet, does it matter? In either case, you can just apply the patch, and create diffs in whatever format, and as much context as you wish. You'll see not just the parts, but the whole thing in context. You can do this with GitHub, you can do this with email. I've been doing it ever since I started working with patches, and it is mighty convenient.&lt;/p&gt;&lt;p&gt;Use the tools you have, if you need and want to. You are not limited to the GitHub UI. Nor are you limited to your MUA, either. There are tools outside of those, tools you can integrate with. Use them.&lt;/p&gt;&lt;p&gt;Don't treat patches as discrete items. Apply them, and have a look at the whole. That gives you all the context you need, in whatever format you desire. I found this to be a very powerful workflow, one that is also easier to work with than patches, because the tree is easier to navigate this way. You can use tools that understand the code, to jump to definitions (that's a lot harder when you view a diff). You can apply code formatting, use refactoring tools to better understand the code - and then undo it all if so desired. You can edit and change code as you review, and work with the code the same way you normally do, using all the help your IDE can give you.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Patch/Discussion mix&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can link issues and pull requests on GitHub. IDEs with good integration allow easy navigation too, akin to navigating an e-mail thread. There are projects out there that separate bug report and development lists, which suffer from the same issue as GitHub's issue/pull request split.&lt;/p&gt;&lt;p&gt;This is not an inherent advantage of mailing lists. It's an advantage of not separating the two.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;While web apps deliver a centrally-controlled user interface, native applications allow each person to customize their own experience.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;GitHub has an API. There are plenty of IDE integrations. You can customize your user-experience just as much as with an email-driven workflow. You are not limited to the GitHub UI.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Open protocols like SMTP encourage a proliferation of clients.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;There are all kinds of GitHub clients, each with their own added functionalities, each with their own set of features. Just like email clients, you have a wide selection to choose from.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Mail clients provide ways to mark a message important, or set it back as unread.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can build something like that on top of the GitHub API. I believe that is what &lt;a href=&quot;https://octobox.io/&quot;&gt;Octobox&lt;/a&gt; have been doing.&lt;/p&gt;&lt;p&gt;Again, you are not limited to the GitHub UI.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Some people script their mail client so that they can apply patches with a keyboard shortcut, others go minimalist, and still others even use webmail. Each person is different, and so is their software, but the nature of the mailing list allows them all to work together.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Nothing is stopping anyone from doing the same with GitHub. For example, I use Emacs and Magit to work with GitHub, never leaving my IDE. Others I collaborate with use the GitHub UI. Others use vim and other tools I have no clue about. Some others use Visual Code Studio or Atom. Or GitHub Desktop. Or in some cases, e-mail. We all work on the same projects.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Another area of control is the ability to search and interact with a mailing list while offline.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can do that with GitHub too. With limitations, and a bit of preparation, but similar limits apply to working with a mailing list while offline, too.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Github requires connectivity to review issues and pull requests.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;No. You can &lt;a href=&quot;https://help.github.com/articles/checking-out-pull-requests-locally/&quot;&gt;fetch the pull requests&lt;/a&gt; you want to review before going offline.&lt;/p&gt;&lt;p&gt;You can also use the API to cache issues, and schedule updates.&lt;/p&gt;&lt;p&gt;A lot of people don't sync their mail locally either, so will have to do some preparations when going offline too. Those who do, can also set up automatic PR syncing too.&lt;/p&gt;&lt;p&gt;Again, you are not limited to what the GitHub UI offers. You can use additional tools, the same way you do when using an email-driven workflow. You aren't limited to what you MUA has to offer.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;With a native email client you can review all emails and attachments offline. You can even send replies to messages offline and the client will queue them until internet access becomes available.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;This assumes that one synced e-mail locally. Many people use IMAP or similar protocols, and typically don't sync for offline use. Doing so is most often a conscious decision. When you do decide that, you can also pull down PRs and issues first. There are existing tools to aid you in that.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Tools can work together, rather than having a GUI locked in the browser.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;GitHub has an API. Granted, it is not an RFC, and you are at the mercy of GitHub to continue providing it. But then, you are often at the mercy of your email provider too.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;What a twist of history, then, that users of git chose Github… a centralized host granting free licenses for open source projects, and requiring projects to store their metadata on company servers.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Except they do not do that. They provide you an API to look at the additional meta-data, to build custom integrations on top of it.&lt;/p&gt;&lt;p&gt;You can host your issues elsewhere. You can even use GitHub as a mirror only. You only need to host your metadata there, if you want to use the features GitHub provides. You are not in any way required to do that.&lt;/p&gt;&lt;p&gt;You can even opt to do both! You can accept GitHub issues, pull request, &lt;strong&gt;and&lt;/strong&gt; have a mailing list! There is nothing stopping you from doing that.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Github can legally delete projects or users with or without cause.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Whoever is hosting your mailing list archives, or your mail, can do the same. It's not unheard of.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;An author can download the source release tarball, make changes in the copy, capture the diff, and email it.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can do the same with a project using GitHub. Send the e-mail to one of the maintainers. You are at the mercy of the recipients to deal with the patch appropriately, but that's the same situation when they use CVS/Mercurial/etc, and you send a bare patch. They still have a little work to do to fit it in their workflow.&lt;/p&gt;&lt;p&gt;But GitHub itself does not prevent accepting e-mail.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Sending and applying patches cuts out busywork like cleaning up remote branches after merge, or creating a local branch in the forked repo in preparation for a pull request.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;All of this can be easily automated away. Besides, if you are a long-term contributor, creating a local branch is a good idea &lt;em&gt;anyway&lt;/em&gt;, GitHub or not.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;For comparison, I remember teaching a group of new programmers how to use Github, and was conscious at the time of all the weird steps I asked them to do.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;For comparsion, when my Wife (a garden engineer, not a tech-savvy person) wanted to contribute a little during Hacktoberfest, she found the &quot;Edit file&quot; button on the UI, and went further from there on her own. No weird steps, just edit a file, submit changes, done.&lt;/p&gt;&lt;p&gt;She'd never be able to send an patch by e-mail.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;There’s also less busywork for finished communications. There aren’t things to “clean up” like abandoned pull requests, merged branches, or issues to mark closed. The replies just stop on those threads.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I'd rather see an explicit marker that an issue is resolved or a PR is merged, but hey, that's me, who doesn't like to dig this information out of random e-mail threads. Discoverability is important.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;PGP provides a further guarantee of identity, verified through a decentralized web of trust.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can sign commits and tags while using GitHub. You can't sign comments, last I checked, but you can respond to them by email, which is signed. It might look a bit weird on the UI, but hey.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Perhaps this article can start these developers on the path to rediscovering the care and engineering that went into classic email clients (“MUAs” as they are called).&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Or perhaps there are people who'd rather not deal with email, because they have purpose-built tools that aid them better than a MUA and tools built around that workflow would.&lt;/p&gt;&lt;h2&gt;Exceptions&lt;/h2&gt;&lt;p&gt;There are certainly projects where the GitHub model just doesn't work, the Linux kernel being one particularly great example of that. What works for one project, may not be the best choice for another. I assert that most projects are not the Linux kernel, and aren't anywhere near that level. As such, modeling your workflow on something with vastly different needs may not be the best course of action.&lt;/p&gt;&lt;h2&gt;Next up&lt;/h2&gt;&lt;p&gt;In the next installment of these series, I will explain my workflow. No comparisons, just examples of how I, an allegedly seasoned engineer of sorts, uses the tools he has at hand. It's a workflow of a power user. One who prefers working with APIs instead of email. It may include a little bit of history.&lt;/p&gt;&lt;p&gt;After that, I'll have a look at a few other posts that campaign for an email-driven workflow, and see where that takes us.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-24T12:45:00+00:00</dc:date>
	<dc:creator>Gergely Nagy</dc:creator>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-23-14-48-17">
	<title>Unrelenting Technology (myfreeweb): Scaleway's ARM64 VPS has been successfully depenguinated! :) Now you can run FreeBSD on...</title>
	<link>https://unrelenting.technology/notes/2018-07-23-14-48-17</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;Scaleway's ARM64 VPS has been &lt;a href=&quot;https://community.online.net/t/freebsd-on-arm64/6678&quot;&gt;successfully depenguinated&lt;/a&gt;! :)
Now you can run FreeBSD on four ThunderX cores, 2GB RAM and 50GB SSD for 3€/month. Awesome! &lt;/p&gt;
&lt;p&gt;Also, in the process, I finally discovered &lt;a href=&quot;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=229977&quot;&gt;the cause of GPT partitions sometimes disappearing on reboot&lt;/a&gt;. It was the size of the partition table. It's 128 by default, but sometimes it's not — e.g. on the FreeBSD installer memstick image, it's &lt;em&gt;2&lt;/em&gt;. Creating a third partition with &lt;code&gt;gpart&lt;/code&gt; &quot;succeeded&quot;, but the partition disappeared on reboot. &lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-23T14:48:17+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/07/23/building-a-better-receive-loop/">
	<title>Pete Corey (petecorey): Building a Better Receive Loop</title>
	<link>http://www.petecorey.com/blog/2018/07/23/building-a-better-receive-loop/</link>
	<content:encoded>&lt;p&gt;I’ve been putting quite a bit of time this past week into overhauling and refactoring &lt;a href=&quot;https://github.com/pcorey/bitcoin_network/&quot;&gt;my in-progress Elixir-based Bitcoin node&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a part of that overhaul, I turned my attention to how we’re receiving packets from connected peers. The way we’ve been handling incoming packets is overly complicated and can be greatly simplified by taking advantage of the Bitcoin protocol’s packet structure.&lt;/p&gt;

&lt;p&gt;Let’s go over our old solution and dig into how it can be improved.&lt;/p&gt;

&lt;h2 id=&quot;the-original-receive-loop&quot;&gt;The Original Receive Loop&lt;/h2&gt;

&lt;p&gt;Our Bitcoin node uses &lt;a href=&quot;http://erlang.org/doc/man/gen_tcp.html&quot;&gt;Erlang’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;/code&gt; module&lt;/a&gt; to manage peer to peer communications. Originally, we were using &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;/code&gt; in “active mode”, which means that incoming packets are delivered to our node’s Elixir process in the form of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:tcp&lt;/span&gt;&lt;/code&gt; messages:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def handle_info({:tcp, _port, data}, state) do
  ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because TCP is a streaming protocol, no guarantees can be made about the contents of these messages. A single message may contain a complete Bitcoin packet, a partial packet, multiple packets, or any combination of the above. To handle this ambiguity, the Bitcoin protocol deliminates each packet with a sequence of “magic bytes”. Once we reach this magic sequence, we know that everything we’ve received up until that point constitutes a single packet.&lt;/p&gt;

&lt;p&gt;My previous receive loop worked by maintaining a backlog of all incoming bytes up until the most recently received sequence of magic bytes. Every time a new message was received, it would append those incoming bytes to the backlog and chunk that binary into a sequence of packets, which could then be handled individually:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
{messages, rest} = chunk(state.rest &amp;lt;&amp;gt; data)

case handle_messages(messages, state) do
  {:error, reason, state} -&amp;gt; {:disconnect, reason, %{state | rest: rest}}
  state -&amp;gt; {:noreply, %{state | rest: rest}}
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This solution works, but there are quite a few moving pieces. Not only do we have to maintain a backlog of all recently received bytes, we also have to build out the functionality to split that stream of bytes into individual packets:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp chunk(binary, messages \\ []) do
  case Message.parse(binary) do
    {:ok, message, rest} -&amp;gt;
      chunk(rest, messages ++ [message])

    nil -&amp;gt;
      {messages, binary}
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thankfully, there’s a better way.&lt;/p&gt;

&lt;h2 id=&quot;taking-advantage-of-payload-length&quot;&gt;Taking Advantage of Payload Length&lt;/h2&gt;

&lt;p&gt;Every message sent through the Bitcoin protocol &lt;a href=&quot;https://en.bitcoin.it/wiki/Protocol_documentation#Message_structure&quot;&gt;follows a specific format&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first four bytes of every packet are reserved for the network’s magic bytes. Next, twelve bytes are reserved for the name of the command being sent across the network. The next four bytes hold the length of the payload being sent, followed by a four byte partial checksum of that payload.&lt;/p&gt;

&lt;div class=&quot;post-footer&quot;&gt;
    &lt;div class=&quot;signup-form&quot;&gt;
        &lt;form action=&quot;http://east5th.us11.list-manage.com/subscribe/post?u=f8833fd40e2b1b28545d9f382&amp;id=c56ceba687&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; target=&quot;_blank&quot;&gt;
            &lt;p&gt;Sign up for &lt;a href=&quot;http://www.petecorey.com/newsletter&quot;&gt;Pete's mailing list&lt;/a&gt; and have fresh content delivered to you, hot off the presses every week!&lt;/p&gt;
            &lt;div class=&quot;email-wrapper&quot;&gt;
                &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;FNAME&quot; class=&quot;&quot; id=&quot;mce-FNAME&quot; /&gt;&lt;!--
                                                                                                           --&gt;&lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; id=&quot;mce-EMAIL&quot; /&gt;&lt;!--
                                                                                                                                                                                                    --&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; /&gt;
            &lt;/div&gt;
            &lt;div&gt;&lt;input type=&quot;text&quot; name=&quot;b_f8833fd40e2b1b28545d9f382_c56ceba687&quot; tabindex=&quot;-1&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;These twenty four bytes can be found at the head of every message sent across the Bitcoin peer-to-peer network, followed by the variable length binary payload representing the meat and potatoes of the command being carried out. Relying on this structure can greatly simplify our receive loop.&lt;/p&gt;

&lt;p&gt;By using &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;/code&gt; in “passive mode” (setting &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;active:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;/code&gt;), incoming TCP packets won’t be delivered to our current process as messages. Instead, we can ask for packets using a blocking call to &lt;a href=&quot;http://erlang.org/doc/man/gen_tcp.html#recv-2&quot;&gt;&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;. When requesting packets, we can even specify the number of bytes we want to receive from the incoming TCP stream.&lt;/p&gt;

&lt;p&gt;Instead of receiving partial messages of unknown size, we can ask &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;/code&gt; for the next &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;/code&gt; bytes in the stream:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
{:ok, message} &amp;lt;- :gen_tcp.recv(socket, 24)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we can parse the received &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;/code&gt; bytes and request the payload’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;/code&gt; in bytes from our socket:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
{:ok, %{size: size}} &amp;lt;- Message.parse(message),
{:ok, payload} &amp;lt;- :gen_tcp.recv(socket, size)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we can parse and handle our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;/code&gt;, knowing that it’s guaranteed to be a single, complete Bitcoin command sent across the peer-to-peer network.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;There’s more than goes into the solution that I outlined above. For example, if we’re receiving a command like &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;verack&quot;&lt;/span&gt;&lt;/code&gt;, which has a zero byte payload, asking for zero bytes from &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; will actually return all of the available bytes it has in its TCP stream.&lt;/p&gt;

&lt;p&gt;Complications included, I still think this new solution is superior to our old solution of maintaining and continually chunking an ongoing stream of bytes pulled off the network.&lt;/p&gt;

&lt;p&gt;If you’re eager to see the full details of the new receive loop, &lt;a href=&quot;https://github.com/pcorey/bitcoin_network/blob/master/lib/bitcoin_network/peer/connection.ex#L80-L98&quot;&gt;check it out on Github&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I’d also like to thank &lt;a href=&quot;https://github.com/karlseguin&quot;&gt;Karl Seguin&lt;/a&gt; for inspiring me to improve our Bitcoin node using this technique. He posted a message on &lt;a href=&quot;https://elixir-slackin.herokuapp.com/&quot;&gt;the Elixir Slack group&lt;/a&gt; about prefixing TCP messages with their length to easily determine how many bytes to receive:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’d length prefix every message with 4 bytes and do two recvs, 
&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This one line comment opened my mind to the realization that the Bitcoin protocol was already doing this, and that I was overcomplicating the process of receiving messages.&lt;/p&gt;

&lt;p&gt;Thanks Karl!&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-23T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-21-08-20-07">
	<title>Unrelenting Technology (myfreeweb): Building a reader on your website is not too hard when you already have...</title>
	<link>https://unrelenting.technology/notes/2018-07-21-08-20-07</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;Building a &lt;a href=&quot;https://indieweb.org/reader&quot;&gt;reader&lt;/a&gt; on your website is not too hard when you already have webmention processing (so you have code to parse entries and whatnot). So I kinda have one now. There's even some Microsub support, but that's not complete yet.&lt;/p&gt;
&lt;p&gt;There's a funny bug in my feed fetching though: &lt;a href=&quot;https://aaronparecki.com/2018/07/07/7/oauth-for-the-open-web&quot;&gt;OAuth for the open web&lt;/a&gt; is always on top of the feed (its published date gets set to feed fetch time every time) :D&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-21T08:20:07+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="http://pzel.github.io/til/2018/07/21/sending-0000-doesnt-make-sense.html">
	<title>Simon Zelazny (pzel): Sending 0.0.0.0 doesn't make sense</title>
	<link>http://pzel.github.io/til/2018/07/21/sending-0000-doesnt-make-sense.html</link>
	<content:encoded>&lt;p&gt;While I've grown used to specifying
&lt;a href=&quot;https://en.wikipedia.org/wiki/0.0.0.0&quot;&gt;0.0.0.0&lt;/a&gt; as the listening address for
servers, I got bitten yesterday and realized the dangers of this practice.&lt;/p&gt;

&lt;p&gt;If the listening address of a server ever needs to be communicated to others
(as is the case with clustered systems), configuring &lt;code&gt;0.0.0.0&lt;/code&gt; will lead to bad
things happening. That is: other servers, having learned that your address is
&lt;code&gt;0.0.0.0:SOMEPORT&lt;/code&gt;, will attempt to connect and fail.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://tools.ietf.org/html/rfc1122&quot;&gt;RFC&lt;/a&gt; states clearly:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This host on this network.  MUST NOT be sent, except as
a source address as part of an initializatioan procedure
by which the host learns its own IP address.&lt;/p&gt;&lt;/blockquote&gt;</content:encoded>
	<dc:date>2018-07-21T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://kaushikghose.wordpress.com/?p=7031">
	<title>Pages From The Fire (kghose): Overlays!</title>
	<link></link>
	<content:encoded>Yes, I learned how to draw text &amp;#8230; Advertisements</content:encoded>
	<dc:date>2018-07-21T03:38:57+00:00</dc:date>
</item>
<item rdf:about="https://www.geeklan.co.uk/?p=2266">
	<title>Sevan Janiyan (sevan): Something blogged (on pkgsrcCon 2018)</title>
	<link>https://www.geeklan.co.uk/?p=2266</link>
	<content:encoded>For this years pkgsrcCon, the baton was passed on to Pierre Pronchery &amp;#38; Thomas Merkel, location Berlin. It wasn&amp;#8217;t clear whether I would be able to attend this year until the very last minute, booking plane tickets and accommodation a couple of days before. The day before I flew out was really hectic and I &amp;#8230; &lt;p class=&quot;link-more&quot;&gt;&lt;a href=&quot;https://www.geeklan.co.uk/?p=2266&quot; class=&quot;more-link&quot;&gt;Continue reading&lt;span class=&quot;screen-reader-text&quot;&gt; &quot;Something blogged (on pkgsrcCon 2018)&quot;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-21T01:17:58+00:00</dc:date>
</item>
<item rdf:about="https://kev.inburke.com/?p=3636">
	<title>Kevin Burke (kb): AWS’s response to ALB internal validation failures</title>
	<link>https://kev.inburke.com/kevin/aws-alb-validation-tls-reply/</link>
	<content:encoded>&lt;p&gt;Last week I wrote about &lt;a href=&quot;https://kev.inburke.com/kevin/amazons-albs-insecure-internal-traffic/&quot;&gt;how AWS ALB's do not validate TLS certificates from
internal services&lt;/a&gt;. &lt;a href=&quot;https://twitter.com/colmmacc&quot;&gt;Colm
MacCárthaigh&lt;/a&gt;, the lead engineer for Amazon ELB, writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m the main author of Amazon s2n, our Open Source implementation of TLS/SSL,
and a contributor to the TLS/SSL standards. Hopefully I’m qualified to chime
in!&lt;/p&gt;
&lt;p&gt;You’re right that ALB does not validate the certificates on targets, but it’s
important to understand the context that ALBs run in to see why this is still
a pending item on our roadmap, rather than something we’ve shipped already as
a “must have”.&lt;/p&gt;
&lt;p&gt;The role that server certificates play in TLS is to authenticate the server,
so that it can’t be impersonated or MITM. ALBs run exclusively on our Amazon
VPC network, a Software Defined Network where we encapsulate and authenticate
traffic at the packet level. We believe that this protection is far stronger
than certificate authentication. Every single packet is being checked for
correctness, by both the sender and the recipient, even in Amazon-designed
hardware if you’re using an Enhanced Networking interface. We think it’s
better than the ecosystem where any CA can issue a certificate at any time,
with still limited audit controls (though certificate transparency is
promising!).&lt;/p&gt;
&lt;p&gt;The short of it is that traffic simply can’t be man-in-the-middled or spoofed
on the VPC network, it’s one of our core security guarantees. Instances,
containers, lambda functions, and Elastic Network Interfaces can only be given
IPs via the secure and audit-able EC2 APIs. In our security threat model, all
of this API and packet level security is what plugs in the role performed by
server certificates.&lt;/p&gt;
&lt;p&gt;This contrasts with the older EC2 classic network, a big shared network, which
is why classic load balancers do support backend authentication.&lt;/p&gt;
&lt;p&gt;We actually find that many customers actually load their targets and backends
with “invalid” certificates that are self-signed or expired, because it’s so
operationally hard to stay up-to-date and it’s hard to automate, even with
projects like LetsEncrypt, when your instances are inherently unreachable on
the internet.&lt;/p&gt;
&lt;p&gt;All that said, we’ll be adding support for certificate validation, probably
including pinning and private CAs! Used well with good operational controls
it can be a measure of defense in depth, and it’s important for cases such
as targets hosted on less secure private networks such as on-premesis
data-centers.&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded>
	<dc:date>2018-07-20T04:49:44+00:00</dc:date>
</item>
<item rdf:about="http://codeplea.com/embedding-files-in-c-programs">
	<title>Lewis Van Winkle (code): How to Embed an Arbitrary File in a C Program</title>
	<link>http://codeplea.com/embedding-files-in-c-programs</link>
	<dc:date>2018-07-20T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://www.anishathalye.com/2018/07/19/gemini-a-modern-beamerposter-theme/">
	<title>Anish Athalye (anishathalye): Gemini: A Modern LaTeX Poster Theme</title>
	<link>https://www.anishathalye.com/2018/07/19/gemini-a-modern-beamerposter-theme/</link>
	<content:encoded>&lt;p&gt;Programs like PowerPoint, Keynote, and Adobe Illustrator are common tools for
designing posters, but these programs have a number of disadvantages, including
lack of &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_content_and_presentation&quot;&gt;separation of content and presentation&lt;/a&gt; and lack of
programmatic control over the output. Designing posters using these programs
can require countless hours calculating positions of elements by hand, manually
laying out content, manually propagating style changes, and repeating these
kinds of tasks over and over again during the iterative process of poster
design.&lt;/p&gt;

&lt;p&gt;The idea of using a document preparation system like &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; to implement a
poster using code sounds fantastic, and indeed, there are a number of LaTeX
&lt;a href=&quot;https://www.latextemplates.com/cat/conference-posters&quot;&gt;templates&lt;/a&gt; and packages for making posters, such as &lt;a href=&quot;https://ctan.org/pkg/a0poster&quot;&gt;a0poster&lt;/a&gt;, &lt;a href=&quot;https://ctan.org/pkg/sciposter&quot;&gt;sciposter&lt;/a&gt;,
and &lt;a href=&quot;https://ctan.org/pkg/beamerposter&quot;&gt;beamerposter&lt;/a&gt;. However, I didn’t like the look of the &lt;a href=&quot;https://www.google.com/search?q=latex+poster+template&amp;tbm=isch&quot;&gt;existing&lt;/a&gt; themes
and templates — they all looked 20 years old — and this is what kept me
from using LaTeX for making posters, even though I had been using the software
for years for authoring documents.&lt;/p&gt;

&lt;p&gt;I finally bit the bullet and spent some time designing a clean, stylish, and
minimal poster theme for LaTeX, building on top of the beamerposter package.
The result has been open-sourced as &lt;a href=&quot;https://github.com/anishathalye/gemini&quot;&gt;Gemini&lt;/a&gt;, and it makes it really easy to
design posters that look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.anishathalye.com/media/2018/07/19/poster.pdf&quot;&gt;&lt;img src=&quot;https://www.anishathalye.com/media/2018/07/19/poster.png&quot; alt=&quot;Poster example&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-latex&quot;&gt;Why LaTeX?&lt;/h1&gt;

&lt;p&gt;There are a number of programs commonly used for making academic posters. These
include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Word processing programs (e.g. Word, Pages, and LibreOffice Writer)&lt;/li&gt;
  &lt;li&gt;Presentation programs (e.g. PowerPoint, Keynote, and LibreOffice Impress)&lt;/li&gt;
  &lt;li&gt;Vector editing programs (e.g. Adobe Illustrator and Inkscape)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why use LaTex over these programs? The biggest benefit is that LaTeX does not
require manual effort to lay out contents and apply a uniform style to the
entire poster. All layout and styling is done using code relying on TeX’s
sophisticated layout algorithms, and there is a clean separation of content and
presentation, similar to the content/style separation in HTML/CSS.&lt;/p&gt;

&lt;p&gt;There are other benefits as well. TeX is a sophisticated typesetting system
that produces excellent results for text as well as mathematical formulae;
LaTeX packages provide support for &lt;a href=&quot;https://ctan.org/pkg/pgfplots?lang=en&quot;&gt;plotting&lt;/a&gt; and algorithmically
specified &lt;a href=&quot;https://ctan.org/pkg/pgf&quot;&gt;diagrams and vector graphics&lt;/a&gt;; and beamer provides support for
column-based layout, including variable-width and nested columns. This means
that all content in the poster, not just the text, can be produced using code:
no more screenshots of mathematical equations; no more positioning shapes with
the mouse to create diagrams; no more screenshots of plots where the styling
doesn’t quite match the style of the poster; and no more manual positioning of
blocks.&lt;/p&gt;

&lt;h1 id=&quot;a-modern-latex-poster-theme&quot;&gt;A modern LaTeX poster theme&lt;/h1&gt;

&lt;p&gt;Building posters with LaTeX is by far a better experience than using
PowerPoint, Keynote, or Illustrator. I felt that the one thing missing was an
aesthetically pleasing poster theme. There’s no reason a poster designed using
LaTeX should look any less beautiful than a poster made using graphic design
software like Adobe Illustrator.&lt;/p&gt;

&lt;p&gt;This is what led to the creation of &lt;a href=&quot;https://github.com/anishathalye/gemini&quot;&gt;Gemini&lt;/a&gt;, a LaTex poster theme with a focus
on being clean, minimal, and looking great out of the box while being
customizable:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.anishathalye.com/media/2018/07/19/poster-gemini.pdf&quot;&gt;&lt;img src=&quot;https://www.anishathalye.com/media/2018/07/19/poster-gemini.png&quot; alt=&quot;Gemini default theme example&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.anishathalye.com/media/2018/07/19/poster-mit.pdf&quot;&gt;&lt;img src=&quot;https://www.anishathalye.com/media/2018/07/19/poster-mit.png&quot; alt=&quot;MIT theme example&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The theme is actually a pretty small amount of code; most of the functionality
is provided by LaTeX and beamerposter. But making conscious choices on title
and block layout, font families, font weights, color schemes, and other little
details makes a pretty big difference in how the poster looks and feels.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-19T04:00:00+00:00</dc:date>
</item>
<item rdf:about="https://www.brianthicks.com/post/2018/07/18/lets-make-nice-packages/">
	<title>Brian Hicks (brianhicks): Let's Make Nice Packages!</title>
	<link>https://www.brianthicks.com/post/2018/07/18/lets-make-nice-packages/</link>
	<content:encoded>&lt;p&gt;This year at &lt;a href=&quot;https://2018.elmeurope.org/&quot;&gt;Elm Europe&lt;/a&gt; I gave a talk called &amp;ldquo;Let&amp;rsquo;s Make Nice Packages!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s about research.&lt;/p&gt;

&lt;p&gt;No, wait, come back!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.brianthicks.com/post/2018/07/18/lets-make-nice-packages/&quot;&gt;Continue Reading&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-18T19:11:00+00:00</dc:date>
	<dc:creator>Brian Hicks</dc:creator>
</item>
<item rdf:about="https://j11g.com/?p=2103">
	<title>Jan van den Berg (j11g): The Phoenix Project</title>
	<link>https://j11g.com/index.php/2018/07/18/the-phoenix-project/</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;https://j11g.com/wp-content/uploads/2018/07/The-Phoenix-Project.jpg&quot;&gt;&lt;img class=&quot;alignleft wp-image-2111&quot; src=&quot;https://j11g.com/wp-content/uploads/2018/07/The-Phoenix-Project.jpg&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;448&quot; /&gt;&lt;/a&gt;When a co-worker handed me a copy of &lt;a href=&quot;https://www.amazon.com/Phoenix-Project-DevOps-Helping-Business/dp/0988262592&quot;&gt;The Phoenix Project&lt;/a&gt;, the 8-bit art on the cover looked fun. But the tagline — &amp;#8216;A Novel About IT, DevOps and Helping your Business Win&amp;#8217; — sounded a bit like the usual buzzword management lingo. But I was clearly wrong, I loved this book!&lt;/p&gt;
&lt;p&gt;It is unlike anything I&amp;#8217;ve read before and it really spoke to me because the situations were so incredibly recognizable. The book tells a fictionalized story where the main character, Bill, gets promoted — more or less against his will — to VP IT Operations and subsequently inherits a &lt;em&gt;bit&lt;/em&gt; of a mess. Things keeps breaking and escalating, causing SEV-1 outages all while the billion dollar company is having a bad couple of quarters and put all their hope on Project Phoenix. An IT project that is supposed to solve anything and everything; already three years in the making and nowhere close to be finished.&lt;/p&gt;
&lt;p&gt;The story revolves around Bill and his struggle of how to turn things around. On his path to discovery he is mentored by an eccentric figure called Eric (who is such a great and funny character).&lt;/p&gt;
&lt;a href=&quot;https://j11g.com/wp-content/uploads/2018/07/ThePhoenixProjectOrgChartMD.png&quot;&gt;&lt;img class=&quot;wp-image-2104&quot; src=&quot;https://j11g.com/wp-content/uploads/2018/07/ThePhoenixProjectOrgChartMD-300x182.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;304&quot; /&gt;&lt;/a&gt;https://www.magnusdelta.com/blog/2017/9/16/thephoenixprojectsummary
&lt;p&gt;I feel like Bill and I have a lot in common, mainly because the book is really &lt;strong&gt;spot on&lt;/strong&gt; when describing situations IT departments can find themselves in. Some scenes were a literal copy of things I have experienced. As if the writers were there and took notes. It made me laugh out loud or raise my eyebrows on more than one occasion. The reliance on certain key-figures, the disruption of self-involved Marketing/Sales people, the office politics, the lack of trust in teams, the weight of technical debt, the difference between requirements and customer needs. It was all too familiar. So for me the power of the book is the true-to-life examples, because those provide the basis for arguing the successful application of the theory.&lt;/p&gt;
&lt;p&gt;Because the book is in fact the theory of &lt;a href=&quot;https://en.wikipedia.org/wiki/DevOps&quot;&gt;DevOps&lt;/a&gt; compiled into an exciting story. Which is a lot more fun than it sounds.&lt;/p&gt;
&lt;p&gt;Actually the book could be seen as a modern day version of &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Goal_(novel)&quot;&gt;The Goal&lt;/a&gt; by Dr. Goldratt — a book that handles the &lt;a href=&quot;https://en.wikipedia.org/wiki/Theory_of_constraints&quot;&gt;Theory of Constraints&lt;/a&gt; — which I &lt;em&gt;had&lt;/em&gt; of course heard of, but never read. The writers of The Phoenix Project make no secret of their admiration for Goldratts&amp;#8217; theory. But DevOps is of course a thing of its own. A relatively new paradigm, borrowing from TOC, Lean and Agile principles among other things. Its goal is &amp;#8216;to aim at shorter development cycles, increased deployment frequency, and more dependable releases, in close alignment with business objectives&amp;#8217;. And where &lt;a href=&quot;https://itrevolution.com/the-three-ways-principles-underpinning-devops/&quot;&gt;The Three Ways&lt;/a&gt; theory is a central aspect, unifying culture with production flow. The book shows how those theoretic mechanics work in practice. And that IT is closer to manufacturing than you might think; by breaking down the four different types of work there are in IT. That was actually an eye-opener for me. But I won&amp;#8217;t go into too much detail about DevOps, I just wanted to point you in the right direction. &lt;strong&gt;If you work with different people to create &lt;em&gt;anything&lt;/em&gt; in IT, you are probably going to like this book, and are bound to learn something.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://j11g.com/index.php/2018/07/18/the-phoenix-project/&quot;&gt;The Phoenix Project&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://j11g.com&quot;&gt;Jan van den Berg&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-18T15:10:16+00:00</dc:date>
</item>
<item rdf:about="http://jakob.spaceReplacing+Anki+With+org-drill">
	<title>Jakob (jakob): Replacing Anki With org-drill</title>
	<link>http://jakob.spaceReplacing+Anki+With+org-drill</link>
	<content:encoded>&lt;p class=&quot;indent&quot;&gt;Recently, I read Michael Nielsen's essay, &lt;a href=&quot;http://augmentingcognition.com/ltm.html&quot;&gt;&quot;Augmenting Cognition&quot;&lt;/a&gt;. It talks
about some very interesting use cases for the spaced repetition software &quot;Anki&quot;
that made me want to try it out again. I'm familiar with Anki, as I used it
extensively throughout my last year of high school to study for AP exams. At the
time, Anki's &quot;killer feature&quot; for me over similar software was being able to
typeset mathematical notation in LaTeX (the exams were Chemistry and Calculus,
so almost all of the material to memorize was mathematical notation). It's a
great piece of software; I've been using it with the brother I'm helping through
summer school. But ever since I began using Gentoo, I've been trying to avoid
packages like QtWebView, which has deterred me from installing Anki on my
machine. With a little bit of searching, however, I found that there was an
Emacs package for spaced repetition named 'org-drill', so I decided to check it
out.&lt;/p&gt;
&lt;p class=&quot;indent&quot;&gt;org-drill is included in org by default (which happens to be included in Emacs
by default), but it does need to be enabled. The steps to do so are outlined on
the corresponding &lt;a href=&quot;https://orgmode.org/worg/org-contrib/org-drill.html&quot;&gt;worg page&lt;/a&gt;. So far, I've used it to study German
vocabulary and the material for my ham radio license exams, and I'm very happy
with it. It has all of the features you might want from Anki, like Cloze
deletion and double-sided cards, but I find that card creation is even more
intuitive in org markup. Clozes are as simple as enclosing the answers in square
brackets, and multi-sided cards just entail making multiple headings and setting
the &quot;:DRILL_CARD_TYPE:&quot;. You can even write your own card types in elisp.
Another benefit of using org markup as the source for cards is that I can easily
transform a plain text file into a deck using emacs macros.&lt;/p&gt;
&lt;p class=&quot;indent&quot;&gt;Unlike Anki, however, org-drill has support for the SM5 and SM8 scheduling
algorithms. &lt;a href=&quot;https://apps.ankiweb.net/docs/manual.html#what-algorithm&quot;&gt;Anki is quite outspoken about the benefits of SM2 over the later
renditions,&lt;/a&gt; but I appreciate that I at least have the option to use these
schedulers if I want to. The algorithms' parameters can also be finely tuned;
the one I've found most useful is 'org-drill-learn-fraction', which I can use to
decrease the amount of time before I see a card again.&lt;/p&gt;
&lt;p class=&quot;indent&quot;&gt;As I mentioned earlier, the feature that brought me to Anki was its support for
typesetting math with LaTeX. Emacs certainly has support for rendering LaTeX,
but I have a pretty wonky setup where I'm running Emacs in a terminal emulator,
so what I opted for instead was a typesetting language that renders to unicode
text. There are quite a few of these, but the one I was most impressed with is
&lt;a href=&quot;https://arthursonzogni.com/Diagon/&quot;&gt;Diagon&lt;/a&gt;. It's meant to be run in the browser, but the backend is written in
C++ and can be compiled to run natively. Be warned, however, that the build
system does require Java.&lt;/p&gt;
&lt;p class=&quot;indent&quot;&gt;First, I replace 'src/main.cpp' with the following. The version in VCS will
unconditionally run the SequenceTranslator, but this modification enables us to
select which translator to use from a command-line argument.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cpp&quot;&gt;#include &amp;quot;translator/Translator.h&amp;quot;
#include &amp;lt;iostream&amp;gt;

int main(int argc, const char **argv) {
    if (argc != 2) {
        std::cerr &amp;lt;&amp;lt; &amp;quot;usage: &amp;quot; &amp;lt;&amp;lt; argv[0] &amp;lt;&amp;lt; &amp;quot; [translator]&amp;quot; &amp;lt;&amp;lt; std::endl;
        return 1;
    }

    std::string input;
    for (std::string line; std::getline(std::cin, line);) {
        input += line + &amp;quot;\n&amp;quot;;
    }

    auto translator = TranslatorFromName(argv[1]);
    std::cout &amp;lt;&amp;lt; (*translator)(input, &amp;quot;&amp;quot;) &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, compiling is as easy as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-sh&quot;&gt;cd tools/antlr/
./download_and_patch.sh
cd ../../
mkdir build
cd build
cmake ..
make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And for Emacs integration, I've added the following to my '.emacs'&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-elisp&quot;&gt;;; Applies Diagon's &amp;quot;Math&amp;quot; formatter to the current region, replacing
;; the contents of the region with the formatted output.
(defun format-math-at-region ()
  (interactive)
  (let* ((math-to-format (buffer-substring (region-beginning) (region-end)))
         (command (format &amp;quot;echo \&amp;quot;%s\&amp;quot; | diagon Math&amp;quot; math-to-format))) ;; Bad and hacky. I'm aware.
      (kill-region (region-beginning) (region-end))
      (insert (string-trim-right (shell-command-to-string command)))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's not as powerful as LaTeX, but it certainly suits my needs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://jakob.space/img/format_math_demo.gif&quot; alt=&quot;Demo&quot; /&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-13T14:53:13+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/7bb3f57d4641">
	<title>Stjepan Golemac (stjepangolemac): Hi Marco,</title>
	<link>https://medium.com/@stjepan.golemac/hi-marco-7bb3f57d4641?source=rss-512a4050aac------2</link>
	<content:encoded>&lt;p&gt;Hi Marco,&lt;/p&gt;&lt;p&gt;I am glad that you find this article useful! I suppose that you are asking me about the prevention of endless looping.&lt;/p&gt;&lt;p&gt;The code from the provided repo will surely loop to eternity if the REQUEST action fails every time. The solution here could be adding a retry counter to the action. Such information would allow the monitor saga to abandon the action after the configured number of attempts.&lt;/p&gt;&lt;p&gt;If you look at the Flux Standard Action (&lt;a href=&quot;https://github.com/redux-utilities/flux-standard-action&quot;&gt;https://github.com/redux-utilities/flux-standard-action&lt;/a&gt;), it says the best place to put such data is in the meta property of the action.&lt;/p&gt;&lt;p&gt;You could extend the functionality of the monitor saga to increment the counter every time it encounters a failed action.&lt;/p&gt;&lt;p&gt;Example:&lt;/p&gt;&lt;p&gt;starting to monitor action:&lt;br /&gt;{ type: ‘FOO_REQUEST’, payload: { … } }&lt;/p&gt;&lt;p&gt;action failed, refresh the token and dispatch it again:&lt;br /&gt;{ type: ‘FOO_REQUEST’, payload: { … }, meta: { retry: 1 } }&lt;/p&gt;&lt;p&gt;…&lt;/p&gt;&lt;p&gt;action failed again, retry counter is &amp;gt; 3, ignore the action…&lt;/p&gt;&lt;p&gt;I hope this is understandable. Cheers!&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7bb3f57d4641&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2018-07-12T20:35:48+00:00</dc:date>
</item>
<item rdf:about="https://medium.com/p/88a25e162bf6">
	<title>Oleg Kovalov (olegkovalov): Contributing to Go with go-critic</title>
	<link>https://blog.usejournal.com/contributing-to-go-with-go-critic-88a25e162bf6?source=rss-c34448aa5bb9------2</link>
	<content:encoded>&lt;p&gt;You might remember announce of go-critic &lt;a href=&quot;https://itnext.io/welcome-go-critic-a26b6e30f1c6&quot;&gt;last month&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We’ve verified &lt;a href=&quot;https://github.com/golang/go&quot;&gt;golang/go&lt;/a&gt; repository and have send few patches, that are fixing found problems. In this post, we will inspect the suggested changes.&lt;/p&gt;&lt;p&gt;You can find list of go-critic patches on &lt;a href=&quot;https://go-critic.github.io/trophies.html#golanggo&quot;&gt;trophies&lt;/a&gt; page.&lt;/p&gt;&lt;p&gt;List of patches covered in this post:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://golang.org/cl/117615&quot;&gt;net: combine append calls in reverseaddr&lt;/a&gt; appendCombine&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://golang.org/cl/113636&quot;&gt;cmd/link/internal/ld: avoid Reloc copies in range loops&lt;/a&gt; rangeValCopy&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://golang.org/cl/122776&quot;&gt;cmd/compile/internal/ssa: fix partsByVarOffset.Less method&lt;/a&gt; dupSubExpr&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://golang.org/cl/122895&quot;&gt;runtime: remove redundant explicit deref in trace.go&lt;/a&gt; underef&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://golang.org/cl/122896&quot;&gt;cmd/link/internal/sym: uncomment code for ELF cases in RelocName&lt;/a&gt; commentedOutCode&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123375&quot;&gt;runtime: simplify slice expression to sliced value itself&lt;/a&gt; unslice&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123376&quot;&gt;html/template: use named consts instead of their values&lt;/a&gt; namedConst&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123377&quot;&gt;cmd/internal/obj/arm64: simplify some bool expressions&lt;/a&gt; boolExprSimplify&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123378&quot;&gt;math,net: omit explicit true tag expr in switch&lt;/a&gt; switchTrue&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123379&quot;&gt;archive/tar: remore redundant parens in type expressions&lt;/a&gt; typeUnparen&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;dupSubExpr&lt;/h4&gt;&lt;p&gt;Everyone makes mistakes. In Go sometimes you may write boring and boilerplate code that increases copy/paste error probability.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/122776&quot;&gt;CL122776&lt;/a&gt; contains bugfix that was found by &lt;a href=&quot;https://go-critic.github.io/overview#dupSubExpr-ref&quot;&gt;dupSubExpr&lt;/a&gt; checker:&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/7efcba7c15089e3bedcf904534040b44/href&quot;&gt;https://medium.com/media/7efcba7c15089e3bedcf904534040b44/href&lt;/a&gt;&lt;p&gt;Take a look at index on the right and on the left. They were identical before changes. dupSubExpr is created exactly for this situation, when left and right expression are identical.&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;commentedOutCode&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Hopefully your project is under &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control&quot;&gt;VCS&lt;/a&gt; and instead of disabling code via commenting it — it’s better to remove it completely. There’re exceptions, of course, but `dead code` is usually redundant and can hide bugs.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://go-critic.github.io/overview#commentedOutCode-ref&quot;&gt;commentedOutCode&lt;/a&gt; has found this interesting code (&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/122896&quot;&gt;CL122896&lt;/a&gt;):&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/49b3f468bd36ad824059ef80359a2497/href&quot;&gt;https://medium.com/media/49b3f468bd36ad824059ef80359a2497/href&lt;/a&gt;&lt;p&gt;Above that code we can see a comment:&lt;/p&gt;&lt;pre&gt;&lt;em&gt;// We didn't have some relocation types at Go1.4.&lt;/em&gt;&lt;br /&gt;&lt;em&gt;// Uncomment code when we include those in bootstrap code.&lt;/em&gt;&lt;/pre&gt;&lt;p&gt;Switching to go1.4 branch and uncommenting this 3 lines will prevent code from a compilation, but uncommenting them on amaster branch will be ok.&lt;/p&gt;&lt;p&gt;Usually, the code is commented-out should be totally deleted or uncommented. It’s a good practice to review such old parts of the code and decide their meaning for the future (It’s one of my lovely checks, but also it’s a `noisy` one).&lt;/p&gt;&lt;p&gt;There are a lot of false positives for math/big package and inside the compiler. In the first case, they’re explaining operations, in the second case — which AST code it is processing. Programmatically decide what comment is just a comment and what is real commented code (might be `dead` code) — isn’t an easy task. Sadly.&lt;/p&gt;&lt;p&gt;Here is the idea: what about to mark commented-out code which explains behaviour of program from just a commented-out code? This might be a trivial thing, but it will help future readers a lot (by example, a code in comments can be prepended with a # character).&lt;/p&gt;&lt;p&gt;Another category — comments with explicit TODO. If the code was commented, but it has an explanation why it’s commented. For this case it’s better not to warn. It’s already implemented, but might work better.&lt;/p&gt;&lt;h4&gt;boolExprSimplify&lt;/h4&gt;&lt;p&gt;Sometimes people are writing strange code. For me, boolean expressions are a pain point more often than others.&lt;/p&gt;&lt;p&gt;Let’s look at this code:&lt;/p&gt;&lt;pre&gt;if !(o1 != 0) {&lt;br /&gt;    break&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;“If not o1 isn’t equal to zero” — double negation, classical. If you agree with me that it’s hard to read, here is a patch &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123377&quot;&gt;CL123377&lt;/a&gt; with a simplification.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://go-critic.github.io/overview#boolExprSimplify-ref&quot;&gt;boolExprSimplify&lt;/a&gt; is targeting on boolean expression simplification, that will improve code readability (question regarding performance will be handled by Go optimizer).&lt;/p&gt;&lt;h4&gt;underef&lt;/h4&gt;&lt;p&gt;If you’re using Go from early versions you might remember when ; was mandatory, the absence of automatic pointer dereference and other `features` that aren’t presented now.&lt;/p&gt;&lt;p&gt;In old Go code you might found something like this:&lt;/p&gt;&lt;pre&gt;&lt;em&gt;// Long time ago there was not automatic pointer dereference:&lt;/em&gt;&lt;br /&gt;buf := (*bufp).ptr()&lt;br /&gt;&lt;em&gt;// ...now it can be as simple as:&lt;/em&gt;&lt;br /&gt;buf := bufp.ptr()&lt;/pre&gt;&lt;p&gt;Few &lt;a href=&quot;https://go-critic.github.io/overview#underef-ref&quot;&gt;underef&lt;/a&gt; checker triggers were fixed here: &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/122895&quot;&gt;CL122895&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;appendCombine&lt;/h3&gt;&lt;p&gt;You might know that append can receive a variable number of arguments. In most cases this allows to improve readability but also this might improve performance too, ’cause compiler doesn’t combine a sequence of append calls (&lt;a href=&quot;https://github.com/golang/go/issues/25828&quot;&gt;cmd/compile: combine append calls&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;In Go repo &lt;a href=&quot;https://go-critic.github.io/overview#appendCombine-ref&quot;&gt;appendCombine&lt;/a&gt; checker has found such code:&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/11d1c3c8c549ef58601d7c659fbc43cc/href&quot;&gt;https://medium.com/media/11d1c3c8c549ef58601d7c659fbc43cc/href&lt;/a&gt;&lt;pre&gt;name              old time/op  new time/op  delta&lt;br /&gt;ReverseAddress-8  4.10µs ± 3%  3.94µs ± 1%  -3.81%  (p=0.000 n=10+9)&lt;/pre&gt;&lt;p&gt;Details in &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/117615&quot;&gt;CL117615&lt;/a&gt;.&lt;/p&gt;&lt;h4&gt;rangeValCopy&lt;/h4&gt;&lt;p&gt;It’s not a secret that value in the range loop are copying. For a small objects (let’s say less than 64 bytes) you might not see a difference. But when it’s a `hot loop` and objects aren’t small enough — performance degradation might occur.&lt;/p&gt;&lt;p&gt;Go has a slightly slow linker (cmd/link) and without big changes in architecture achieving great performance boost isn’t so easy. But we’ve micro-optimizations 😉.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://go-critic.github.io/overview#rangeValCopy-ref&quot;&gt;rangeValCopy&lt;/a&gt; check has found few loops with unwanted data copying. Here is the most interesting one:&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/01aac782ea56117f34dc1d4e5d37e25c/href&quot;&gt;https://medium.com/media/01aac782ea56117f34dc1d4e5d37e25c/href&lt;/a&gt;&lt;p&gt;Instead of copying R[i] on every iteration we’re accessing only 1 interesting field for us Sym.&lt;/p&gt;&lt;pre&gt;name      old time/op  new time/op  delta&lt;br /&gt;Linker-4   530ms ± 2%   521ms ± 3%  -1.80%  (p=0.000 n=17+20)&lt;/pre&gt;&lt;p&gt;Full patch is here &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/113636&quot;&gt;CL113636&lt;/a&gt;.&lt;/p&gt;&lt;h4&gt;namedConst&lt;/h4&gt;&lt;p&gt;In Go, sadly, named constants even when grouped together aren’t connected between each other and didn’t form enumeration like the other languages (&lt;a href=&quot;https://github.com/golang/go/issues/19814&quot;&gt;proposal: spec: add typed enum support&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;One of this problem is a casting &lt;a href=&quot;https://golang.org/ref/spec#Constants&quot;&gt;untyped&lt;/a&gt; const to a type that you’re using like an enum.&lt;/p&gt;&lt;p&gt;Suppose you have a type Color and it’s default const ColDefault Color = 0.&lt;br /&gt;Which of 2 examples your like more?&lt;/p&gt;&lt;pre&gt;&lt;em&gt;// (A)&lt;/em&gt;&lt;br /&gt;if color == 0 {&lt;br /&gt;    // do smth&lt;br /&gt;}&lt;br /&gt;&lt;em&gt;// (B)&lt;/em&gt;&lt;br /&gt;if color == colorDefault {&lt;br /&gt;    // do smth&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;If case (B) for you looks more clear &lt;a href=&quot;https://go-critic.github.io/overview#namedConst-ref&quot;&gt;namedConst&lt;/a&gt; will help you to find such usages and propose named const for that.&lt;/p&gt;&lt;p&gt;Here are the changes for &lt;a href=&quot;https://github.com/golang/go/blob/631402f142e52f535b66864ad1957ef39c78c704/src/html/template/context.go#L45&quot;&gt;context.mangle&lt;/a&gt; method from package html/template:&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/78494dacd2c0653c242d56f4750d5a4c/href&quot;&gt;https://medium.com/media/78494dacd2c0653c242d56f4750d5a4c/href&lt;/a&gt;&lt;p&gt;By the way, sometimes in a patch review you can find interesting discussions…&lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123376&quot;&gt;CL123376&lt;/a&gt; — is a one of such discussions.&lt;/p&gt;&lt;h3&gt;unslice&lt;/h3&gt;&lt;p&gt;One of the features of &lt;a href=&quot;https://golang.org/ref/spec#Slice_expressions&quot;&gt;slice expression&lt;/a&gt; is that x[:] is always identical tox (or if x is a string). In case of a slice it works for any type.&lt;/p&gt;&lt;pre&gt;x       // x is a slice&lt;br /&gt;x[:]    // also a slice&lt;br /&gt;x[:][:] // even this&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://go-critic.github.io/overview#unslice-ref&quot;&gt;unslice&lt;/a&gt; finds similar redundant slice expressions. They’re bad ’cause they’re giving unneeded cognitive load. x[:] makes sense when x is an array, but for a slice it’s just a noise.&lt;/p&gt;&lt;p&gt;Here is a patch &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123375&quot;&gt;CL123375&lt;/a&gt;.&lt;/p&gt;&lt;h4&gt;switchTrue&lt;/h4&gt;&lt;p&gt;The replacement of switch true {...} toswitch {...} is done in &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123378&quot;&gt;CL123378&lt;/a&gt;.&lt;br /&gt;Both of forms are equivalent, but last one is more idiomatic.&lt;/p&gt;&lt;p&gt;Most of the style checks are targeting on similar expressions, where both of them are allowed and correct, but only one of them is more common for Go developers. Next check is from the same category.&lt;/p&gt;&lt;h4&gt;typeUnparen&lt;/h4&gt;&lt;p&gt;Go as many other languages likes parentheses. So heavily, that allows any number of them:&lt;/p&gt;&lt;pre&gt;type (&lt;br /&gt;    t0 int&lt;br /&gt;    t1 (int)&lt;br /&gt;    t2 ((int))&lt;br /&gt;    &lt;em&gt;// ... so, you get the idea.&lt;/em&gt;&lt;br /&gt;)&lt;/pre&gt;&lt;p&gt;But what will happen after running gofmt?&lt;/p&gt;&lt;pre&gt;type (&lt;br /&gt;    t0 int&lt;br /&gt;    t1 (int) &lt;em&gt;// &amp;lt;- Woah! Nothing has changed.&lt;/em&gt;&lt;br /&gt;    t2 (int) &lt;em&gt;// &amp;lt;- Meh..only half of work is done here...&lt;/em&gt;&lt;br /&gt;)&lt;/pre&gt;&lt;p&gt;For this case, we have &lt;a href=&quot;https://go-critic.github.io/overview#typeunparen&quot;&gt;typeUnparen&lt;/a&gt; checker. It finds all type expressions, where some parentheses can be omitted. We’ve tried to fix few warnings here &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/123379&quot;&gt;CL123379&lt;/a&gt;, we will see if it will be merged.&lt;/p&gt;&lt;h4&gt;go-critic on duty&lt;/h4&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/300/0*ACEv9hpHPq7ldde8.jpeg&quot; /&gt;&lt;p&gt;We’ve covered only tiny part of all checks and in near future, we will have more of them with new cases, suggestions and solutions thanks to the people that are &lt;a href=&quot;https://github.com/go-critic/go-critic/graphs/contributors&quot;&gt;contributing to go-critic&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Send us ideas or any code improvements, inform about found warnings, maybe bugs or just ping us. You might also suggest projects for auditing, it’s a priceless experience for us. Thank you.&lt;/p&gt;&lt;h4&gt;More where this came from&lt;/h4&gt;&lt;p&gt;This story is published in &lt;a href=&quot;http://blog.usejournal.com&quot;&gt;Noteworthy&lt;/a&gt;, where thousands come every day to learn about the people &amp;amp; ideas shaping the products we love.&lt;/p&gt;&lt;p&gt;Follow our publication to see more product &amp;amp; design stories featured by the &lt;a href=&quot;https://usejournal.com/?utm_source=usejournal.com&amp;utm_medium=blog&amp;utm_campaign=guest_post&quot;&gt;Journal&lt;/a&gt; team.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=88a25e162bf6&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://blog.usejournal.com/contributing-to-go-with-go-critic-88a25e162bf6&quot;&gt;Contributing to Go with go-critic&lt;/a&gt; was originally published in &lt;a href=&quot;https://blog.usejournal.com&quot;&gt;Noteworthy - The Journal Blog&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-12T19:06:32+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-12-18-24-17">
	<title>Unrelenting Technology (myfreeweb): For 0.5 dollars per hour (or currently 0.1/hr if you reserve for 24h?) on...</title>
	<link>https://unrelenting.technology/notes/2018-07-12-18-24-17</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;For 0.5 dollars per hour (or currently 0.1/hr if you reserve for 24h?) on packet.net you can get access to a dedicated dual-socket Cavium ThunderX server with 128GB RAM and a 250GB SSD.
I took it for a few hours and now &lt;a href=&quot;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=229636&quot;&gt;lang/crystal&lt;/a&gt;, &lt;a href=&quot;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=229710&quot;&gt;lang/mono&lt;/a&gt; and some other ports work on aarch64.&lt;/p&gt;
&lt;p&gt;Ironically, these two builds have involved long single-threaded compile processes. In the mono case, parallelism had to be disabled for C# compilation &lt;a href=&quot;https://github.com/mono/mono/issues/7017&quot;&gt;to work around a concurrency bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At least building things like WebKitGTK+ (to test a &lt;a href=&quot;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=228699&quot;&gt;one line patch&lt;/a&gt;) and Krita felt awesome :D&lt;/p&gt;

&lt;blockquote&gt;
&lt;img src=&quot;https://unrelentingtech.s3.dualstack.eu-west-1.amazonaws.com/e80dabc8_wayland-screenshot-2018-07-12_01-50-26-fs8.png&quot; alt=&quot;&quot; class=&quot;u-photo&quot; /&gt;
&lt;/blockquote&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-12T18:24:41+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="http://caiustheory.com/running-rails-tests-under-circleci-2.0-with-mariadb/">
	<title>Caius Durling (caius): Running rails tests under CircleCI 2.0 with MariaDB</title>
	<link>http://caiustheory.com/running-rails-tests-under-circleci-2.0-with-mariadb/</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;https://circleci.com&quot;&gt;CircleCI&lt;/a&gt; have released their version 2.0 platform, which is based on top of docker and moves the configuration for each project into a config file in the git repository.&lt;/p&gt;

&lt;p&gt;They have a bunch of documentation at &lt;a href=&quot;https://circleci.com/docs/2.0/&quot;&gt;https://circleci.com/docs/2.0/&lt;/a&gt;. Basic gist is the config file lives at &lt;code&gt;.circleci/config.yml&lt;/code&gt; and defines which images to run a series of commands in. You can either specify jobs to run in series, or a workflow containing jobs which can depend on each other and/or run in parallel.&lt;/p&gt;

&lt;p&gt;The first step is finding a base image that contains ruby, node and chrome/chromedriver so the the app runs, assets compile and rails feature specs work respectively.&lt;/p&gt;

&lt;p&gt;The available images for ruby are listed at &lt;a href=&quot;https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/ruby/images&quot;&gt;https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/ruby/images&lt;/a&gt;, and the mariadb images are listed at &lt;a href=&quot;https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/mariadb/images&quot;&gt;https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/mariadb/images&lt;/a&gt;. For the ruby images you'll want to use the &lt;code&gt;…-node-browsers&lt;/code&gt; image as it has Node.js for assets and Chrome/chromedriver installed for headless browser testing.&lt;/p&gt;

&lt;p&gt;So the start of our config file looks something like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;version&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;working_directory&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~/project&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;image&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;circleci/ruby:2.4.1-node-browsers&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;environment&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;RAILS_ENV&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;image&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mariadb:10.2.12&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;environment&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_DATABASE&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app_test&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_USER&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_ALLOW_EMPTY_PASSWORD&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_HOST&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we have that then we can start on setting up our rails environment to the point we can run tests. First of all we need to install all our ruby dependencies via &lt;a href=&quot;https://bundler.io&quot;&gt;bundler&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;jobs&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Install ruby dependencies&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle install --path vendor/bundle&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we need to install our JS dependencies via &lt;a href=&quot;https://yarnpkg.com/lang/en/&quot;&gt;yarn&lt;/a&gt;, in much the same way as we did for the ruby dependencies.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Install js dependencies&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yarn install&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we need to sort out our database. There's a chance that the docker instance for MariaDB hasn't come up yet, so we can lean on a tool called &lt;code&gt;dockerize&lt;/code&gt; to wait for it to be available. Then we can ask rails to go ahead and setup our test database.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Wait for database to be available&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dockerize -wait tcp://127.0.0.1:3306 -timeout 1m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Setup database&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle exec rake db:setup&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then finally we can run our tests as the final step.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Run tests&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle exec rspec&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Putting it all together, we have the following in &lt;code&gt;.circleci/config.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;version&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;working_directory&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~/project&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;docker&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;image&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;circleci/ruby:2.4.1-node-browsers&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;environment&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;RAILS_ENV&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;image&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mariadb:10.2.12&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;environment&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_DATABASE&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app_test&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_USER&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_ALLOW_EMPTY_PASSWORD&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;MYSQL_HOST&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;jobs&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Install ruby dependencies&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle install --path vendor/bundle&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Install js dependencies&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yarn install&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Wait for database to be available&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dockerize -wait tcp://127.0.0.1:3306 -timeout 1m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Setup database&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle exec rake db:setup&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;-&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;run&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;name&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Run tests&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;command&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bundle exec rspec&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;May your test runs always be green and your bugs be squished.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-11T18:30:00+00:00</dc:date>
</item>
<item rdf:about="tag:sweetness.hmmz.org,2018-07-10:/2018-07-10-mitogen-released.html">
	<title>David Wilson (dw): Mitogen released!</title>
	<link>https://sweetness.hmmz.org/2018-07-10-mitogen-released.html</link>
	<content:encoded>&lt;img src=&quot;https://sweetness.hmmz.org/images/mito1/cell_division.png&quot; /&gt;

    &lt;p&gt;
    After 4 months development, a design phase stretching back 10 years and
    more than 1,300 commits, I am pleased to finally announce the first stable
    series of Mitogen and the Mitogen for Ansible extension.
    &lt;/p&gt;

    &lt;p&gt;
    &lt;a target=&quot;_blank&quot; href=&quot;https://mitogen.readthedocs.io/&quot;&gt;Mitogen is a Python zero-deploy
    distributed programming library&lt;/a&gt; designed to drastically increase the
    functional capability of infrastructure software operating via SSH. &lt;a target=&quot;_blank&quot; href=&quot;https://mitogen.readthedocs.io/en/stable/ansible.html&quot;&gt;Mitogen for
    Ansible&lt;/a&gt; is a drop-in replacement for Ansible's lower tiers, netting
    huge speed and efficiency improvements for common playbooks.
    &lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;What's There&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;
    This initial series covers a widely compatible drop-in Ansible extension on
    Python 2.6, 2.7, and 3.6, a preview of the first value-added functionality
    for Ansible (&lt;a target=&quot;_blank&quot; href=&quot;https://mitogen.readthedocs.io/en/stable/ansible.html#connection-delegation&quot;&gt;Connection
    Delegation&lt;/a&gt;), and a freeze of the underlying library required to support
    it.
    &lt;/p&gt;

    &lt;p&gt;
    With the exception of some gotchas listed in the &lt;a target=&quot;_blank&quot; href=&quot;https://mitogen.readthedocs.io/en/stable/changelog.html&quot;&gt;release
    notes&lt;/a&gt;, you should expect the Ansible extension to &lt;em&gt;just work&lt;/em&gt;,
    and if it doesn't &lt;a target=&quot;_blank&quot; href=&quot;https://goo.gl/yLKZiJ&quot;&gt;please let me know via
    GitHub&lt;/a&gt;.
    &lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;
    Refer to the posts under &lt;em&gt;Just Tuning In?&lt;/em&gt; below for a 1000 foot
    view of the direction this work is heading, but for an idea of how things
    are today, watch the first minute of this recording, demonstrating a
    loop-heavy configuration of Mitogen's tests executing against the local
    machine.
    &lt;/p&gt;

    &lt;p&gt;
    
        
    
    &lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;
    To install Mitogen for Ansible, just follow the &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mitogen.readthedocs.io/en/stable/ansible.html#installation&quot;&gt;5
    easy steps&lt;/a&gt;&lt;/strong&gt; in the documentation. For non-Ansible users the
    library is available from PyPI via &lt;code&gt;pip install mitogen&lt;/code&gt;.
    Introductory documentation for the library is very weak right now, it will
    improve over the course of the stable series.
    &lt;/p&gt;

    &lt;!--
    &lt;p&gt;&lt;strong&gt;Early User Feedback&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
    &lt;li&gt;&quot;With mitogen &lt;strong&gt;my playbook runtime went from 45 minutes to just
        under 3 minutes&lt;/strong&gt;. Awesome work!&quot;&lt;/li&gt;
    &lt;li&gt;&quot;The runtime was reduced from &lt;strong&gt;1.5 hours on 4 servers to just
        under 3 minutes&lt;/strong&gt;. Thanks!&quot;&lt;/li&gt;
    &lt;li&gt;&quot;Oh, performance improvement using Mitogen is &lt;strong&gt;huge&lt;/strong&gt;. As
        mentioned before, running with Mitogen enables takes 7m36 (give or take
        a few seconds). Without Mitogen, the same run takes 19m49! &lt;strong&gt;I'm not
        even deploying without Mitogen anymore&lt;/strong&gt; :)&quot;&lt;/li&gt;
    &lt;li&gt;&quot;&lt;strong&gt;Works like a charm&lt;/strong&gt;, thank you for your quick response&quot;&lt;/li&gt;
    &lt;li&gt;&quot;I tried it out. &lt;strong&gt;He is not kidding about the speed
        increase&lt;/strong&gt;.&quot;
    &lt;li&gt;&quot;I don't know what kind of dark magic @dmw_83 has done, but his Mitogen
        strategy took Clojars' Ansible runs from &lt;strong&gt;14 minutes to 2
        minutes&lt;/strong&gt;. I still can't quite believe it.&quot;&lt;/li&gt;
    &lt;/ul&gt;
    --&gt;

    &lt;p&gt;&lt;strong&gt;Thanks to all the supporters!&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;
    Mitogen development in 2018 was sponsored by a
    &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mitogen.readthedocs.io/en/stable/contributors.html&quot;&gt;fabulous
    group of individuals and businesses&lt;/a&gt;&lt;/strong&gt; through a crowdfunding
    campaign launched in February. Thanks to everyone who participated by
    pledging, testing, writing bug reports, and helping with upfront planning.
    A huge special thanks to the primary sponsor:
    &lt;/p&gt;

    &lt;div&gt;
        &lt;div&gt;
            &lt;img src=&quot;https://mitogen.readthedocs.io/en/stable/_images/cgi.svg&quot; height=&quot;110&quot; width=&quot;238&quot; /&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;p&gt;
            Founded in 1976, CGI is one of the world’s largest IT and business
            consulting services firms, helping clients achieve their goals,
            including becoming customer-centric digital organizations.
            &lt;/p&gt;

            &lt;p&gt;
            &lt;br clear=&quot;all&quot; /&gt;
            For career opportunities, please visit &lt;a target=&quot;_blank&quot; href=&quot;https://cgi-group.co.uk/defence-and-intelligence-opportunities&quot;&gt;cgi-group.co.uk/defence-and-intelligence-opportunities&lt;/a&gt;.
            &lt;/p&gt;

            &lt;p&gt;
            To &lt;a target=&quot;_blank&quot; href=&quot;https://cgi.njoyn.com/CGI/xweb/XWeb.asp?page=jobdetails&amp;CLID=21001&amp;SBDID=21814&amp;jobid=J0118-0787&quot;&gt;directly
            apply&lt;/a&gt; to a UK team currently using Mitogen, contact us
            regarding &lt;a target=&quot;_blank&quot; href=&quot;https://cgi.njoyn.com/CGI/xweb/XWeb.asp?page=jobdetails&amp;CLID=21001&amp;SBDID=21814&amp;jobid=J0118-0787&quot;&gt;Open
            Source Developer/DevOps&lt;/a&gt; opportunities.
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;strong&gt;What's next&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;
    Feature work will resume after most issues are ironed out of the stable
    series -- in particular I'm expecting more bugs around Python 3 and cross
    2/3 interoperability. Once 0.2.x looks solid, one important goal is a
    complete and widely compatible Connection Delegation feature, including a
    rewrite of the &lt;code&gt;fakessh&lt;/code&gt; component to support transparent use of
    the &lt;code&gt;synchronize&lt;/code&gt; module.
    &lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Just tuning in?&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
    &lt;li&gt;2017-09-15: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2017-09-15-mitogen-an-infrastructure-code-baseline-that.html&quot;&gt;Mitogen, an infrastructure code baseline that sucks less&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2018-03-06: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-03-06-quadrupling-ansible-performance-with-mitogen.html&quot;&gt;Quadrupling Ansible performance with Mitogen&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2018-03-28: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-03-28-crowdfunding-mitogen-day-23.html&quot;&gt;Crowdfunding Mitogen: day 23&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2018-04-20: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-04-20-crowfunding-mitogen-day-46.html&quot;&gt;Crowdfunding Mitogen: day 46&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2018-05-23: &lt;a target=&quot;_blank&quot; href=&quot;https://sweetness.hmmz.org/2018-05-23-mitogen-for-ansible-status-23-may.html&quot;&gt;Mitogen for Ansible status, 23 May&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;
    Until next time!
    &lt;/p&gt;</content:encoded>
	<dc:date>2018-07-10T17:08:00+00:00</dc:date>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/07/09/golfing-for-fizzbuzz-in-clojure-and-elixir/">
	<title>Pete Corey (petecorey): Golfing for FizzBuzz in Clojure and Elixir</title>
	<link>http://www.petecorey.com/blog/2018/07/09/golfing-for-fizzbuzz-in-clojure-and-elixir/</link>
	<content:encoded>&lt;p&gt;I recently came across &lt;a href=&quot;https://gist.github.com/krisajenkins/3333741&quot;&gt;this riff on the FizzBuzz problem written in Clojure&lt;/a&gt;. While it’s admittedly not terribly obvious what’s going on, I thought it was a novel solution to &lt;a href=&quot;https://en.wikipedia.org/wiki/Fizz_buzz&quot;&gt;the FizzBuzz problem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How could we recreate this solution using &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;? There are some obvious similarities between Clojure’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;/code&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html#cycle/1&quot;&gt;Elixir’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;. As someone who’s always been a fanboy of Lisp syntax, which solution would I prefer?&lt;/p&gt;

&lt;p&gt;There’s only one way to find out…&lt;/p&gt;

&lt;h2 id=&quot;but-first-an-explanation&quot;&gt;But First, an Explanation&lt;/h2&gt;

&lt;p&gt;Before we dive into our Elixir solution, we should work out what exactly this Clojure solution is doing:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
(clojure.pprint/pprint
  (map vector
    (range 25)
    (cycle [:fizz :_ :_])
    (cycle [:buzz :_ :_ :_ :_])))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clojure’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;clojure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;/code&gt; obviously just prints whatever’s passed into it. In this case, we’re printing the result of this expression:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
(map vector
  (range 25)
  (cycle [:fizz :_ :_])
  (cycle [:buzz :_ :_ :_ :_])))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what exactly’s happening here? Clojure’s &lt;a href=&quot;https://clojuredocs.org/clojure.core/map&quot;&gt;&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; function is interesting. It let’s you map a function over any number of collections. The result of the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;/code&gt;  expression is the result of applying the function to each of the first values of each collection, followed by the result of applying the mapped function to each of the second values, and so on.&lt;/p&gt;

&lt;p&gt;In this case, we’re mapping the &lt;a href=&quot;https://clojuredocs.org/clojure.core/vector&quot;&gt;&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; function over three collections: the range of numbers from zero to twenty four (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;), &lt;a href=&quot;https://clojuredocs.org/clojure.core/cycle&quot;&gt;the infinite cycle&lt;/a&gt; of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:fizz&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;/code&gt;, and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;/code&gt; (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fizz&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;), and the infinite cycle of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:buzz&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;/code&gt; (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:buzz&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Mapping &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;/code&gt; over each of these collections creates a vector for each index, and whether it should display Fizz, Buzz, or FizzBuzz for that particular index.&lt;/p&gt;

&lt;p&gt;The result looks just like we’d expect:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
([0 :fizz :buzz]
 [1 :_ :_]
 [2 :_ :_]
 [3 :fizz :_]
 [4 :_ :_]
 [5 :_ :buzz]
 ...
 [24 :fizz :_])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;an-elixir-solution&quot;&gt;An Elixir Solution&lt;/h2&gt;

&lt;p&gt;So how would we implement this style of FizzBuzz solution using Elixir? As we mentioned earlier, Elixir’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; function is almost identical to Clojure’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;/code&gt;. Let’s start there.&lt;/p&gt;

&lt;p&gt;We’ll make two cycles of our Fizz and Buzz sequences:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Stream.cycle([:fizz, :_, :_])
Stream.cycle([:buzz, :_, :_, :_, :_])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On their own, these two cycles don’t do much.&lt;/p&gt;

&lt;p&gt;Let’s use &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html#zip/2&quot;&gt;&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; to effectively perform the same operation as Clojure’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Stream.zip(Stream.cycle([:fizz, :_, :_]), Stream.cycle([:buzz, :_, :_, :_, :_])) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can print the first twenty five pairs by piping our zipped streams into &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; and printing the result with &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
Stream.zip(Stream.cycle([:fizz, :_, :_]), Stream.cycle([:buzz, :_, :_, :_, :_])) 
|&amp;gt; Enum.take(25)
|&amp;gt; IO.inspect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our result looks similar:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[
  fizz: :buzz,
  _: :_,
  _: :_,
  fizz: :_,
  _: :_,
  _: :buzz,
  ...
  fizz: :_
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While our solution works, I’m not completely happy with it.&lt;/p&gt;

&lt;h2 id=&quot;polishing-our-solution&quot;&gt;Polishing Our Solution&lt;/h2&gt;

&lt;p&gt;For purely aesthetic reasons, let’s import the function’s we’re using from &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
import Stream, only: [cycle: 1, zip: 2]
import Enum, only: [take: 2]
import IO, only: [inspect: 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This simplifies the visual complexity of our solution:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
zip(cycle([:fizz, :_, :_]), cycle([:buzz, :_, :_, :_, :_]))
|&amp;gt; take(25)
|&amp;gt; inspect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we can take it one step further.&lt;/p&gt;

&lt;div class=&quot;post-footer&quot;&gt;
    &lt;div class=&quot;signup-form&quot;&gt;
        &lt;form action=&quot;http://east5th.us11.list-manage.com/subscribe/post?u=f8833fd40e2b1b28545d9f382&amp;id=c56ceba687&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; target=&quot;_blank&quot;&gt;
            &lt;p&gt;Sign up for &lt;a href=&quot;http://www.petecorey.com/newsletter&quot;&gt;Pete's mailing list&lt;/a&gt; and have fresh content delivered to you, hot off the presses every week!&lt;/p&gt;
            &lt;div class=&quot;email-wrapper&quot;&gt;
                &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;FNAME&quot; class=&quot;&quot; id=&quot;mce-FNAME&quot; /&gt;&lt;!--
                                                                                                           --&gt;&lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; id=&quot;mce-EMAIL&quot; /&gt;&lt;!--
                                                                                                                                                                                                    --&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; /&gt;
            &lt;/div&gt;
            &lt;div&gt;&lt;input type=&quot;text&quot; name=&quot;b_f8833fd40e2b1b28545d9f382_c56ceba687&quot; tabindex=&quot;-1&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Rather than using &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;, which expects a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;/code&gt; argument, let’s use &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html#zip/1&quot;&gt;&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, which expects to be passed an enumerable of streams:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
[
  cycle([:fizz, :_, :_]),
  cycle([:buzz, :_, :_, :_, :_])
]
|&amp;gt; zip
|&amp;gt; take(25)
|&amp;gt; inspect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s our final solution.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;To be honest, I’ve been having troubles lately coming to terms with some of Elixir’s aesthetic choices. As someone who’s always admired the simplicity of Lisp syntax, I fully expected myself to prefer the Clojure solution over the Elixir solution.&lt;/p&gt;

&lt;p&gt;That being said, I hugely prefer the Elixir solution we came up with!&lt;/p&gt;

&lt;p&gt;The overall attack plan of the algorithm is much more apparent. It’s immediately clear that we start with two cycles of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:fizz&lt;/span&gt;&lt;/code&gt;/&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:buzz&lt;/span&gt;&lt;/code&gt; and some number of empty atoms. From there, we zip together the streams and take the first twenty five results. Lastly, we inspect the result.&lt;/p&gt;

&lt;p&gt;Which solution do you prefer?&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-09T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/07/09/ping-pong-and-unresponsive-bitcoin-nodes/">
	<title>Pete Corey (petecorey): Ping, Pong, and Unresponsive Bitcoin Nodes</title>
	<link>http://www.petecorey.com/blog/2018/07/09/ping-pong-and-unresponsive-bitcoin-nodes/</link>
	<content:encoded>&lt;p&gt;The last piece of low-hanging fruit required to finish up the connectivity of our in-progress, &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;Elixir-powered&lt;/a&gt; Bitcoin node is to implement a system to detect unresponsive peer connections and prune them from our list of active peers.&lt;/p&gt;

&lt;p&gt;Once an inactive peer is removed, our current system will automatically connect to a new peer to take its place.&lt;/p&gt;

&lt;p&gt;There are several potential solutions for building out this kind of timeout system, and I’ve been weighing their pros and cons in the back of my mind for several weeks. I think I’ve come to a relatively simple and elegant solution that tackles the problem with minimal technical and mental overhead.&lt;/p&gt;

&lt;p&gt;Let’s dive in!&lt;/p&gt;

&lt;h2 id=&quot;who-cares-about-unresponsive-nodes&quot;&gt;Who Cares About Unresponsive Nodes?&lt;/h2&gt;

&lt;p&gt;In its current state, our Bitcoin node will connect to &lt;a href=&quot;https://github.com/bitcoin/bitcoin/blob/23e7fe8be827cdcdcace2a77ecc683074b97f8a2/src/net.h#L70-L71&quot;&gt;up to one hundred twenty five peer nodes&lt;/a&gt;. We assume that each of these nodes is a fully functioning and active part of the Bitcoin peer-to-peer network. If we don’t receive any messages from them, or if messages dwindle over time, we just assume that the network doesn’t have much to tell us.&lt;/p&gt;

&lt;p&gt;This assumption can lead to trouble. If we continue to persist our connections to unresponsive nodes, it’s conceivable that eventually every node we’re connected to will become unresponsive for some reason or another.&lt;/p&gt;

&lt;p&gt;At that point, our Bitcoin node is dead in the water. It’s unable to send or receive any information, and it’s unable to fetch any additional peers to reestablish its place in the peer-to-peer network. At this point our only course of action would be to restart the node and try again.&lt;/p&gt;

&lt;p&gt;And that’s not a very robust solution…&lt;/p&gt;

&lt;h2 id=&quot;detecting-slow-connections&quot;&gt;Detecting Slow Connections&lt;/h2&gt;

&lt;p&gt;Instead, we should be proactive about pruning unresponsive nodes from our set of peers. The first piece of low hanging fruit was can go after is adding a timeout to our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:gen_tcp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; call:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
:gen_tcp.connect(
  IP.to_tuple(state.ip),
  state.port,
  options,
  Application.get_env(:bitcoin_network, :timeout)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a node takes too long to respond to our initial connection request (in this case, &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:timeout&lt;/span&gt;&lt;/code&gt; is set to thirty seconds), we’ll retry the connection a few times and then ultimately remove the node from our set of peers.&lt;/p&gt;

&lt;h2 id=&quot;detecting-unresponsive-nodes&quot;&gt;Detecting Unresponsive Nodes&lt;/h2&gt;

&lt;p&gt;The next step in aggressively pruning our peer list is to watch for unresponsive nodes. We’ll do this by setting up a timeout between every message we receive from our peer. If we don’t receive another message before a certain cutoff time, we deem the peer unresponsive and break our connection.&lt;/p&gt;

&lt;p&gt;We’ll start by adding a call to a new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;refresh_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; helper function in our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:tcp&lt;/span&gt;&lt;/code&gt; info handler:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def handle_info({:tcp, _port, data}, state) do
  state = refresh_timeout(state)
  ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first time &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;refresh_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; is called, it schedules a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:timeout&lt;/span&gt;&lt;/code&gt; message to be sent to the current process after a certain amount of time. A reference to that timer is stored in the process’ current state:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp refresh_timeout(state) do
  timer = Process.send_after(self(), :timeout, Application.get_env(:bitcoin_network, :timeout))
  Map.put_new(state, :timer, timer)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subsequent calls to &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;refresh_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; cancel the existing timer, and create a new one:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp refresh_timeout(state = %{timer: timer}) do
  Process.cancel_timer(timer)
  refresh_timeout(Map.delete(state, :timer))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to add a callback to handle the scheduled &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:timeout&lt;/span&gt;&lt;/code&gt; message:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def handle_info(:timeout, state) do
  {:disconnect, :timeout, state}
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whenever we receive a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:timeout&lt;/span&gt;&lt;/code&gt; message, we simply kill the current process, effectively disconnecting the associated peer.&lt;/p&gt;

&lt;h2 id=&quot;ensuring-a-constant-stream-of-messages&quot;&gt;Ensuring A Constant Stream of Messages&lt;/h2&gt;

&lt;p&gt;So now we’re disconnecting peers if we don’t receive a message from them within a certain period of time (thirty seconds in my case), but we have no way of guaranteeing that we &lt;em&gt;should&lt;/em&gt; receive messages this frequently. What if there are no new blocks or transactions on the network?&lt;/p&gt;

&lt;p&gt;To guarantee what we receive regular periodic messages, we need to set up a ping/pong loop.&lt;/p&gt;

&lt;div class=&quot;post-footer&quot;&gt;
    &lt;div class=&quot;signup-form&quot;&gt;
        &lt;form action=&quot;http://east5th.us11.list-manage.com/subscribe/post?u=f8833fd40e2b1b28545d9f382&amp;id=c56ceba687&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; target=&quot;_blank&quot;&gt;
            &lt;p&gt;Sign up for &lt;a href=&quot;http://www.petecorey.com/newsletter&quot;&gt;Pete's mailing list&lt;/a&gt; and have fresh content delivered to you, hot off the presses every week!&lt;/p&gt;
            &lt;div class=&quot;email-wrapper&quot;&gt;
                &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;FNAME&quot; class=&quot;&quot; id=&quot;mce-FNAME&quot; /&gt;&lt;!--
                                                                                                           --&gt;&lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; id=&quot;mce-EMAIL&quot; /&gt;&lt;!--
                                                                                                                                                                                                    --&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; /&gt;
            &lt;/div&gt;
            &lt;div&gt;&lt;input type=&quot;text&quot; name=&quot;b_f8833fd40e2b1b28545d9f382_c56ceba687&quot; tabindex=&quot;-1&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Every so often we’ll send our peer node a “ping” message. If they’re still responsive, they’ll immediately respond with a “pong”. The peer will ensure our responsiveness by sending their own “pings”, which we’re already responding to.&lt;/p&gt;

&lt;p&gt;According to the woefully under-documented Bitcoin protocol, we can’t send our first “ping” until we send back our “verack” message. Any messages sent prior to our “verack” will mark our node as “misbehaving” and risk a disconnection.&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp handle_payload(%Version{}, state) do
  with :ok &amp;lt;- Message.serialize(&quot;verack&quot;) |&amp;gt; send_message(state.socket),
       :ok &amp;lt;- Message.serialize(&quot;getaddr&quot;) |&amp;gt; send_message(state.socket),
       :ok &amp;lt;-
         Message.serialize(&quot;ping&quot;, %Ping{
           nonce: :crypto.strong_rand_bytes(8)
         })
         |&amp;gt; send_message(state.socket) do
    {:ok, state}
  else
    {:error, reason} -&amp;gt; {:error, reason, state}
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we’ve sent our “ping”, we can expect to receive a “pong” in reply. When we receive the peer’s “pong” response, we want to schedule another “ping” to be sent a short time in the future. We do this by scheduling a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:send_ping&lt;/span&gt;&lt;/code&gt; message to be sent to the current process after a short interval:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defp handle_payload(%Pong{}, state) do
  Process.send_after(self(), :send_ping, Application.get_env(:bitcoin_network, :ping_time))
  {:ok, state}
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:send_ping&lt;/span&gt;&lt;/code&gt; handler sends another “ping” message, completing the ping/pong cycle:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def handle_info(:send_ping, state) do
  with :ok &amp;lt;-
         Message.serialize(&quot;ping&quot;, %Ping{
           nonce: :crypto.strong_rand_bytes(8)
         })
         |&amp;gt; send_message(state.socket) do
    {:noreply, state}
  else
    {:error, reason} -&amp;gt; {:error, reason, state}
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s all there is to it!&lt;/p&gt;

&lt;p&gt;As long as &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:ping_time&lt;/span&gt;&lt;/code&gt; is reasonably less than our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:timeout&lt;/span&gt;&lt;/code&gt;, we should always have a constant stream of “ping” messages to keep our timeout timer from firing. If one of our peers ever fails to send their “pong”, we kill their corresponding &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt;&lt;/code&gt; process.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;As far as I’m concerned, that wraps up the networking portion of our in-progress Elixir-based Bitcoin node project. In the future we’ll turn our attention to the actual guts of a Bitcoin node: processing blocks and transactions.&lt;/p&gt;

&lt;p&gt;At some point we might also slap a fancy user interface on top of our node. Everything’s better with a great UI.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-09T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-08-12-28-47">
	<title>Unrelenting Technology (myfreeweb): I was wondering why replies sent with the Omnibear Micropub browser extension ended up...</title>
	<link>https://unrelenting.technology/notes/2018-07-08-12-28-47</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;I was wondering why replies sent with the &lt;a href=&quot;https://omnibear.com/&quot;&gt;Omnibear&lt;/a&gt; Micropub browser extension ended up with the URL &lt;code&gt;/replies/&lt;/code&gt; instead of the auto generated slug. Turns out Omnibear sends &lt;code&gt;mp-slug=&quot;&quot;&lt;/code&gt; and my server happily accepted the empty slug :D&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-08T12:28:47+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="http://beza1e1.tuxen.de/raspberry_rfid_music_player.html">
	<title>Andreas Zwinkau (qznc): My Raspberry Pi RF ID music player</title>
	<link>http://beza1e1.tuxen.de/raspberry_rfid_music_player.html</link>
	<content:encoded>&lt;p&gt;My electronics for the kids music player are complete and working.&lt;/p&gt;
    &lt;p&gt;&lt;a href=&quot;http://beza1e1.tuxen.de/raspberry_rfid_music_player.html&quot;&gt;Read full article!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://beza1e1.tuxen.de/img/rfid_player_electronics.jpg&quot; /&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-08T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-07-19-03-33">
	<title>Unrelenting Technology (myfreeweb): What's going on with this piece of Android UI. Why are the icons arranged...</title>
	<link>https://unrelenting.technology/notes/2018-07-07-19-03-33</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;What's going on with this piece of Android UI. Why are the icons arranged diagonally?? Why.&lt;/p&gt;

&lt;blockquote&gt;
&lt;img src=&quot;https://unrelentingtech.s3.dualstack.eu-west-1.amazonaws.com/89bd0f6d_IMG_20180707_031915.jpg&quot; alt=&quot;&quot; class=&quot;u-photo&quot; /&gt;
&lt;/blockquote&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-07T19:03:33+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-07-00-36-37">
	<title>Unrelenting Technology (myfreeweb): The web standards process is a weird thing. Something as complicated and incredible as...</title>
	<link>https://unrelenting.technology/notes/2018-07-07-00-36-37</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;The web standards process is a weird thing. Something as complicated and incredible as CSS Grid is already shipping everywhere… while something as mundane and simple as &lt;a href=&quot;https://github.com/WICG/web-share-target&quot;&gt;registering a website as a share target&lt;/a&gt; has been in the bikeshedding stage for two years already.&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-07T00:36:37+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-06-16-44-02">
	<title>Unrelenting Technology (myfreeweb): Compiled oxipng to WebAssembly, very little changes were required :) https://unrelentingtech.s3.dualstack.eu-west-1.amazonaws.com/b18de0b...</title>
	<link>https://unrelenting.technology/notes/2018-07-06-16-44-02</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;Compiled oxipng to WebAssembly, very &lt;a href=&quot;https://github.com/shssoichiro/oxipng/pull/112&quot;&gt;little&lt;/a&gt; &lt;a href=&quot;https://github.com/Frommi/miniz_oxide/issues/26&quot;&gt;changes&lt;/a&gt; were required :)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;responsive-container&quot;&gt;&lt;img src=&quot;https://unrelentingtech.s3.dualstack.eu-west-1.amazonaws.com/b18de0b9_wayland-screenshot-2018-07-05_16-33-27-fs8.png&quot; class=&quot;u-photo&quot; width=&quot;1276&quot; height=&quot;380&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-06T20:21:02+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="https://blog.asrpo.com/making_a_low_level_debugger_part_3">
	<title>asrpo (asrp): Making a low level (Linux) debugger, part 3: our first program</title>
	<link>https://blog.asrpo.com/making_a_low_level_debugger_part_3</link>
	<content:encoded>&lt;p&gt;This continues a series where we make a debugger and live editor for (re)creating assembly and C programs.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://blog.asrpo.com/making_a_low_level_debugger&quot;&gt;part 1&lt;/a&gt;, we got the assembly parts: read/write registers and memory, single step, single instruction execution, function calls (although not perfect), set/restore breakpoints, memory allocation and examining upcoming instructions.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://blog.asrpo.com/making_a_low_level_debugger_part_2&quot;&gt;part 2&lt;/a&gt;, we got the C parts: read/write variables using ptrace and memory maps, a C read-eval-print loop (REPL), line numbers from DWARF headers and undo using &lt;code&gt;fork()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Its now time to actually use our debugger/editor! We'll try to use it to write a C program.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-06T14:57:28+00:00</dc:date>
</item>
<item rdf:about="https://unrelenting.technology/notes/2018-07-05-21-10-59">
	<title>Unrelenting Technology (myfreeweb): I rewrote micro-panel (the &quot;admin panel&quot; for this site) from scratch with LitElement and...</title>
	<link>https://unrelenting.technology/notes/2018-07-05-21-10-59</link>
	<content:encoded>&lt;div&gt;




&lt;p&gt;I rewrote &lt;a href=&quot;https://github.com/myfreeweb/micro-panel&quot;&gt;micro-panel&lt;/a&gt; (the &quot;admin panel&quot; for this site) from scratch
with &lt;a href=&quot;https://github.com/Polymer/lit-element&quot;&gt;LitElement&lt;/a&gt; and no material design components.
It's really tiny now!
The minified bundle is 57kb (and that still includes &lt;a href=&quot;https://github.com/myfreeweb/codeflask-element&quot;&gt;a code editor&lt;/a&gt; with syntax highlighting).
The previous version was nearly 1mb.&lt;/p&gt;
&lt;p&gt;Also, the new version is a bit simplified: no iframe mode, only cookie auth.
And it doesn't wrap the whole page in an element, it's now more of a set of elements.&lt;/p&gt;
&lt;p&gt;Check out this piece of code, by the way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; close () {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;'animate'&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-string&quot;&gt;'finished'&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Animation.prototype) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.animate({&lt;span class=&quot;hljs-attr&quot;&gt;transform&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;'none'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'translateY(100vh)'&lt;/span&gt;]},
      {&lt;span class=&quot;hljs-attr&quot;&gt;duration&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;easing&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'ease-out'&lt;/span&gt;}).finished
  }
  &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.hidden = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

  &lt;/div&gt;</content:encoded>
	<dc:date>2018-07-05T21:10:59+00:00</dc:date>
	<dc:creator>Greg</dc:creator>
</item>
<item rdf:about="http://pepijndevos.nl/2018/07/05/futhark-python-gotta-go-faster">
	<title>Pepijn de Vos (pepijndevos): Futhark: Python gotta go faster</title>
	<link>http://pepijndevos.nl/2018/07/05/futhark-python-gotta-go-faster.html</link>
	<content:encoded>&lt;p&gt;While discussing the disappointing performance of my &lt;a href=&quot;http://pepijndevos.nl/2018/07/04/loefflers-discrete-cosine-transform-algorithm-in-futhark.html&quot;&gt;Futhark DCT&lt;/a&gt; on my “retro GPU”(Nvidia NVS 4200M) with Troels Henriksen, it came up that the Python backend has quite some calling overhead.&lt;/p&gt;

&lt;p&gt;Futhark can compile high-level functional code to very fast OpenCL, but Futhark is meant to be embedded in larger programs. So it provides a host library in C and Python that set up the GPU, transfer the memory, and run the code. It turns out the the Python backend based on PyOpenCL is quite a bit slower at this than the C backend.&lt;/p&gt;

&lt;p&gt;I wondered why the Python backend did not use the C one via FFI, and Troels mentioned that someone had done this for a specific program and saw modest performance gains. However, this does require a working compiler and OpenCL installation, rather than just a &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install PyOpenCL&lt;/code&gt;, so he argued that PyOpenCL is the easiest solution for the average data scientist.&lt;/p&gt;

&lt;p&gt;I figured I might be able to write a generic wrapper for the generated C code by feeding the generated header directly to CFFI. That worked on the first try, so that was nice. The hard part was writing a generic, yet efficient and Pythonic wrapper around the CFFI module.&lt;/p&gt;

&lt;p&gt;The first proof of concept required quite a few fragile hacks (pattern matching on function names and relying on the type and number of arguments to infer other things) But it worked! My DCT ran over twice as fast. Then, Troels, helpful as always, modified the generated code to reduce the number of required hacks. He then proceeded to port some of the demos and benchmarks, request some features, and contribute Python 2 support.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pepijndevos/futhark-pycffi&quot;&gt;futhark-ffi&lt;/a&gt; now supports all Futhark types on both Python 2 and 3, resulting in speedups of anywhere between 20% and 100% compared to the PyOpenCL backend. Programs that make many short calls benefit a lot, while programs that call large, long-running code benefit very little. The OpenCL code that runs is the same, only the calling overhead is reduced.&lt;/p&gt;

&lt;p&gt;One interesting change suggested by Troels is to not automatically convert Futhark to Python types. For my use case I just wanted to take a Numpy array, pass it to Futhark, and get a Numpy array back. But for a lot of other programs, the Futhark types are passed between functions unchanged, so not copying them between the GPU and CPU saves &lt;em&gt;a lot&lt;/em&gt; of time. There is even a compatibility shim that lets you use futhark-ffi with existing PyOpenCL code by merely changing the imports. An example of this can be seen &lt;a href=&quot;https://github.com/diku-dk/futhark-benchmarks/blob/e36913a4b76477526abc214488b38fa8466bda05/accelerate/fluid/fluid-gui.py#L13-L23&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After &lt;a href=&quot;https://futhark.readthedocs.io/en/latest/installation.html&quot;&gt;installing Futhark&lt;/a&gt;, you can simply get my library with &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;. (working OpenCL required)&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install futhark-ffi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Usage is as follows. First generate a C library, and build a Python binding for it&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;futhark-opencl &lt;span class=&quot;nt&quot;&gt;--library&lt;/span&gt; test.fut
build_futhark_ffi &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From there you can import both the CFFI-generated module and the library to run your Futhark code even faster!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;_test&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;futhark_ffi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Futhark&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Futhark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_futhark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2018-07-05T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://push.cx/?p=3334">
	<title>Peter Bhat Harkins (pushcx): NixOS on prgmr and Failing to Learn Nix</title>
	<link>https://push.cx/2018/nixos</link>
	<content:encoded>&lt;p&gt;
This is a writeup of my notes on how to get &lt;a href=&quot;https://nixos.org&quot;&gt;NixOS&lt;/a&gt; running on a VPS at &lt;a href=&quot;https://prgmr.com&quot;&gt;prgmr&lt;/a&gt;, followed by more general notes on this experiment in learning nix.
&lt;/p&gt;

&lt;h3&gt;Provision&lt;/h3&gt;

&lt;p&gt;
I went with the lowest tier, currently 1.25 GiB RAM, 15 GiB Disk for $5/month. I&amp;#8217;m only running &lt;a href=&quot;https://weechat.org&quot;&gt;weechat&lt;/a&gt; for irc/twitter/fediverse/slack and some miscellaneous small things. For &amp;#8220;pre-installed distribution&amp;#8221; I chose &amp;#8220;None (HVM)&amp;#8221;.
&lt;/p&gt;

&lt;h3&gt;Netboot to start install&lt;/h3&gt;

&lt;p&gt;
I ssh&amp;#8217;d into the management console, &lt;code&gt;ssh &lt;em&gt;[hostname]&lt;/em&gt;@&lt;em&gt;[hostname]&lt;/em&gt;.console.xen.prgmr.com&lt;/code&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;6 bootloader&lt;/li&gt;
  &lt;li&gt;4 netboot installer, pick nixos&lt;/li&gt;
  &lt;li&gt;0 twice for main menu&lt;/li&gt;
  &lt;li&gt;4 to power off&lt;/li&gt;
  &lt;li&gt;2 to start (see &amp;#8220;Booting&amp;#8221; below)&lt;/li&gt;
  &lt;li&gt;1 to log in as root with no password (relax, ssh is off)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Partition&lt;/h3&gt;

&lt;p&gt;
Surprisingly, the included 1.25 GB of RAM was not enough to run some nix commands.
I had to back up and recreate the box with some swap space.
I didn&amp;#8217;t think too hard about it, just guessed at 2 GB and it worked OK.
&lt;span class=&quot;marginnote update&quot;&gt;2018-07-09: Vaibhav Sagar suggested this is probably &lt;a href=&quot;https://github.com/NixOS/nix/issues/1681&quot;&gt;this known bug&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;


&lt;div class=&quot;wp-geshi-highlight-wrap5&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap4&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap3&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap2&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap&quot;&gt;&lt;div class=&quot;wp-geshi-highlight&quot;&gt;&lt;div class=&quot;bash&quot;&gt;&lt;pre class=&quot;de1&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;gdisk&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;dev&lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;xvda
&amp;nbsp;
  o to create gpt
&amp;nbsp;
  n to create swap partition
&amp;nbsp;
    Command &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;? &lt;span class=&quot;kw1&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;kw3&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt;: n
    Partition number &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;nu0&quot;&gt;128&lt;/span&gt;, default &lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt;: &lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;
    First sector &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;34&lt;/span&gt;-&lt;span class=&quot;nu0&quot;&gt;31457246&lt;/span&gt;, default = &lt;span class=&quot;nu0&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt; or &lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;+-&lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;kw2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;KMGTP&lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;:
    Last sector &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;2048&lt;/span&gt;-&lt;span class=&quot;nu0&quot;&gt;31457246&lt;/span&gt;, default = &lt;span class=&quot;nu0&quot;&gt;31457246&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt; or &lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;+-&lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;kw2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;KMGTP&lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;: +32M
    Current &lt;span class=&quot;kw3&quot;&gt;type&lt;/span&gt; is &lt;span class=&quot;st_h&quot;&gt;'Linux filesystem'&lt;/span&gt;
    Hex code or GUID &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;L to show codes, Enter = &lt;span class=&quot;nu0&quot;&gt;8300&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt;: EF02
    Changed &lt;span class=&quot;kw3&quot;&gt;type&lt;/span&gt; of partition to &lt;span class=&quot;st_h&quot;&gt;'BIOS boot partition'&lt;/span&gt;
&amp;nbsp;
    Command &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;? &lt;span class=&quot;kw1&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;kw3&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt;: n
    Partition number &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;2&lt;/span&gt;-&lt;span class=&quot;nu0&quot;&gt;128&lt;/span&gt;, default &lt;span class=&quot;nu0&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt;:
    First sector &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;34&lt;/span&gt;-&lt;span class=&quot;nu0&quot;&gt;31457246&lt;/span&gt;, default = &lt;span class=&quot;nu0&quot;&gt;67584&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt; or &lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;+-&lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;kw2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;KMGTP&lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;:
    Last sector &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;67584&lt;/span&gt;-&lt;span class=&quot;nu0&quot;&gt;31457246&lt;/span&gt;, default = &lt;span class=&quot;nu0&quot;&gt;31457246&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt; or &lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;+-&lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;kw2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;KMGTP&lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;: &lt;span class=&quot;re5&quot;&gt;-2G&lt;/span&gt;
    Current &lt;span class=&quot;kw3&quot;&gt;type&lt;/span&gt; is &lt;span class=&quot;st_h&quot;&gt;'Linux filesystem'&lt;/span&gt;
    Hex code or GUID &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;L to show codes, Enter = &lt;span class=&quot;nu0&quot;&gt;8300&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt;:
    Changed &lt;span class=&quot;kw3&quot;&gt;type&lt;/span&gt; of partition to &lt;span class=&quot;st_h&quot;&gt;'Linux filesystem'&lt;/span&gt;
&amp;nbsp;
    Command &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;? &lt;span class=&quot;kw1&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;kw3&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt;: n
    Partition number &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;3&lt;/span&gt;-&lt;span class=&quot;nu0&quot;&gt;128&lt;/span&gt;, default &lt;span class=&quot;nu0&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt;:
    First sector &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;34&lt;/span&gt;-&lt;span class=&quot;nu0&quot;&gt;31457246&lt;/span&gt;, default = &lt;span class=&quot;nu0&quot;&gt;27262976&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt; or &lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;+-&lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;kw2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;KMGTP&lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;:
    Last sector &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;27262976&lt;/span&gt;-&lt;span class=&quot;nu0&quot;&gt;31457246&lt;/span&gt;, default = &lt;span class=&quot;nu0&quot;&gt;31457246&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt; or &lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;+-&lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;kw2&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;KMGTP&lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;:
    Current &lt;span class=&quot;kw3&quot;&gt;type&lt;/span&gt; is &lt;span class=&quot;st_h&quot;&gt;'Linux filesystem'&lt;/span&gt;
    Hex code or GUID &lt;span class=&quot;br0&quot;&gt;&amp;#40;&lt;/span&gt;L to show codes, Enter = &lt;span class=&quot;nu0&quot;&gt;8300&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;&amp;#41;&lt;/span&gt;: &lt;span class=&quot;nu0&quot;&gt;8200&lt;/span&gt;
    Changed &lt;span class=&quot;kw3&quot;&gt;type&lt;/span&gt; of partition to &lt;span class=&quot;st_h&quot;&gt;'Linux swap'&lt;/span&gt;
&amp;nbsp;
  &lt;span class=&quot;kw2&quot;&gt;w&lt;/span&gt; to &lt;span class=&quot;kw2&quot;&gt;write&lt;/span&gt; and &lt;span class=&quot;kw3&quot;&gt;exit&lt;/span&gt;
&amp;nbsp;
mkswap &lt;span class=&quot;re5&quot;&gt;-L&lt;/span&gt; swap &lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;dev&lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;xvda3
&amp;nbsp;
swapon &lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;dev&lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;xvda3
&amp;nbsp;
mkfs.ext4 &lt;span class=&quot;re5&quot;&gt;-L&lt;/span&gt; root &lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;dev&lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;xvda2
&amp;nbsp;
&lt;span class=&quot;kw2&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;dev&lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;xvda2 &lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;mnt&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;




&lt;h3&gt;Configuring nix&lt;/h3&gt;

&lt;p&gt;
I generated the initial config and added a few &lt;a href=&quot;https://wiki.prgmr.com/mediawiki/index.php/NixOS&quot;&gt;prgmr-specific tweaks&lt;/a&gt;:
&lt;/p&gt;


&lt;div class=&quot;wp-geshi-highlight-wrap5&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap4&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap3&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap2&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap&quot;&gt;&lt;div class=&quot;wp-geshi-highlight&quot;&gt;&lt;div class=&quot;bash&quot;&gt;&lt;pre class=&quot;de1&quot;&gt;nixos-generate-config &lt;span class=&quot;re5&quot;&gt;--root&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;mnt
&amp;nbsp;
&lt;span class=&quot;kw3&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;mnt&lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;etc&lt;span class=&quot;sy0&quot;&gt;/&lt;/span&gt;nixos
&amp;nbsp;
&lt;span class=&quot;kw2&quot;&gt;vi&lt;/span&gt; configuration.nix&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;




&lt;p&gt;
Here&amp;#8217;s my tweaks:
&lt;/p&gt;


&lt;div class=&quot;wp-geshi-highlight-wrap5&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap4&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap3&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap2&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap&quot;&gt;&lt;div class=&quot;wp-geshi-highlight&quot;&gt;&lt;div class=&quot;nix&quot;&gt;&lt;pre class=&quot;de1&quot;&gt;  boot.loader.grub.device = &amp;quot;/dev/xvda&amp;quot;
&amp;nbsp;
  # prgmr console config:
  boot.loader.grub.extraConfig = &amp;quot;serial --unit=0 --speed=115200 ; terminal_input serial console ; terminal_output serial console&amp;quot;;
  boot.kernelParams = [&amp;quot;console=ttyS0&amp;quot;];
&amp;nbsp;
  environment.systemPackages = with pkgs; [
    bitlbee
    tmux
    weechat
    wget
    vim
  ];
&amp;nbsp;
  services.openssh.enable = true;
&amp;nbsp;
  networking.firewall.allowedTCPPorts = [ 22 ];
&amp;nbsp;
  sound.enable = false;
  services.xserver.enable = false;
  services.openssh.enable = true;
&amp;nbsp;
  users.extraUsers.pushcx = {
    name = &amp;quot;pushcx&amp;quot;;
    isNormalUser = true;
    extraGroups = [ &amp;quot;wheel&amp;quot; &amp;quot;disk&amp;quot; &amp;quot;systemd-journal&amp;quot; ];
    uid = 1000;
    openssh.authorizedKeys.keys = [ &amp;quot;[ssh public key here]&amp;quot; ];
  };&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;




&lt;p&gt;
Then I ran &lt;code&gt;nixos-install&lt;/code&gt; to install the system.
&lt;/p&gt;

&lt;h3&gt;Booting&lt;/h3&gt;

&lt;p&gt;
The NixOS manual says you should be able to run &lt;code&gt;reboot&lt;/code&gt; to boot to the new system, but something in xen doesn&amp;#8217;t reload the new boot code and I got the netboot again rather than the new system.
After talking to prgmr I found it worked if I pulled up the management console and did:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;6 -&gt; 1 boot from disk&lt;/li&gt;
  &lt;li&gt;then 4 to fully poweroff&lt;/li&gt;
  &lt;li&gt;then 2 to create/start&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
After this I had a running system that I could ssh into as a regular user.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://prgmr.com&quot;&gt;Prgmr&lt;/a&gt; donates hosting to &lt;a href=&quot;https://lobste.rs&quot;&gt;Lobsters&lt;/a&gt;,
but because &lt;a href=&quot;https://lobste.rs/u/alynpost&quot;&gt;Alan&lt;/a&gt; configured the hosting, this was my first time really using the system.
It was painless and getting support in #prgmr on Freenode was comfortable for me as a longtime IRC user.
I liked them before, and now I&amp;#8217;m happy to recommend them for no-nonsense VPS hosting.
&lt;/p&gt;

&lt;h2&gt;Nix/NixOS&lt;/h2&gt;

&lt;p&gt;
I did this setup because I&amp;#8217;ve been meaning to learn nix (the package manager) and NixOS (the Linux distribution built on nix) for a while.
As I &lt;a href=&quot;https://lobste.rs/s/p2b1gn/arch_linux_developer_friendly_operating#c_gda5mm&quot;&gt;commented on Lobsters&lt;/a&gt;, they look like they didn&amp;#8217;t start from manual configuration and automate that, they started from thinking hard about what system configuration is and encoded that.
(The final impetus was that I ran out of stored credit at Digital Ocean, hit several billing bugs trying to pay them, and couldn&amp;#8217;t contact support &amp;#8211; six tries in four mediums only got roboresponses.)
&lt;/p&gt;

&lt;p&gt;
The &lt;a href=&quot;https://nixos.org/nixos/manual/&quot;&gt;NixOS manual&lt;/a&gt; is solid and I had little trouble installing the OS.
It did a great job of working through a practical installation while explaining the underlying concepts.
&lt;/p&gt;

&lt;p&gt;
I then turned to the &lt;a href=&quot;https://nixos.org/nix/manual&quot;&gt;Nix manual&lt;/a&gt; to learn more about working with and creating packages and failed, even with help from the nixos IRC channel and issue tracker.
I think the fundamental cause is that it wasn&amp;#8217;t written for newbies to learn nix from; there&amp;#8217;s a man-page like approach where it only makes sense if you already understand it.
&lt;/p&gt;

&lt;p&gt;
Ultimately I was stopped because I needed to create a package for &lt;a href=&quot;https://github.com/kensanata/bitlbee-mastodon&quot;&gt;bitlbee-mastodon&lt;/a&gt; and &lt;a href=&quot;https://github.com/wee-slack/wee-slack&quot;&gt;weeslack&lt;/a&gt;. As is normal for a small distro, it hasn&amp;#8217;t packaged these kind of uncommon things (or complex desktop stuff like Chrome&lt;span class=&quot;marginnote update&quot;&gt;2018-07-16: I&amp;#8217;ve learned that Nix &lt;em&gt;does&lt;/em&gt; have a package for Chrome, but it doesn&amp;#8217;t appear in &lt;code&gt;nix-env&lt;/code&gt; searches or the &lt;a href=&quot;https://nixos.org/nixos/packages.html#chrome&quot;&gt;official package list&lt;/a&gt; because it&amp;#8217;s hidden by an option that is not referenced in system config files, user config files, the NixOS Manual, the Nix Manual, the man page for &lt;code&gt;nix-env&lt;/code&gt;, the package search site, or the the documentation of any other tool it hides packages from.&lt;/span&gt;) but I got the impression the selection grows daily.
I didn&amp;#8217;t want to install them manually (which I doubt would really work on NixOS), I wanted an exercise to learn packaging so I could package my own software and run NixOS on servers (the recent issues/PRs/commits on &lt;a href=&quot;https://github.com/lobsters/lobsters-ansible&quot;&gt;lobsters-ansible&lt;/a&gt; tell the tale of my escalating frustration at its design limitations).
&lt;/p&gt;

&lt;p&gt;
The manual&amp;#8217;s instructions to build and package GNU&amp;#8217;s &amp;#8220;hello world&amp;#8221; binary &lt;a href=&quot;https://github.com/NixOS/nix/issues/2259&quot;&gt;don&amp;#8217;t actually work&lt;/a&gt; (gory details there).
I got the strong impression that no one has ever sat down to watch a newbie work through this doc and see where they get confused; not only do fundamentals go unexplained and the samples not work, there&amp;#8217;s no discussion of common errors.
Frustratingly, it also conflates building a package with contributing to nixpkgs, the official NixOS package repository.
&lt;/p&gt;

&lt;p&gt;
Either this is a fundamental confusion in nix documentation or there&amp;#8217;s some undocumented assumption about what tools go where that I never understood.
As an example, I tried to run &lt;code&gt;nix-shell&lt;/code&gt; (which I think is the standard tool for debugging builds but it has expert-only docs) and it was described over in the &lt;a href=&quot;https://nixos.org/nixpkgs/manual/&quot;&gt;Nixpkgs Manual&lt;/a&gt; even though it&amp;#8217;s for all packaging issues.
To use the shell I have to understand &lt;a href=&quot;https://nixos.org/nixpkgs/manual/#sec-stdenv-phases&quot;&gt;&amp;#8220;phases&amp;#8221;&lt;/a&gt;, but some of the ones listed simply don&amp;#8217;t exist in the shell environment.
I can&amp;#8217;t guess if this a bug, out-dated docs, or incomplete docs.
And that&amp;#8217;s before I got to confusing &amp;#8220;you just have to know it&amp;#8221; issues like the &lt;code&gt;src&lt;/code&gt; attribute becoming &lt;code&gt;unpackPhase&lt;/code&gt; rather than &lt;code&gt;srcPhase&lt;/code&gt;, or &amp;#8220;learn from bitter experience&amp;#8221; issues like &lt;code&gt;nix-shell&lt;/code&gt; polluting the working directory and carrying state between build attempts.
(This is where I gave up.)
&lt;/p&gt;

&lt;p&gt;
I don&amp;#8217;t know how the NixOS Manual turned out so well; the rest of the docs have this fractal issue where, at every level of detail, every part of the system is incompletely or incorrectly described somewhere other than expected.
I backed up and reread the homepages and about pages to make sure I didn&amp;#8217;t miss a tutorial or other introduction that might have helped make sense of this, but found nothing besides these manuals.
If I sound bewildered and frustrated, then I&amp;#8217;ve accurately conveyed the experience.
I gave up trying to learn nix, even though it still looks like the only packaging/deployment system with the right perspective on the problems.
&lt;/p&gt;

&lt;p&gt;
I&amp;#8217;d chalk it up to nix being young, but there&amp;#8217;s some oddities that look like legacy issues.
For example, commands vary: it&amp;#8217;s &lt;code&gt;nix-env -i&lt;/code&gt; to install a package, but &lt;code&gt;nix-channel&lt;/code&gt; only has long options like &lt;code&gt;--add&lt;/code&gt;, and &lt;code&gt;nix-rebuild switch&lt;/code&gt; uses the more modern &amp;#8220;subcommand&amp;#8221; style.
With no coherent style, you have to memorize which commands use which syntax &amp;#8211; again, one of those things newbies stumble on but experts don&amp;#8217;t notice and may not even recognize as a problem.
&lt;/p&gt;

&lt;p&gt;
Finally, there&amp;#8217;s two closely-related issues in nix that look like misdesigns, or at least badly-missed opportunities.
I don&amp;#8217;t have a lot of confidence in these because, as recounted, I was unable to learn to use nix.
Mostly these are based on my 20 years of administrating Linux systems, especially the provisioning and devops work I&amp;#8217;ve done with Chef, Puppet, Ansible, Capistrano, and scripting that I&amp;#8217;ve done in the last 10.
Experience has led me to think that the hard parts of deployment and provisioning boil down to a running system being like a running program making heavy use of mutable global variables (eg. the filesystem):
the pain comes from unmanaged changes and surprisingly complex moving parts.
&lt;/p&gt;

&lt;p&gt;
The first issue is that Nix templatizes config files.
There&amp;#8217;s an example in my &lt;code&gt;configuration.nix&lt;/code&gt; notes above: rather than editing the grub config file, the system lifts copies from this config file to paste into a template of of grub&amp;#8217;s config file that must be hidden away somewhere.
So now instead of just knowing grub&amp;#8217;s config, you have to know it &lt;em&gt;plus&lt;/em&gt; what interface the packager decided to design on top of it by reading the package source (and I had to google to find that).
There&amp;#8217;s warts like &lt;code&gt;extraConfig&lt;/code&gt; that throw up their hands at the inevitable uncaptured complexity and offer a  interface to inject arbitrary text into the config.
I hope &amp;#8220;inject&amp;#8221; puts you in a better frame of mind than &amp;#8220;interface&amp;#8221;: this is &lt;a href=&quot;http://wiki.c2.com/?StringlyTyped&quot;&gt;stringly-typed&lt;/a&gt; text interpolation and a typo in the value means an error from grub rather than nix.
This whole thing must be a ton of extra work for packagers, and if there&amp;#8217;s a benefit over &lt;code&gt;vi /etc/default/grub&lt;/code&gt; it&amp;#8217;s not apparent (maybe in provisioning, though I never got to nixops).
&lt;/p&gt;

&lt;p&gt;
This whole system is both complex and incomplete, and it would evaporate if nix configured packages by providing a default config file in a package with a command to pull it into &lt;code&gt;/etc/nix&lt;/code&gt; or &lt;code&gt;/etc/nixos&lt;/code&gt; for you to edit and nix to copy back into the running system when you upgrade or switch.
This would lend itself very well to keeping the system config under version control, which is never suggested in the manual and doesn&amp;#8217;t seem to be integrated at any level of the tooling &amp;#8211; itself a puzzling omission, given the emphasis on repeatability.
&lt;/p&gt;

&lt;p&gt;
Second, to support this complexity, they developed their own programming language.
(My best guess &amp;#8211; I don&amp;#8217;t actually know which is the chicken and which is the egg.)
A nix config file isn&amp;#8217;t data, it&amp;#8217;s a turning-complete language with conditionals, loops, closures, scoping, etc.
Again, this must have been a ton of work to implement and a young, small-team programming language has all the obvious issues like no debugger, confusing un-googleable error messages that don&amp;#8217;t list filenames and line numbers, etc.; and then there&amp;#8217;s the learning costs to users.
Weirdly for a system inspired by functional programming, it&amp;#8217;s dynamically typed, so it feels very much like the featureset and limited tooling/community of JavaScript circa 1998.
In contrast to JavaScript, the nix programming language is only used by one project, so it&amp;#8217;s unlikely to see anything like the improvements in JS in last 20 years.
And while JavaScript would be an improvement over inventing a language, using Racket or Haskell to create a DSL would be a big improvement.
&lt;/p&gt;

&lt;p&gt;
These are two apparent missed opportunities, not fatal flaws.
Again, I wasn&amp;#8217;t able to learn nix to the level that I understand how and why it was designed this way, so I&amp;#8217;m not setting forth a strongly-held opinion.
They&amp;#8217;re really strange, expensive decisions that I don&amp;#8217;t see a compelling reason for, and they look like they&amp;#8217;d be difficult to change.
Probably they have already been beaten to death on a mailing list somewhere, but I&amp;#8217;m too frustrated by how much time I&amp;#8217;ve wasted to go looking.
&lt;/p&gt;

&lt;p&gt;
I&amp;#8217;ve scheduled a calendar reminder for a year from now to see if the manual improves or if &lt;a href=&quot;https://twitter.com/lucperkins/status/999007471141240832&quot;&gt;Luc Perkins&amp;#8217;s book&lt;/a&gt; is out.&lt;span class=&quot;marginnote&quot;&gt;2018-08-09: Apparently because I&amp;#8217;m a masochist, I wasted another eight hours trying Nix from the other direction.
Rather than try to build up from the basics I tried to start from the top down and create a &amp;#8220;Hello World&amp;#8221; Rails app.
I ran into another dozen code and documentation bugs without managing to get the current version of Ruby installed.
I pushed the reminder out to 2020.
&lt;/span&gt;
&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-04T18:30:05+00:00</dc:date>
</item>
<item rdf:about="http://pepijndevos.nl/2018/07/04/loefflers-discrete-cosine-transform-algorithm-in-futhark">
	<title>Pepijn de Vos (pepijndevos): Loefflers Discrete Cosine Transform algorithm in Futhark</title>
	<link>http://pepijndevos.nl/2018/07/04/loefflers-discrete-cosine-transform-algorithm-in-futhark.html</link>
	<content:encoded>&lt;p&gt;If you search for Loefflers algorithm you get a few academic papers, and for Futhark you get the Germanic runes. This post is a SEO masterpiece.&lt;/p&gt;

&lt;p&gt;Discrete Cosine Transform is a variation on the Discrete Fourier Transform. It is used in basically every lossy compression format ever. The reason DCT is preferred is that discrete transforms are cyclic. So the DFT has a jump at the edges of the data, where it wraps around. (this is why windowing is frequently used in DFT) This jump at the edges leads to a fat tail in the frequency spectrum, which does not compress well.&lt;/p&gt;

&lt;p&gt;The DCT constructs an “even” signal (mirrored around the 0 axis), so the signal is continuous at the edges. This leads to much lower high frequency coefficients. Lossy compression basically works by quantizing/masking/thresholding those coefficients, which produces many zeros at high frequencies. Long runs of zeros compress really well, so that’s what happens in most compression algorithms.&lt;/p&gt;

&lt;p&gt;I was playing a bit with compression, but found that &lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.fftpack.dct&lt;/code&gt; was not fast enough to my liking. Since I had recently discovered &lt;a href=&quot;https://futhark-lang.org/&quot;&gt;Futhark&lt;/a&gt;, which is an amazing ML-like functional programming language for GPU programming that compiles to OpenCL, I thought it’d be fun to implement the DCT in Futhark. Little did I know what I was getting myself into.&lt;/p&gt;

&lt;p&gt;After some searching, I found that Loefflers algorithm is the way to go. It’s what &lt;em&gt;everyone&lt;/em&gt; seems to be using, because for an 8-point DCT it obtains the theoretical lower bound of 11 multiplications. After chasing some references in more recent papers, I found the original: &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.463.3353&amp;rep=rep1&amp;type=pdf&quot;&gt;Practical fast 1-D DCT algorithms with 11 multiplications&lt;/a&gt;, and after days of struggling, I almost understood it.&lt;/p&gt;

&lt;p&gt;I knew that a Fast Fourier Transform is based on taking the DFT equation, and splitting it up in odd and even parts. If you keep doing this recursively (called decimation in time/decimation in frequency), you end up with this “butterfly” structure, which are additions of two “branches” scaled by some factor. For the DCT there are also butterflies, but also rotation blocks.&lt;/p&gt;

&lt;p&gt;It took a few mental leaps to understand that you can write the DCT or DFT in matrix form, express elementary row operations in matrix form, use those to factorize the DCT matrix, and derive an optimal implementation from this matrix factorization.&lt;/p&gt;

&lt;p&gt;The Futhark side of things was really fun. If you know a bit of functional programming, it’s really not hard, and you don’t need to know anything about OpenCL or GPU’s. I hopped on Gitter, and Troels Henriksen was super helpful. I’d come up with a problem, and a few hours later I’d &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; and the compiler got better.&lt;/p&gt;

&lt;p&gt;There were a few surprises though. Many array operations are basically free, by returning a view of the same array. But there is an underlying assumption that arrays are big, heap allocated, and parallelized relentlessly. Tuples, on the other hand, are assumed to be small, and register allocated. By rewriting my inner DCT structure from (tiny) arrays to using tuples, performance more than doubled.&lt;/p&gt;

&lt;p&gt;At first I tied to optimize my code to use in-place updates, but this was actually significantly &lt;em&gt;slower&lt;/em&gt; than out-of-place. By doing in-place updates, I force the compiler to do the operations completely sequentially, while normally it could do a lot in parallel. It turns out that moving data around is by far the slowest thing, and arithmetic is basically free. So the best way to write fast code is to move less data, not to worry about every addition.&lt;/p&gt;

&lt;p&gt;Actually implementing the DCT was really hard though. As I mentioned, searching for it brought up only academic papers, barely any working code. I managed to find two eventually: &lt;a href=&quot;https://github.com/norishigefukushima/dct_simd/blob/master/dct/dct8x8_simd.cpp&quot;&gt;dct_simd&lt;/a&gt; and &lt;a href=&quot;https://github.com/mozilla/mozjpeg&quot;&gt;mozjpeg&lt;/a&gt;. I actually ported the first one to Python to compare intermediate results with my own implementation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pydct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.414214&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.387040&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.306563&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.175876&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.785695&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.541196&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.275899&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;invsqrt2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.707107&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invsqrt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invsqrt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pyidct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.414214&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.387040&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.306563&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.175876&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.785695&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.541196&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.275899&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;z0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;z0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;b3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#return np.array([z0, z1, z2, z3])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#return np.array([a0, a1, a2, a3, b0, b1, b2, b3])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this code and staring at the paper, I learned a few things. First of all &lt;strong&gt;figure 1 is wrong&lt;/strong&gt;. The rotate block should be &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt(2)c6&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt(2)c1&lt;/code&gt;. Another small detail is the dashed lines, meaning that &lt;strong&gt;some butterflies are upside down&lt;/strong&gt;. Another one is the rotate block symbol. It says &lt;code class=&quot;highlighter-rouge&quot;&gt;kcn&lt;/code&gt;, which are the &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; in the block equation, &lt;em&gt;not&lt;/em&gt; the one in the DCT equation, which confused me a lot. So for &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt(2)c6&lt;/code&gt; you just substitute &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt(2)&lt;/code&gt; and 6 in the rotation block. I noted down some more insights in response to a &lt;a href=&quot;https://dsp.stackexchange.com/questions/28209/fast-dct-implementation/50223#50223&quot;&gt;two year old question about the paper on the DSP StackExchange&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having implemented the forward DCT from the paper, I moved on to the inverse. All information the paper has about this is “just do everything backwards”. Thanks, paper. It turns out you use the &lt;strong&gt;same&lt;/strong&gt; blocks, but in the reverse order, except… the rotate block &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt;. The inverse cosine transform has a negative angle, and this translates to &lt;code class=&quot;highlighter-rouge&quot;&gt;cos(-x)=cos(x)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sin(-x)=-sin(x)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;type octet 't = [8]t
type f32octet = octet f32

let butterfly (a: f32) (b: f32) : (f32, f32) =
  (a+b, a-b)

let mk_coef (k:f32) (n:i32) : f32 =
  k*f32.cos ((r32 n)*f32.pi/16)

let coefr = map (mk_coef (f32.sqrt 2)) &amp;lt;| iota 8
let coef1 = map (mk_coef 1) &amp;lt;| iota 8

let rotate (sin_coef: f32) (cos_coef: f32) (a: f32) (b: f32): (f32, f32) =
  (a*cos_coef + b*sin_coef,
   b*cos_coef - a*sin_coef)

entry fdct8 (a: f32octet) : f32octet  =
  -- stage 1
  let (st1_0, st1_7) = butterfly a[0] a[7]
  let (st1_1, st1_6) = butterfly a[1] a[6]
  let (st1_2, st1_5) = butterfly a[2] a[5]
  let (st1_3, st1_4) = butterfly a[3] a[4]
  -- even part, stage 2
  let (st2_0, st2_3) = butterfly st1_0 st1_3
  let (st2_1, st2_2) = butterfly st1_1 st1_2
  -- stage 3
  let (y0, y4)   = butterfly st2_0 st2_1
  let (y2, y6)   = rotate coefr[2] coefr[6] st2_2 st2_3
  -- odd part, stage 2
  let (st2_4, st2_7)   = rotate coef1[5] coef1[3] st1_4 st1_7
  let (st2_5, st2_6)   = rotate coef1[7] coef1[1] st1_5 st1_6
  -- stage 3
  let (st3_4, st3_6)   = butterfly st2_4 st2_6
  let (st3_7, st3_5)   = butterfly st2_7 st2_5
  -- stage 4
  let (y1, y7)   = butterfly st3_7 st3_4
  let y3  = f32.sqrt(2)*st3_5
  let y5  = f32.sqrt(2)*st3_6
  in [y0, y4, y2, y6, y7, y3, y5, y1]


entry idct8 (a: f32octet) : f32octet  =
  -- odd part, stage 4
  let (st4_7, st4_4)   = butterfly a[7] a[4]
  let st4_5 = f32.sqrt(2)*a[5]
  let st4_6 = f32.sqrt(2)*a[6]
  -- stage 3
  let (st3_4, st3_6)   = butterfly st4_4 st4_6
  let (st3_7, st3_5)   = butterfly st4_7 st4_5
  -- stage 2
  let (st2_4, st2_7)   = rotate (-coef1[5]) coef1[3] st3_4 st3_7
  let (st2_5, st2_6)   = rotate (-coef1[7]) coef1[1] st3_5 st3_6
  -- even part, stage 3
  let (st3_0, st3_1)   = butterfly a[0] a[1]
  let (st3_2, st3_3)   = rotate (-coefr[2]) coefr[6] a[2] a[3]
  -- stage 2
  let (st2_0, st2_3) = butterfly st3_0 st3_3
  let (st2_1, st2_2) = butterfly st3_1 st3_2
  -- stage 1
  let (st1_0, st1_7) = butterfly st2_0 st2_7
  let (st1_1, st1_6) = butterfly st2_1 st2_6
  let (st1_2, st1_5) = butterfly st2_2 st2_5
  let (st1_3, st1_4) = butterfly st2_3 st2_4
  in [st1_0/8, st1_1/8, st1_2/8, st1_3/8, st1_4/8, st1_5/8, st1_6/8, st1_7/8]&lt;/code&gt;&lt;/pre&gt;</content:encoded>
	<dc:date>2018-07-04T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/07/02/making-noise-with-j/">
	<title>Pete Corey (petecorey): Making Noise with J</title>
	<link>http://www.petecorey.com/blog/2018/07/02/making-noise-with-j/</link>
	<content:encoded>&lt;p&gt;I’ve always been fascinated by live-coded music. Frameworks like &lt;a href=&quot;http://chuck.cs.princeton.edu/&quot;&gt;Chuck&lt;/a&gt;, &lt;a href=&quot;https://supercollider.github.io/&quot;&gt;Supercollider&lt;/a&gt;, &lt;a href=&quot;http://overtone.github.io/&quot;&gt;Overtone&lt;/a&gt;, &lt;a href=&quot;https://extemporelang.github.io/&quot;&gt;Extempore&lt;/a&gt;, and &lt;a href=&quot;https://sonic-pi.net/&quot;&gt;Sonic PI&lt;/a&gt;, along with popular performers and musicians like &lt;a href=&quot;https://www.youtube.com/watch?v=KJPdbp1An2s&quot;&gt;Sam Aaron&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=GSGKEy8vHqg&quot;&gt;Andrew Sorensen&lt;/a&gt; have never ceased to amaze and inspire me.&lt;/p&gt;

&lt;p&gt;That said, whenever I’ve tried to use one of those tools or frameworks to create my own music, I’ve always quickly given up. Maybe it’s because I’m just lazy and learning new things is hard, but I’ve always told myself that it’s because the tools I was using &lt;em&gt;just didn’t fit&lt;/em&gt; with how I felt programming music should be. Syntactically, ergonomically, and conceptually, the tools just didn’t jive.&lt;/p&gt;

&lt;p&gt;And then I stumbled across &lt;a href=&quot;http://jsoftware.com/&quot;&gt;J&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;J and &lt;a href=&quot;https://en.wikipedia.org/wiki/APL_(programming_language)&quot;&gt;the entire family of APL languages&lt;/a&gt; have a beautiful terseness and closeness to the data being operated on. They’re also fundamentally designed to operate on arrays, a data structure ripe for musical interpretation. I’ve convinced myself that if I can learn J, I’ll be able to build the live coding environment of my dreams!&lt;/p&gt;

&lt;p&gt;That’s a big goal, but I’m taking baby steps to get there. Today, I’ll show you how I managed to make noise with J.&lt;/p&gt;

&lt;h2 id=&quot;making-noise-without-j&quot;&gt;Making Noise Without J&lt;/h2&gt;

&lt;p&gt;My plan for making noise with J doesn’t actually involve my J software producing any noise directly. Instead, it’ll act as a controller that instructs other software on my machine to make noise on its behalf.&lt;/p&gt;

&lt;p&gt;The software making the noise will be &lt;a href=&quot;http://notahat.com/simplesynth/&quot;&gt;SimpleSynth&lt;/a&gt;, which is a small, easy to use MIDI synthesizer. If you’re following along, feel free to use any other MIDI synth you’d like, or a full audio workstation like &lt;a href=&quot;https://www.ableton.com/en/&quot;&gt;Ableton&lt;/a&gt; or even &lt;a href=&quot;https://www.apple.com/mac/garageband/&quot;&gt;GarageBand&lt;/a&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/making-noise-with-j/1.png&quot; /&gt;
  &lt;p&gt;SimpleSynth.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;When we fire up SimpleSynth, it’ll ask which MIDI source it should use. &lt;a href=&quot;https://en.wikipedia.org/wiki/MIDI&quot;&gt;MIDI&lt;/a&gt; is a protocol that lets us pass around musical information, like when and how loud certain notes should be played, between different devices. SimpleSynth is asking which stream of notes it should listen to and play.&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/making-noise-with-j/3.png&quot; /&gt;
  &lt;p&gt;Setting up our J virtual device in MIDI Studio.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I used MacOS’ built-in MIDI Studio to create a virtual MIDI channel called “J”, with a MIDI port called “Bus 1.” After making sure the virtual device was online, I selected it in SimpleSynth.&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/making-noise-with-j/2.png&quot; /&gt;
  &lt;p&gt;Selecting our J virtual device in SimpleSynth.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The last piece of the puzzle is finding some way of programmatically sending MIDI messages through my “J Bus 1” to be played by SimpleSynth. Geert Bevin’s &lt;a href=&quot;https://github.com/gbevin/SendMIDI&quot;&gt;SendMIDI&lt;/a&gt; command line tool did just the trick.&lt;/p&gt;

&lt;p&gt;Once installed, we can use SendMIDI to send MIDI notes to SimpleSynth from our command line:&lt;/p&gt;

&lt;pre class=&quot;language-j&quot;&gt;&lt;code class=&quot;language-j&quot;&gt;sendmidi dev &quot;J Bus 1&quot; on 60 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Turning &lt;code class=&quot;language-j&quot;&gt;on&lt;/code&gt; note &lt;code class=&quot;language-j&quot;&gt;60&lt;/code&gt;, with a velocity of &lt;code class=&quot;language-j&quot;&gt;100&lt;/code&gt; effectively plays a middle C at full volume.&lt;/p&gt;

&lt;p&gt;Now we’re making music!&lt;/p&gt;

&lt;h2 id=&quot;talking-to-sendmidi-with-j&quot;&gt;Talking to SendMIDI with J&lt;/h2&gt;

&lt;p&gt;The next challenge lies in getting J to execute &lt;code class=&quot;language-j&quot;&gt;sendmidi&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;After much searching and head scratching, I learned that J exposes &lt;a href=&quot;https://twitter.com/seanstickle/status/1000766939193634825&quot;&gt;a wide range of miscellaneous functionality&lt;/a&gt; under &lt;a href=&quot;http://www.jsoftware.com/help/dictionary/d412.htm&quot;&gt;the “foreigns” (&lt;code class=&quot;language-j&quot;&gt;!:&lt;/code&gt;) verb&lt;/a&gt;. Calling &lt;code class=&quot;language-j&quot;&gt;2!:1 y&lt;/code&gt; lets you spawn a new process, running whatever command you pass in through &lt;code class=&quot;language-j&quot;&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s try invoking our spawn verb with our &lt;code class=&quot;language-j&quot;&gt;sendmidi&lt;/code&gt; command:&lt;/p&gt;

&lt;pre class=&quot;language-j&quot;&gt;&lt;code class=&quot;language-j&quot;&gt;   2!:1 'sendmidi dev &quot;J Bus 1&quot; on 60 100'
|interface error
|       2!:1'sendmidi dev &quot;J Bus 1&quot; on 60 100'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After even more searching and head scratching, I realized that I needed to use the fully-qualified &lt;code class=&quot;language-j&quot;&gt;sendmidi&lt;/code&gt; path when making the call:&lt;/p&gt;

&lt;pre class=&quot;language-j&quot;&gt;&lt;code class=&quot;language-j&quot;&gt;   2!:1 '/usr/local/bin/sendmidi dev &quot;J Bus 1&quot; on 60 100'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hear sound! Success!&lt;/p&gt;

&lt;h2 id=&quot;making-music-with-j&quot;&gt;Making Music with J&lt;/h2&gt;

&lt;p&gt;While this is great, it’s not much better just running our &lt;code class=&quot;language-j&quot;&gt;sendmidi&lt;/code&gt; command directly from the command line. What would make things even better is if we could build ourselves a &lt;code class=&quot;language-j&quot;&gt;play&lt;/code&gt; verb that plays any notes passed to it.&lt;/p&gt;

&lt;p&gt;For example, if I were to run:&lt;/p&gt;

&lt;pre class=&quot;language-j&quot;&gt;&lt;code class=&quot;language-j&quot;&gt;   play 60 64 67
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’d expect J to construct and execute our &lt;code class=&quot;language-j&quot;&gt;sendmidi&lt;/code&gt; command, which should play a C major chord:&lt;/p&gt;

&lt;pre class=&quot;language-j&quot;&gt;&lt;code class=&quot;language-j&quot;&gt;sendmidi dev &quot;J Bus 1&quot; on 60 100 on 64 100 on 67 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a few brain-expanding weekends of playing around in J, I came up with this version of the &lt;code class=&quot;language-j&quot;&gt;play&lt;/code&gt; verb:&lt;/p&gt;

&lt;pre class=&quot;language-j&quot;&gt;&lt;code class=&quot;language-j&quot;&gt;   on =: ('on ',5|.' 100 ',&quot;:)&quot;0
   play =: [:2!:1'/usr/local/bin/sendmidi dev &quot;J Bus 1&quot; ',[:,/on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-j&quot;&gt;on&lt;/code&gt; verb turns an integer note into an “on string” of the format, &lt;code class=&quot;language-j&quot;&gt;'on &amp;lt;note&amp;gt; 100 '&lt;/code&gt;, and the &lt;code class=&quot;language-j&quot;&gt;play&lt;/code&gt; verb spawns the result of appending &lt;code class=&quot;language-j&quot;&gt;'/usr/local/bin/sendmidi ...'&lt;/code&gt; to append mapped over &lt;code class=&quot;language-j&quot;&gt;on&lt;/code&gt; applied to &lt;code class=&quot;language-j&quot;&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Put simply, it constructs our &lt;code class=&quot;language-j&quot;&gt;sendmidi&lt;/code&gt; command and executes it.&lt;/p&gt;

&lt;p&gt;We can play a C major chord:&lt;/p&gt;

&lt;pre class=&quot;language-j&quot;&gt;&lt;code class=&quot;language-j&quot;&gt;   play 60 64 67
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or any other chord we want:&lt;/p&gt;

&lt;pre class=&quot;language-j&quot;&gt;&lt;code class=&quot;language-j&quot;&gt;   play 60 63 54 70 73
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Please keep in mind that I’m very new to J, and even newer to tacit programming. If you see anything that can be improved, clarified, or corrected, please &lt;a href=&quot;https://twitter.com/petecorey&quot;&gt;let me know&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I still feel very clunky and slow when it comes to using J. Building this two line program took hours of my time. That said, I feel like there is potential here. As I grow more used to the tacit paradigm and play with other ways of interacting to DAWs and other audio producers, I feel like J might turn into my ideal music creation environment.&lt;/p&gt;

&lt;p&gt;Time will tell.&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-02T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://asylum.madhouse-project.org/blog/2018/07/01/kaleidoscope-progress-report/">
	<title>Gergely Nagy (algernon): Kaleidoscope progress report: 2017-12-01 - 2018-07-01</title>
	<link>https://asylum.madhouse-project.org/blog/2018/07/01/kaleidoscope-progress-report/</link>
	<content:encoded>&lt;p&gt;It's &lt;a href=&quot;https://asylum.madhouse-project.org/blog/2017/12/02/kaleidoscope-progress-report/&quot;&gt;been a while&lt;/a&gt; I wrote about what's happening with &lt;a href=&quot;https://github.com/keyboardio/Kaleidoscope&quot;&gt;Kaleidoscope&lt;/a&gt;, and I've been putting off writing this post for so long, that I can't ignore it anymore. I've been putting it off because a lot of things happened, and many more are under development. It's a huge amount of work, even to summarize. Fortunately, there's a lot of good stories to tell.&lt;/p&gt;&lt;p&gt;&lt;a id=&quot;section/suspend&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;Suspend / resume&lt;/h1&gt;&lt;p&gt;Last time I wrote that I found a way to respond to host suspend and resume events, but wasn't able to make the keyboard able to wake the host up - but felt that the solution is right in front of my nose. I was right, it was right there. Funnily enough, the solution is closely linked to our next topic - boot protocol.&lt;/p&gt;&lt;p&gt;You see, for a keyboard to be able to wake the host up, it needs to signal in its configuration that it is capable of doing so. We do that in Kaleidoscope, and have been doing so since day one. Yet, it did not work. We also need to do some USB magic to wake the host, which we have been doing since day one too. Yet, it did not work.&lt;/p&gt;&lt;p&gt;On the other hand, my other keyboards were able to wake the host, so I went and compared what they do, and what we do differently. Turns out, that to wake the host, we have to support the boot protocol too. We did that too, since December, but waking the host up still did not work. Not by default.&lt;/p&gt;&lt;p&gt;It turns out that we could tell the operating system (be that Windows, Linux, or MacOS) that &lt;em&gt;yes, we want this keyboard to wake the host!&lt;/em&gt;. But we had to tell them, they did not default to it. They did not, because they only allow devices that implement a boot keyboard to wake the host up. With proper fallback and support for the boot protocol, we have that, and wakeing up works by default too!&lt;/p&gt;&lt;p&gt;It took a while to get here, we had a lot of dead ends, but I think we ended up with something reasonable, given our constraints.&lt;/p&gt;&lt;p&gt;&lt;a id=&quot;section/boot-proto&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;Boot report protocol&lt;/h1&gt;&lt;p&gt;Oh, boot protocol, my old nemesis! Back in December, I thought I'm done with it, but it wasn't meant to be. I'd rather not explain the whole story, because it still haunts me. We had to go as far as buying me a Mac Mini so I can test on OSX, and figure out what goes wrong (and I &lt;em&gt;don't&lt;/em&gt; like OSX; I like even Windows better, and I have a history with that OS). It was that bad.&lt;/p&gt;&lt;p&gt;The gist of it is that a lot of BIOSes, and even some operating systems, or boot loaders do not parse HID descriptors at all, nor do they set the protocol to boot mode. They just expect the descriptors to be the same as an example in the spec. Our descriptor wasn't the same, it was a bit further optimized, which rendered &lt;code&gt;BootKeyboard&lt;/code&gt; useless with anything that didn't parse the HID descriptors.&lt;/p&gt;&lt;p&gt;So we switched the descriptors, redid the whole fallback mechanism, and even made it possible for the user to switch protocols forcibly, without reconnecting the keyboard (see &lt;a href=&quot;https://github.com/keyboardio/Model01-Firmware/pull/55&quot;&gt;Model01-Firmware#55&lt;/a&gt; for details).&lt;/p&gt;&lt;p&gt;The result? We now properly support the boot protocol, and the keyboard works fine under BIOSes, GRUB, OSX's FileVault, the Windows disk password prompt, and so on. Most of the time, out of the box. For the few rare times it does not, one can forcibly change the protocol.&lt;/p&gt;&lt;p&gt;An interesting part of this whole story is that it turns out, OSX is the only operating system that behaves according to spec: it sets the boot protocol explicitly when in FileVault, and sets it to report once it fully loads (and keeps setting it back if it sees the keyboard change back to boot). Neither Linux nor Windows do this. Surprising, to be honest, but happy that there's at least one operating system that does at least one thing according to spec!&lt;/p&gt;&lt;p&gt;&lt;a id=&quot;section/main-loop-speed&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;Main loop speedup&lt;/h1&gt;&lt;p&gt;We made a very simple change to how keyswitch events get handled, which resulted in a huge speedup in the vast majority of cases. We used to call the keyswitch event handlers for each and every plugin, every cycle, even if the keys were idle. This took a lot of time, and most plugins weren't interested in the idle state at all, anyway.&lt;/p&gt;&lt;p&gt;So we simply removed this part of the code. When a keyswitch is idle, we won't be calling any event handlers. Due to keys being idle is how they spend the vast majority of their time (it is fairly unusual to have more than 10 keys pressed at a time, and even in that case, we have 54 more idle), this has been a tremendous boost to our cycle speed, shaving off more than a full millisecond when the keyboard is idle, and close to a millisecond with fast (close to 100WPM) typing.&lt;/p&gt;&lt;p&gt;&lt;a id=&quot;section/ergodox-port&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;ErgoDox port&lt;/h1&gt;&lt;p&gt;I wanted to use Kaleidoscope on my &lt;a href=&quot;https://ergodox-ez.com/&quot;&gt;ErgoDox EZ&lt;/a&gt; for a long, long time now, even had a few attempts at porting before, but always ran into issues and hit a dead-end. One day, when I wanted to relax and do something different, to let my mind wander, let it do something else for a change, I attempted another port. Because I learned a lot about keyboards since my previous attempt, this port was quick, and rewarding.&lt;/p&gt;&lt;p&gt;We can now use Kaleidoscope on the ErgoDox EZ, and any other ErgoDox - or ergodox-like keyboard - that is compatible with it, like the original ErgoDox, or &lt;a href=&quot;https://twitter.com/joedevivo/status/997874840005632005&quot;&gt;Dactyl&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Kaleidoscope running on the &lt;a href=&quot;https://github.com/adereth/dactyl-keyboard&quot;&gt;Dactyl&lt;/a&gt; makes me incredibly happy, because the Dactyl was one major reason &lt;a href=&quot;https://asylum.madhouse-project.org/blog/2015/11/20/looking-for-a-keyboard/&quot;&gt;I started looking&lt;/a&gt; into mechanical keyboards.&lt;/p&gt;&lt;p&gt;&lt;a id=&quot;section/hid-facade&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;Pluggable HID adaptors&lt;/h1&gt;&lt;p&gt;Probably not too interesting for most people, but we made the HID layer mostly pluggable. This means that if one wants to use a different HID library, this is now possible. This also opens up the way to implementing a Bluetooth keyboard.&lt;/p&gt;&lt;p&gt;&lt;a id=&quot;section/new-plugin-api&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;New plugin API&lt;/h1&gt;&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/noseglasses&quot;&gt;@noseglasses&lt;/a&gt;, we have a new plugin API and hook system. While Jesse and myself made a lot of changes with regards to naming and code structure, the core idea remained the same.&lt;/p&gt;&lt;p&gt;This is one of the most exciting developments lately, at least for myself, and probably other developers, because the new system is far more efficient than the old. We no longer keep a statically allocated array for hooks - saving significant amounts of RAM. We no longer need plugins to register their event handlers and loop hooks - they just need to re-implement a few methods inherited from &lt;code&gt;kaleidoscope::Plugin&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The new system is not only more efficient, it is also considerably lighter. It made adding new hooks &lt;em&gt;cheap&lt;/em&gt;, and new hooks we will have.&lt;/p&gt;&lt;p&gt;Not only that, but the naming is - in my opinion at least - a lot better. The new API should be easier for developers to use.&lt;/p&gt;&lt;p&gt;Just don't look at the code implementing it. That's a smaller ball of mud. But sometimes small balls of mud can do wonders.&lt;/p&gt;&lt;p&gt;&lt;a id=&quot;section/deprecations&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;Deprecations and Upgrading&lt;/h1&gt;&lt;p&gt;There have been a couple of deprecations, bigger and smaller. When compiling code that uses deprecated interfaces, the compiler should loudly warn about them, with pointers to an upgrade path. We prepared an &lt;a href=&quot;https://github.com/keyboardio/Kaleidoscope/blob/master/UPGRADING.md#kaleidoscope-upgrade-notes&quot;&gt;UPGRADING.md&lt;/a&gt; document, and a &lt;a href=&quot;https://community.keyboard.io/t/user-visible-major-breaking-changes-coming-in-kaleidoscope/1665?u=algernon&quot;&gt;forum post&lt;/a&gt; to aid with the upgrades.&lt;/p&gt;&lt;p&gt;Going forward, we'll be keeping both of these updated, to make it easier for both end-users and developers to upgrade their code.&lt;/p&gt;&lt;p&gt;&lt;a id=&quot;section/miscellaneous&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;Miscellaneous&lt;/h1&gt;&lt;p&gt;Apart from the big changes I mentioned above, there have been plenty of bugfixes, some new features, even new plugins! Too many things to list here, really, so if you are interested, have a look at my &lt;a href=&quot;https://github.com/algernon/keyboardio-worklog/blob/master/worklog.md#readme&quot;&gt;work log&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a id=&quot;section/thanks&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;Thanks&lt;/h1&gt;&lt;p&gt;Many thanks to &lt;a href=&quot;https://github.com/noseglasses&quot;&gt;@noseglasses&lt;/a&gt;, &lt;a href=&quot;https://github.com/gedankenexperimenter&quot;&gt;Michael Richters&lt;/a&gt;, and &lt;a href=&quot;https://github.com/obra&quot;&gt;Jesse&lt;/a&gt; for their contributions, ranging from ideas, brainstorming, through code, reviews, to naming things. Huge parts of our progress since last December would not have been possible without them.&lt;/p&gt;&lt;p&gt;&amp;lt;3&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-01T20:35:00+00:00</dc:date>
	<dc:creator>Gergely Nagy</dc:creator>
</item>
<item rdf:about="https://asylum.madhouse-project.org/blog/2018/07/01/cleaning-up-part-two/">
	<title>Gergely Nagy (algernon): Cleaning up, part #2</title>
	<link>https://asylum.madhouse-project.org/blog/2018/07/01/cleaning-up-part-two/</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;https://asylum.madhouse-project.org/blog/2018/05/02/cleaning-up/&quot;&gt;Last time&lt;/a&gt; I wrote about the reasons why I redesigned the looks of this site, the ways I cut down on size. I described how I went from 290kb initial download through 14 requests to 8.4kb through three requests. Since then, I made a few minor changes that made the site even smaller.&lt;/p&gt;&lt;p&gt;While I should be writing about keyboard firmware progress, and a number of other things, time only allows me to write this post, about website diet. Like the size itself, this will not be a very long post.&lt;/p&gt;&lt;p&gt;To cut to the chase, the end result is that I went from &lt;em&gt;8.4kb&lt;/em&gt; through three requests (of which &lt;em&gt;7kb&lt;/em&gt; was CSS with long expiration) down to &lt;em&gt;2.1kb&lt;/em&gt; through two requests, of which only &lt;em&gt;0.8kb&lt;/em&gt; is CSS.&lt;/p&gt;&lt;p&gt;The biggest, and most visible change is that I dropped syntax highlighting, that saved me &lt;em&gt;4.2kb&lt;/em&gt; on a fresh visit, but I still had almost &lt;em&gt;3kb&lt;/em&gt; of CSS for no good reason. That no good reason was that I was writing my CSS by hand, and didn't have a minify step. Instead of implementing a minification step, I converted my CSS rules to &lt;a href=&quot;https://github.com/noprompt/garden&quot;&gt;Garden&lt;/a&gt;, which can minify it for me. And I get to write CSS with Clojure, so even better! This made my CSS considerably smaller: from &lt;em&gt;2.8kb&lt;/em&gt; to around &lt;em&gt;1kb&lt;/em&gt;, slightly less.&lt;/p&gt;&lt;p&gt;And if I minify CSS, I might as well minify the HTML too, using &lt;a href=&quot;https://github.com/Atsman/clj-html-compressor&quot;&gt;clj-html-compressor&lt;/a&gt;. That had a noticeable effect too, although not as much as the CSS minification, I only saved about &lt;em&gt;200&lt;/em&gt; bytes on the index page. More on longer posts, but at most a kilobyte. Well worth the trouble in the end.&lt;/p&gt;&lt;p&gt;But there are visible changes too, apart from the removal of syntax highlighting: I made the font size bigger on the desktop, but left it unchanged everywhere else. I did this because desktop resolutions are typically bigger than tablets and phones, and the default font size was too small on my screens.&lt;/p&gt;&lt;p&gt;I also changed the main header, which used some special styling, drop shadows, and colors not used elsewhere on the site. It stood out, looked different, and I found it too distracting. So it is now styled as normal text, only a tiny bit bigger, and using a monospace font. It stands out less, and as such, is less distracting. But it is still there to serve as a way back to the root of the site.&lt;/p&gt;&lt;p&gt;I also moved the article meta-data (tags and date) to be closer to the title, and removed the dimming. It should be more accessible now.&lt;/p&gt;&lt;p&gt;There is still no JavaScript, and the CSS I have is even smaller, the markup trying to get out of your way, letting you enjoy the content itself. At least, I hope it does that, because ultimately, that's my goal: to have something easy and pleasant to consume, something... not too remarkable as far as looks go, so the focus can be on what's important: the content. The better the UI stays out of the reader's way, the happier I am.&lt;/p&gt;&lt;p&gt;I suppose I should advertise it better that the blog here has an &lt;a href=&quot;https://asylum.madhouse-project.org/blog/atom.xml&quot;&gt;RSS feed&lt;/a&gt; with full contents... Perhaps I'll put that into the footer somewhere!&lt;/p&gt;</content:encoded>
	<dc:date>2018-07-01T16:15:00+00:00</dc:date>
	<dc:creator>Gergely Nagy</dc:creator>
</item>
<item rdf:about="https://medium.com/p/b191d0376708">
	<title>Nikita Voloboev (nikivi): The new version of the website will focus a lot on providing the tools for users to curate learning…</title>
	<link>https://medium.com/@nikitavoloboev/the-new-version-of-the-website-will-focus-a-lot-on-providing-the-tools-for-users-to-curate-learning-b191d0376708?source=rss-2a6397e4339e------2</link>
	<content:encoded>&lt;p&gt;The new version of the website will focus a lot on providing the tools for users to curate learning tracks for any topic. The quality comes from the users submitting the learning tracks and other people ‘starring’ them similar to GitHub. In future this kind of curated approach will be coupled with some kind of automated system. The end goal though is to create a kind of Netlfix for learning where Learn Anything will ‘know’ what you know already and what you want to know as well as your preferred learning methods (i.e. video or articles) and will craft the ‘most effective’ learning paths for you. That you can then learn from.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b191d0376708&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2018-06-29T13:08:12+00:00</dc:date>
</item>
<item rdf:about="https://www.cambus.net/oldest-domains-in-the-com-net-and-org-tlds/">
	<title>Frederic Cambus (fcambus): Oldest domains in the .com, .net, and .org TLDs</title>
	<link>https://www.cambus.net/oldest-domains-in-the-com-net-and-org-tlds/</link>
	<content:encoded>&lt;p&gt;As someone interested in &lt;strong&gt;DNS&lt;/strong&gt; and &lt;strong&gt;Internet history&lt;/strong&gt;, I've always been
enjoying facts and articles about early registered domain names. Wikipedia
has a &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_the_oldest_currently_registered_Internet_domain_names&quot;&gt;page&lt;/a&gt; on the subject, but the list is extremely short for .net
and .org domains.&lt;/p&gt;

&lt;p&gt;Using the &lt;strong&gt;DDN NIC domain summaries&lt;/strong&gt;, it shouldn't be too difficult to
extract a list of domains, &lt;strong&gt;perform whois queries&lt;/strong&gt; to get registration
dates, and sort the results. Let's find out.&lt;/p&gt;

&lt;p&gt;For the record, the oldest issue I could find, dating from December 1987,
doesn't list nordu.net, the first .net domain ever registered. So I opted
for the &lt;a href=&quot;https://www.statdns.com/files/domain-info-19950813.txt&quot;&gt;August 1995 edition&lt;/a&gt; to be on the safe side. While I could also
find an issue from 1996, there are a lot more domains listed so the whois
lookups would take a lot more time, for no evident benefit.&lt;/p&gt;

&lt;h3 id=&quot;preparing-the-domain-lists&quot;&gt;Preparing the domain lists&lt;/h3&gt;

&lt;p&gt;After manually splitting the file to get rid of the TLDs we are not interested
in, we save them in a distinct file for each TLD.&lt;/p&gt;

&lt;p&gt;Then, we need to process the lists so that each domain is on its own line, and
we strip the eventual subdomains with rev using a neat trick:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[[:blank:]]&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;lt; com | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    rev | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 2 | rev | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; com.txt

&lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[[:blank:]]&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;lt; net | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    rev | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 2 | rev | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; net.txt

&lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[[:blank:]]&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;lt; org | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    rev | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 2 | rev | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; org.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;performing-whois-requests&quot;&gt;Performing whois requests&lt;/h3&gt;

&lt;p&gt;Internic whois server allows to query domains in the .com and .net TLDs without
imposing any drastic rate limit, albeit slowly. As our corpus is rather short,
this isn't an issue.&lt;/p&gt;

&lt;p&gt;Whois script for .com and .net domains:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;domain
&lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;creation_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;whois &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; whois.internic.net &lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	    &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;   Creation Date:&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;uniq&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/Creation Date://'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$creation_date&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
		&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$creation_date&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'T'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 1 -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$date&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Wait one second to avoid triggering rate-limiting mechanisms&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &amp;lt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the other hand, the Public Interest Registry whois server only allows 4
queries per minute, so we have to sleep for a little while between each
request.&lt;/p&gt;

&lt;p&gt;Whois script for .org domains:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;domain
&lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;creation_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;whois &lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Creation Date:&quot;&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	    &lt;span class=&quot;nb&quot;&gt;uniq&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/Creation Date://'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$creation_date&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
		&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$creation_date&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'T'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 1 -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$date&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Wait thirty seconds to avoid triggering rate-limiting mechanisms&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;30
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &amp;lt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now launch the scripts to perform whois requests:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh internic.sh com.txt &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; com.dates.txt
sh internic.sh net.txt &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; net.dates.txt
sh pir.sh org.txt &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; org.dates.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally sort results and keep the 100 oldest domains for each TLD:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sort &lt;/span&gt;com.dates.txt | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n100&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sort &lt;/span&gt;net.dates.txt | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n100&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sort &lt;/span&gt;org.dates.txt | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;

&lt;p&gt;Oldest registered &lt;strong&gt;.com&lt;/strong&gt; domains:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1985-03-15 symbolics.com
1985-04-24 bbn.com
1985-05-24 think.com
1985-07-11 mcc.com
1985-09-30 dec.com
1985-11-07 northrop.com
1986-01-09 xerox.com
1986-01-17 sri.com
1986-03-03 hp.com
1986-03-05 bellcore.com
1986-03-19 ibm.com
1986-03-19 sun.com
1986-03-25 intel.com
1986-03-25 ti.com
1986-04-25 att.com
1986-05-08 gmr.com
1986-05-08 tek.com
1986-07-10 fmc.com
1986-07-10 ub.com
1986-08-05 bell-atl.com
1986-08-05 ge.com
1986-08-05 grebyn.com
1986-08-05 isc.com
1986-08-05 nsc.com
1986-08-05 stargate.com
1986-09-02 boeing.com
1986-09-18 itcorp.com
1986-09-29 siemens.com
1986-10-18 pyramid.com
1986-10-27 alphacdc.com
1986-10-27 bdm.com
1986-10-27 fluke.com
1986-10-27 inmet.com
1986-10-27 kesmai.com
1986-10-27 mentor.com
1986-10-27 nec.com
1986-10-27 ray.com
1986-10-27 rosemount.com
1986-10-27 vortex.com
1986-11-05 alcoa.com
1986-11-05 gte.com
1986-11-17 adobe.com
1986-11-17 amd.com
1986-11-17 das.com
1986-11-17 data-io.com
1986-11-17 octopus.com
1986-11-17 portal.com
1986-11-17 teltone.com
1986-12-11 3com.com
1986-12-11 amdahl.com
1986-12-11 ccur.com
1986-12-11 ci.com
1986-12-11 convergent.com
1986-12-11 dg.com
1986-12-11 peregrine.com
1986-12-11 quad.com
1986-12-11 sq.com
1986-12-11 tandy.com
1986-12-11 tti.com
1986-12-11 unisys.com
1987-01-19 cgi.com
1987-01-19 cts.com
1987-01-19 spdcc.com
1987-02-19 apple.com
1987-03-04 nma.com
1987-03-04 prime.com
1987-04-04 philips.com
1987-04-23 datacube.com
1987-04-23 kai.com
1987-04-23 tic.com
1987-04-23 vine.com
1987-04-30 ncr.com
1987-05-14 cisco.com
1987-05-14 rdl.com
1987-05-20 slb.com
1987-05-27 parcplace.com
1987-05-27 utc.com
1987-06-26 ide.com
1987-07-09 trw.com
1987-07-13 unipress.com
1987-07-27 dupont.com
1987-07-27 lockheed.com
1987-07-28 rosetta.com
1987-08-18 toad.com
1987-08-31 quick.com
1987-09-03 allied.com
1987-09-03 dsc.com
1987-09-03 sco.com
1987-09-22 gene.com
1987-09-22 kccs.com
1987-09-22 spectra.com
1987-09-22 wlk.com
1987-09-30 mentat.com
1987-10-14 wyse.com
1987-11-02 cfg.com
1987-11-09 marble.com
1987-11-16 cayman.com
1987-11-16 entity.com
1987-11-24 ksr.com
1987-11-30 nynexst.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oldest registered &lt;strong&gt;.net&lt;/strong&gt; domains:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1985-01-01 nordu.net
1986-04-01 broken.net
1986-11-05 nsf.net
1987-01-27 nyser.net
1987-05-20 uu.net
1987-07-21 sesqui.net
1988-05-25 mr.net
1988-06-09 oar.net
1988-07-08 sura.net
1988-09-07 the.net
1988-09-16 nwnet.net
1988-10-21 es.net
1988-10-25 mid.net
1989-01-04 barrnet.net
1989-01-05 cic.net
1989-01-27 hawaii.net
1989-03-07 psi.net
1989-03-27 near.net
1989-04-11 eu.net
1989-06-29 ln.net
1989-09-12 sub.net
1989-09-14 westnet.net
1989-11-06 cypress.net
1989-11-15 cerf.net
1989-11-17 risq.net
1990-02-09 ca.net
1990-05-21 wiscnet.net
1990-07-25 cent.net
1990-07-26 alter.net
1990-09-27 ans.net
1990-11-07 mich.net
1991-02-26 hk.net
1991-04-10 cix.net
1991-04-11 team.net
1991-05-07 five-colleges.net
1991-05-17 ja.net
1991-06-03 illinois.net
1991-06-20 more.net
1991-06-24 ohio-dmz.net
1991-07-08 icp.net
1991-08-07 swip.net
1991-08-15 michnet.net
1991-11-29 notes.net
1991-12-10 merit.net
1991-12-31 mu.net
1992-01-17 first.net
1992-02-17 ebone.net
1992-02-19 holonet.net
1992-02-25 ripe.net
1992-03-24 csn.net
1992-04-06 mcast.net
1992-04-08 life.net
1992-04-20 rahul.net
1992-04-21 cyber.net
1992-05-11 sprintlink.net
1992-05-18 ids.net
1992-05-21 q.net
1992-06-01 netconnect.net
1992-07-07 use.net
1992-07-16 tip.net
1992-07-27 capcon.net
1992-07-27 nexsys.net
1992-07-29 umass.net
1992-07-31 solinet.net
1992-08-06 fish.net
1992-08-18 ps.net
1992-09-10 eds.net
1992-09-18 lig.net
1992-10-01 ix.net
1992-10-19 aol.net
1992-10-30 win.net
1992-11-02 cren.net
1992-11-03 path.net
1992-11-04 quake.net
1992-11-20 access.net
1992-11-20 tsoft.net
1992-11-23 inter.net
1992-11-30 individual.net
1992-12-04 raider.net
1992-12-09 europa.net
1992-12-21 demon.net
1992-12-22 press.net
1992-12-23 bc.net
1993-01-01 internic.net
1993-01-04 cls.net
1993-01-20 sam.net
1993-02-09 kanren.net
1993-02-11 ubs.net
1993-02-15 digex.net
1993-02-15 mobilecomm.net
1993-02-17 xlink.net
1993-02-18 fr.net
1993-03-03 onenet.net
1993-03-08 aco.net
1993-03-24 clark.net
1993-03-24 olympus.net
1993-03-24 satlink.net
1993-04-02 netcom.net
1993-04-07 nl.net
1993-04-13 ins.net
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oldest registered &lt;strong&gt;.org&lt;/strong&gt; domains:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1985-07-10 mitre.org
1986-03-25 src.org
1986-07-10 super.org
1987-01-07 aero.org
1987-01-15 mcnc.org
1987-04-02 rand.org
1987-04-04 mn.org
1987-05-01 rti.org
1987-07-14 usenix.org
1987-09-03 software.org
1988-02-25 fidonet.org
1988-04-27 ampr.org
1988-08-04 osf.org
1988-08-11 ida.org
1988-09-09 cactus.org
1988-09-09 nm.org
1988-09-22 ccf.org
1988-10-21 erim.org
1988-11-11 ski.org
1988-11-30 iti.org
1989-01-11 jax.org
1989-01-13 ncsc.org
1989-02-09 aaai.org
1989-02-24 ie.org
1989-03-29 stjude.org
1989-04-11 mbari.org
1989-05-24 castle.org
1989-06-07 carl.org
1989-06-27 msri.org
1989-07-15 agi.org
1989-07-17 sf-bay.org
1989-07-31 mef.org
1989-08-11 oclc.org
1989-08-23 ei.org
1989-09-05 cas.org
1989-09-11 battelle.org
1989-09-12 sub.org
1989-09-21 aip.org
1989-09-28 sdpa.org
1989-11-08 lonestar.org
1989-12-01 ieee.org
1990-01-10 cit.org
1990-01-22 sematech.org
1990-02-07 omg.org
1990-02-12 decus.org
1990-03-13 sublink.org
1990-03-16 cam.org
1990-03-20 cpl.org
1990-04-10 ori.org
1990-04-13 fhcrc.org
1990-05-16 nwf.org
1990-05-18 mskcc.org
1990-05-23 boystown.org
1990-05-24 bwc.org
1990-05-31 topsail.org
1990-06-28 ciit.org
1990-07-17 central.org
1990-07-27 mind.org
1990-08-03 stonemarche.org
1990-08-28 cshl.org
1990-08-30 fstrf.org
1990-09-12 dorsai.org
1990-09-14 elf.org
1990-09-18 siggraph.org
1990-09-21 sjh.org
1990-09-27 igc.org
1990-10-10 cotdazr.org
1990-10-10 eff.org
1990-10-10 sfn.org
1990-10-31 csn.org
1990-11-01 sfbr.org
1990-11-07 ais.org
1990-11-07 hjf.org
1991-01-04 uniforum.org
1991-01-04 wgbh.org
1991-02-01 fsf.org
1991-02-06 eso.org
1991-02-06 tiaa.org
1991-02-13 nysernet.org
1991-02-20 acr.org
1991-02-26 nybc.org
1991-02-26 nypl.org
1991-04-10 cnytdo.org
1991-04-10 htr.org
1991-04-10 hvtdc.org
1991-04-10 nycp.org
1991-04-11 bpl.org
1991-04-11 scra.org
1991-04-12 amnh.org
1991-04-15 hellnet.org
1991-04-15 sil.org
1991-04-18 apc.org
1991-04-22 mobot.org
1991-04-25 cni.org
1991-05-01 gumption.org
1991-05-02 hslc.org
1991-05-13 guild.org
1991-05-22 acs.org
1991-05-22 lpl.org
1991-05-22 rsage.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2018-06-26T15:57:00+00:00</dc:date>
</item>
<item rdf:about="tag:gerikson.com,2018:/alt/Fotografiska-2018-06">
	<title>Gustaf Erikson (gerikson): Fotografiska, June 2018</title>
	<link>http://gerikson.com/blog/alt/Fotografiska-2018-06.html</link>
	<content:encoded>&lt;h4&gt;&lt;a href=&quot;https://www.fotografiska.com/sto/utstallningar/cathleen-naundorf-secret-times/&quot;&gt;Cathleen Naundorf - Secret Times&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Large format (8x10) fashion photography on Polariods. The prints
included the tear marks and blotches from the process. The subjects
are gorgeous models clad in &lt;em&gt;haute couture&lt;/em&gt; creations from the largest
Paris &lt;em&gt;maisons&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;(The camera was also exhibited, a Plaubel monorail with a Schneider
Symmar-S 300mm &amp;#x0192;/5.6. I nerded out a lot over this.)&lt;/p&gt;

&lt;p&gt;In all I didn&amp;#8217;t find this very compelling. I respect the photographer
for her work and her process, and on some level the combination of
ancient technology and modern subjects is interesting. But in the end
it&amp;#8217;s sort of a gimmick.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://www.fotografiska.com/sto/utstallningar/simen-johan-until-the-kingdom-comes/&quot;&gt;Simen Johan - Until the Kingdom Comes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Huge prints of digitally manipulated images of animals and fruit. The
new wave of pictorialism - the photographs are just the raw material
for making images in a computer to express the vision of the
artist. Is it that far removed from making a naturalistic oil painting
from a photograph? I don&amp;#8217;t believe so.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://www.fotografiska.com/sto/utstallningar/evelyn-bencicova-merror/&quot;&gt;Evelyn Bencicova - Merror&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The subject matter is interesting, but the execution felt
unsettling. Probably that is the point.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://www.fotografiska.com/sto/utstallningar/linda-mccartney-mary-mccartney-mother-daughter/&quot;&gt;Linda McCartney &amp;amp; Mary McCartney - Mother Daughter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I&amp;#8217;m going to be uncharitable here and say that this is just Mary (the
daughter) using her access to her mother&amp;#8217;s (Linda) snapshots to
enhance her own career.&lt;/p&gt;

&lt;p&gt;The prints were not identified by the photographer, which felt dishonest. &lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://www.fotografiska.com/sto/utstallningar/a-new-me/&quot;&gt;Marie Hald - A New Me&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Finally a good exhibit. The photographer spent some time &amp;#8220;embedded&amp;#8221; in
a Utah &amp;#8220;fat camp&amp;#8221; where overweight people went through a crash course
to try to lose weight. It&amp;#8217;s a typical Swedish young photographer
project but the subjects in this stark setting had a quiet dignity
that made them human, as opposed to health statistics.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/gerikson/42103365215/in/dateposted/&quot; title=&quot;Grönan&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1836/42103365215_cbf5681790_z.jpg&quot; width=&quot;471&quot; height=&quot;640&quot; alt=&quot;Grönan&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-26T08:26:00+00:00</dc:date>
	<dc:creator>Gustaf Erikson</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2018/04/generating-vanity-infohashes-for-torrents/">
	<title>Gokberk Yaltirakli (gkbrk): Generating Vanity Infohashes for Torrents</title>
	<link>https://gkbrk.com/2018/04/generating-vanity-infohashes-for-torrents/</link>
	<content:encoded>&lt;p&gt;In the world of Bittorrent, each torrent is identified by &lt;em&gt;an infohash&lt;/em&gt;. It is
basically the SHA1 hash of the torrent metadata that tells you about the
files. And people, when confronted with something that&amp;rsquo;s supposed to be random,
like to control it to some degree. You can see this behaviour in lots of
different places online. People try to generate special Bitcoin wallets, Tor
services with their nick or 4chan tripcodes that look cool. These are all done
by repeatedly generating the hash until you find a result that you like. We can
do the exact same thing with torrents as well.&lt;/p&gt;

&lt;h2&gt;The structure of torrent files&lt;/h2&gt;

&lt;p&gt;Before we start tweaking our infohash, let&amp;rsquo;s talk about torrent files first. A
torrent file is a bencoded dictionary. It contains information about the files,
their names, how large they are and hashes for each piece. This is stored in the
&lt;em&gt;info&lt;/em&gt; section of the dictionary. The rest of the dictionary includes a list of
trackers, the file comment, the creation date and other optional metadata. The
&lt;strong&gt;infohash&lt;/strong&gt; is quite literally the SHA1 hash of the &lt;strong&gt;info&lt;/strong&gt; section of the
torrent. Any modification to the file contents changes the infohash, while
changing the other metadata doesn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;This gives us two ways of affecting the hash without touching the file
contents. The first one is adding a separate key called &lt;em&gt;vanity&lt;/em&gt; and chaning the
value of it. While this would be really flexible and cause the least change that
the user can see, it adds a non-standard key to our dictionary. Fortunately,
torrent files are supposed to be flexible and handle unknown keys gracefully.&lt;/p&gt;

&lt;p&gt;The other thing we can do is to add a prefix to the file name. This should keep
everything intact aside from a random value in front of our filename.&lt;/p&gt;

&lt;h2&gt;Parsing the torrent file&lt;/h2&gt;

&lt;p&gt;First of all, let&amp;rsquo;s read our torrent file and parse it. For this purpose, I&amp;rsquo;m
using the &lt;code&gt;bencoder&lt;/code&gt; module.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;bencoder&lt;/span&gt;

&lt;span&gt;target&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'arch-linux.torrent'&lt;/span&gt;
&lt;span&gt;with&lt;/span&gt; &lt;span&gt;open&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;'rb'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;torrent_file&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
    &lt;span&gt;torrent&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;bencoder&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;decode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent_file&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;read&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Calculating the infohash&lt;/h2&gt;

&lt;p&gt;The infohash is the hash of the &lt;em&gt;info&lt;/em&gt; section of the file. Let&amp;rsquo;s write a
function to calculate that. We also encode the binary of the hash with base 32
to bring it to the infohash format.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;hashlib&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;base64&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt; &lt;span&gt;get_infohash&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;encoded&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;bencoder&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;encode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'info'&lt;/span&gt;&lt;span&gt;])&lt;/span&gt;
    &lt;span&gt;sha1&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;hashlib&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sha1&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;encoded&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hexdigest&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;sha1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Prefixing the name&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s do the method with prefixing the name first. We will start from 0 and keep
incrementing the name prefix until the infohash starts with &lt;code&gt;cafe&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;original_name&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'info'&lt;/span&gt;&lt;span&gt;][&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'name'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;decode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'utf-8'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;

&lt;span&gt;vanity&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;while&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
    &lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'info'&lt;/span&gt;&lt;span&gt;][&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'name'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'{}-{}'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;vanity&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;original_name&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;get_infohash&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;startswith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'cafe'&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;vanity&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;get_infohash&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
        &lt;span&gt;break&lt;/span&gt;
    &lt;span&gt;vanity&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code will increment our vanity number in a loop and print it and the
respective infohash when it finds a suitable one.&lt;/p&gt;

&lt;h2&gt;Adding a separate key to the info section&lt;/h2&gt;

&lt;p&gt;While the previous section works well, it still causes a change that is visible
to the user. Let&amp;rsquo;s work around that by modifying the data in a bogus key called
&lt;em&gt;vanity&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;vanity&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;while&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
    &lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'info'&lt;/span&gt;&lt;span&gt;][&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'vanity'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;str&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;vanity&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;get_infohash&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;startswith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'cafe'&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;vanity&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;get_infohash&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
        &lt;span&gt;break&lt;/span&gt;
    &lt;span&gt;vanity&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Saving the modified torrent files&lt;/h2&gt;

&lt;p&gt;While it is possible to do the modification to the file yourself, why not go all
the way and save the modified torrent file as well? Let&amp;rsquo;s write a function to
save a given torrent file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;save_torrent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;with&lt;/span&gt; &lt;span&gt;open&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;'wb+'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;torrent_file&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;torrent_file&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;write&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;bencoder&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;encode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;torrent&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use this function after finding an infohash that you like.&lt;/p&gt;

&lt;h2&gt;Cool ideas for infohash criteria&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Release groups can prefix their infohashes with their name/something unique to
them&lt;/li&gt;
&lt;li&gt;Finding smaller infohashes - should slowly accumulate 0&amp;rsquo;s in the beginning&lt;/li&gt;
&lt;li&gt;Infohashes with the least entropy - should make them easier to remember&lt;/li&gt;
&lt;li&gt;Infohashes with the more digits&lt;/li&gt;
&lt;li&gt;Infohashes with no digits&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2018-06-26T00:01:58+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2018/01/evolving-line-art/">
	<title>Gokberk Yaltirakli (gkbrk): Evolving Line Art</title>
	<link>https://gkbrk.com/2018/01/evolving-line-art/</link>
	<content:encoded>&lt;p&gt;In this article, I want to talk about a really simple technique for evolving line-art from pictures. On top of being an simple example for genetic algorithms, it is also a fun programming project that can be done in short time.&lt;/p&gt;

&lt;p&gt;For this project, we are going to use the Hill Climbing algorithm. The algorithm for evolving pictures is like the following.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create two empty images, image 1 and image 2&lt;/li&gt;
&lt;li&gt;Do a small random modification (like a line) to the first image&lt;/li&gt;
&lt;li&gt;If the first image is closer to the target than the first one, copy it to image 2&lt;/li&gt;
&lt;li&gt;Otherwise, copy the second image to image 1&lt;/li&gt;
&lt;li&gt;Goto 2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will be using Rust for this project. Fortunately, Rust has really good libraries that we can use to read, manipulate and write image files.&lt;/p&gt;

&lt;h2&gt;Loading the Target Image&lt;/h2&gt;

&lt;p&gt;The image crate makes loading files really straightforward. Here&amp;rsquo;s how to load the file called &lt;code&gt;target.png&lt;/code&gt;. We will also create the two temporary images that we need for the algorithm. We will make those&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;target&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;open&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;target.png&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.expect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;Cannot load target image&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

&lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new_rgb8&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img2&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new_rgb8&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Extracting the Colours&lt;/h2&gt;

&lt;p&gt;Normally, picking the colours randomly should work just as well as using the colours from the picture. But if we extract all the colours and pick randomly from those, the algorithm will be able to generate the images faster. To achieve this, we will create a Vector and store all the colours in there.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;colours&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Vec&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

&lt;span&gt;for&lt;/span&gt; &lt;span&gt;pixel&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.pixels&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;rgba&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;pixel&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.to_rgba&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;colours&lt;/span&gt;&lt;span&gt;.contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;rgba&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;colours&lt;/span&gt;&lt;span&gt;.push&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;rgba&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Difference between two images&lt;/h2&gt;

&lt;p&gt;To determine if an image is closer to our target, we need a function to find the difference of two images. The &lt;em&gt;root_mean_squared_error&lt;/em&gt; from the &lt;em&gt;imageproc&lt;/em&gt; crate does exactly that.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;image_diff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;img2&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&amp;gt;&lt;/span&gt; &lt;span&gt;f64&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;stats&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;root_mean_squared_error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;img2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function returns the amount of difference between two images as a float. When we&amp;rsquo;re building the hill climbing algorithm, our goal is going to be minimising this number.&lt;/p&gt;

&lt;h2&gt;Drawing random circles&lt;/h2&gt;

&lt;p&gt;Personally I like the art style of the random lines, but it evolves slowly. One way to speed-up the process and get a different art style is using different shapes. Perhaps the simplest shape that can be drawn is a circle. It only needs a location (x, y) and a radius. Here&amp;rsquo;s how to draw a random circle with a radius of 5 in your image.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;pos&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;i32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;colour&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.choose&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;colours&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

&lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;drawing&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;draw_filled_circle_mut&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;pos&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;colour&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Drawing random lines&lt;/h2&gt;

&lt;p&gt;For drawing, we are going to be using the imageproc crate again. Here&amp;rsquo;s how to draw a black line from (10, 10) to (20, 20).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;start&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;10f32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;10f32&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;20f32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;20f32&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;color&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Rgba&lt;/span&gt;&lt;span&gt;([&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;

&lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;drawing&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;draw_line_segment_mut&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;start&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;colour&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s draw a line with a color chosen from our random list.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;thread_rng&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

&lt;span&gt;let&lt;/span&gt; &lt;span&gt;start&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;f32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;f32&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;f32&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;f32&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;   &lt;span&gt;(&lt;/span&gt;&lt;span&gt;f32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;f32&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;f32&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;f32&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; &lt;span&gt;colour&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.choose&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;colours&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

&lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;drawing&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;draw_line_segment_mut&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;start&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;colour&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;The Hill Climbing Algorithm&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t know how it works, I have written about the &lt;a href=&quot;https://gkbrk.com/wiki/hill_climbing/&quot;&gt;hill climbing algorithm&lt;/a&gt; in my wiki. Basically, it starts with a random solution and repeatedly mutates it in a way that it becomes better and better according an evaluation function we provide.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s write the skeleton of our hill climber. We&amp;rsquo;ve already created the target image and the temporary images in the previous sections.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;loop&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;pos&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;i32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;colour&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.choose&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;colours&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

    &lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;drawing&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;draw_filled_circle_mut&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;pos&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;colour&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;image_diff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;image_diff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img2&lt;/span&gt;&lt;span&gt;.copy_from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;.copy_from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Saving regular snapshots&lt;/h2&gt;

&lt;p&gt;Since this program can improve the image for a really long time, until it becomes a pixel-perfect copy of the target, we might want to save snapshots if the image we get in regular intervals. This will allow us to check the progress and stop the program once we are satisfied with the results. Let&amp;rsquo;s save the image every 500 iterations.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; &lt;span&gt;500&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;img2&lt;/span&gt;&lt;span&gt;.save&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;output.png&quot;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;PNG&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And with that, the project is done. Here&amp;rsquo;s the full code, in a form that compiles and runs. Play around with it, try new shapes and different algorithms. If you implement this in another language, let me know and share your own code with result pictures.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight rust&quot;&gt;&lt;code&gt;&lt;span&gt;extern&lt;/span&gt; &lt;span&gt;crate&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;extern&lt;/span&gt; &lt;span&gt;crate&lt;/span&gt; &lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;extern&lt;/span&gt; &lt;span&gt;crate&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;use&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;fs&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;File&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;use&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;use&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Rng&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;use&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;::{&lt;/span&gt;&lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;GenericImage&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Pixel&lt;/span&gt;&lt;span&gt;};&lt;/span&gt;

&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;image_diff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;img2&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;-&amp;gt;&lt;/span&gt; &lt;span&gt;f64&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;stats&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;root_mean_squared_error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;img2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;target&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;open&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;target.png&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.expect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;Cannot load target image&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new_rgb8&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img2&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;DynamicImage&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new_rgb8&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;

    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;colours&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Vec&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;pixel&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.pixels&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;let&lt;/span&gt; &lt;span&gt;rgba&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;pixel&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.to_rgba&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;colours&lt;/span&gt;&lt;span&gt;.contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;rgba&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;colours&lt;/span&gt;&lt;span&gt;.push&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;rgba&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;

    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;thread_rng&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;loop&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;let&lt;/span&gt; &lt;span&gt;pos&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;   &lt;span&gt;(&lt;/span&gt;&lt;span&gt;i32&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.width&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.gen_range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;&lt;span&gt;.height&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;i32&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;
        &lt;span&gt;let&lt;/span&gt; &lt;span&gt;colour&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;rng&lt;/span&gt;&lt;span&gt;.choose&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;colours&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;

        &lt;span&gt;imageproc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;drawing&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;draw_filled_circle_mut&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;pos&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;colour&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;image_diff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;image_diff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img2&lt;/span&gt;&lt;span&gt;.copy_from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img1&lt;/span&gt;&lt;span&gt;.copy_from&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;img2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;

        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; &lt;span&gt;100&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;println!&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;{}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;i&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
            &lt;span&gt;img2&lt;/span&gt;&lt;span&gt;.save&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;output.png&quot;&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt;.unwrap&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt; &lt;span&gt;image&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;PNG&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;

        &lt;span&gt;i&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2018-06-25T21:48:37+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2018/01/welcome-2018/">
	<title>Gokberk Yaltirakli (gkbrk): Welcome 2018!</title>
	<link>https://gkbrk.com/2018/01/welcome-2018/</link>
	<content:encoded>&lt;p&gt;Hello dear readers, welcome to another episode of &amp;ldquo;New Year, New Me&amp;rdquo;. First of all, I want to wish everyone a happy new year. Hopefully, 2018 will be full of happiness, health and success for you. For a variety of reasons some of you might have had a bad year. But worry not; because 2018 is here and whatever your goals were, you can keep trying.&lt;/p&gt;

&lt;p&gt;Today I want to reflect upon the previous year and make some resolutions about the upcoming one. Personally, 2017 was a really good year for me. On the education, career and personal fronts, I made a lot of progress and had a lot of fun. Since I never got around to writing one of those for 2016, this post might have some older stuff as well.&lt;/p&gt;

&lt;h2&gt;Reflecting on the previous year&lt;/h2&gt;

&lt;p&gt;I finished my first year of university and started my second one. During this process I met a lot of interesting and cool people, like-minded individuals if you will. I always imagined university would be a fun place to be in but that was an understatement. If you use all the resources and facilities provided to you, it can be a very useful and valuable experience.&lt;/p&gt;

&lt;p&gt;I got my first job during August 2017. I started working part-time as a web developer. This provided me with experience related to my field as well as some extra money. I think having my first job in my own field is a really good opportunity compared to just working a random job.&lt;/p&gt;

&lt;p&gt;Other than my current job, I also found a placement for next year. I signed a contract with them around the end of 2017. After I finish my second year in school, I will be working in London as a full-time Software Engineer. I am really excited for this, I have met some people from the company as well as people from my team. They all feel like really nice people and I&amp;rsquo;m looking forward to working with them.&lt;/p&gt;

&lt;p&gt;I started learning Chinese (Mandarin if you&amp;rsquo;re pedantic). Originally I was planning to learn Japanese, which would probably be easier for me because of similarities between Japanese and my native language, but in the end I decided to go with Chinese. So far I&amp;rsquo;m pleased with my decision, although my progress is slow because of my heavy workload.&lt;/p&gt;

&lt;p&gt;During the good and bad parts of the year, my amazing girlfriend stood by me and supported me a lot. She made the worst part of my year (and one of worst times of my life) bearable, and I am really thankful to have such a kind and loving person in my life. We have been in a long-distance relationship for a while, but I am going to meet her in a few days so I am really excited.&lt;/p&gt;

&lt;p&gt;I spent the whole year with great people. I want to express my gratitude towards one of the really special ones. Melis, my former flatmate, has been an incredible friend. She made my already bright life even brighter. At this point, she is like a sister to me. We secretly believe that we are somehow telepathically connected, although we have not been able to find any scientific evidence for this. Anyway; she is my brotato, and hopefully she will stay that way for a long time.&lt;/p&gt;

&lt;h2&gt;Resolutions for the new year&lt;/h2&gt;

&lt;p&gt;Ah, so here is the part where I tell you about how I&amp;rsquo;m going to become a completely better person compared to yesterday. Get ready for a whole bunch of empty promises that say how I&amp;rsquo;m going to study 20 hours a day and do cardio on top of it. Joking aside, I believe these new-year resolutions are useful things. It&amp;rsquo;s like a to-do list of things that would be good to try this year. Even if you don&amp;rsquo;t accomplish all (or any) of them, it is still enough to try.&lt;/p&gt;

&lt;p&gt;Here is my list for 2018.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Make progress in Chinese.&lt;/strong&gt; I want to spend more time this year learning Chinese. My goal is practicing common words and sentence structures. Maybe I will be able to read a children&amp;rsquo;s book by the end of this year.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write more blog posts.&lt;/strong&gt; I think having a small number of blog posts is fine, as long as the content is interesting. But I would still like to write more regularly. At least once a month would be ideal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;More gym.&lt;/strong&gt; Although I walk a lot every day and prefer walking to the bus or Uber, I still think I need to be a little more active. I think the gym is a good way to spend time and become healthier at the same time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eat healthier.&lt;/strong&gt; Speaking of healthy, I want to focus on foods with more nutrients. This is not very easy since I don&amp;rsquo;t have too much time for cooking, but a phone app can be helpful for keeping track of my food intake.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Waste less time.&lt;/strong&gt; I usually find myself needing more time for things, which makes me believe there is a lot of wasted time in my day. I bought an Android app that allows me to do &amp;lsquo;Time-tracking&amp;rsquo;. I am hoping that it helps me be a little more efficient with my time management, but I am scared it might turn into &amp;ldquo;You watched 6 hours of Netflix today&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learn how to draw.&lt;/strong&gt; I want to improve my drawing, which isn&amp;rsquo;t in a very good condition now. My goal is to spend around 15-30 minutes every day to try drawing something simple.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is it a long list? Yeah. Is it likely that I will do everything in my list for the entire year? Probably not. But is it worth trying to do it and possibly improving yourself? Absolutely.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I urge everyone to also write something short, reflecting on their year and making resolutions for the new one. Writing this down and sharing it with other people might provide some extra motivation.&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-25T21:48:19+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2017/10/putting-my-blog-on-ipfs/">
	<title>Gokberk Yaltirakli (gkbrk): Putting My Blog on IPFS</title>
	<link>https://gkbrk.com/2017/10/putting-my-blog-on-ipfs/</link>
	<content:encoded>&lt;p&gt;I&amp;rsquo;ve always been fascinated by the idea of peer-to-peer network protocols, and putting my website on a distributed network was something I&amp;rsquo;ve been meaning to do for a while. The recent increase in blog posts about IPFS finally pushed me over the tipping point. Hopefully, you can read this article on IPFS &lt;a href=&quot;https://ipfs.io/ipns/gkbrk.com/2017/10/putting-my-blog-on-ipfs/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am really happy with this change, and I urge everyone to do the same with their websites. IPFS may or may not be the perfect solution to the decentralized web, but we need to start somewhere. In this article, I will try to give a step-by-step guide for putting static websites on IPFS.&lt;/p&gt;

&lt;h2&gt;Getting started&lt;/h2&gt;

&lt;p&gt;First, a bit about getting your feet wet with IPFS. Every file and directory in IPFS can be referenced by a hash that looks like &lt;code&gt;QmNiMm9LUX9R4Ezu2NAsraxFSyrbNR6rgGwCDu71Dy4NwQ&lt;/code&gt;. If you have it installed on your computer, you can go on the command line to download and view files.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight shell&quot;&gt;&lt;code&gt;ipfs &lt;span&gt;cat &lt;/span&gt;QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command will output &amp;lsquo;Hello World&amp;rsquo;. I chose this as an example, because I assume hello world is something a lot of people will have on their nodes.&lt;/p&gt;

&lt;p&gt;Just as easy as getting files, putting files is also easy. Lets say you have a picture of a cat called &lt;code&gt;kitten.jpg&lt;/code&gt;. Running &lt;code&gt;ipfs add kitten.jpg&lt;/code&gt; give you a hash and your node will start seeding it. You can just give that hash to people you want to share the file with. You can try it like &lt;a href=&quot;https://ipfs.io/ipfs/Qmd286K6pohQcTKYqnS1YhWrCiS4gz7Xi34sdwMe9USZ7u&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Putting a website on IPFS&lt;/h2&gt;

&lt;p&gt;So how do we go from putting up a file there to putting up a whole website? Just like most unix commands, IPFS also accepts the parameter &lt;code&gt;-r&lt;/code&gt; for running the command recursively. Let&amp;rsquo;s say our website is in the public/ directory. If we run &lt;code&gt;ipfs add -r public/&lt;/code&gt;, it will first add all the files and subdirectories into IPFS, and finally give us a hash that represents the whole folder.&lt;/p&gt;

&lt;p&gt;Other people can view your website with that hash. The hash changes if you update your website, but you can solve this issue with IPNS. IPNS basically allows you use a private key to update the contents of your files. As long as you have your private key, you can publish updates to your IPFS website.&lt;/p&gt;

&lt;p&gt;If you want to use IPNS &lt;em&gt;(you probably do)&lt;/em&gt;, you need to run &lt;code&gt;ipfs name publish &amp;lt;the hash of the folder&amp;gt;&lt;/code&gt;. After doing these, you can give your IPNS hash to people, and whenever you update your website they will see the updated version as well.&lt;/p&gt;

&lt;p&gt;But as a person who has keeps losing private keys, I can just use my domain&amp;rsquo;s DNS records to change the hash whenever I need to.&lt;/p&gt;

&lt;h2&gt;Using DNS for IPFS&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t want to deal with giving out long hashes to people, IPFS allows you to use your normal domain as well. To do this, you need to add a line to your DNS records.&lt;/p&gt;

&lt;p&gt;Just go to your domain&amp;rsquo;s DNS settings, and find where to add a TXT record. In the content, you should write &lt;code&gt;dnslink=/ipfs/&amp;lt;your hash here&amp;gt;&lt;/code&gt; or &lt;code&gt;dnslink=/ipns/&amp;lt;your hash here&amp;gt;&lt;/code&gt; depending on what you use.&lt;/p&gt;

&lt;p&gt;As an example, you can access my blog from &lt;a href=&quot;https://ipfs.io/ipns/gkbrk.com&quot;&gt;/ipns/gkbrk.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Hugo Specific Fixes&lt;/h2&gt;

&lt;p&gt;When you are hosting your website on IPFS, one issue you should be careful of is &lt;em&gt;relative&lt;/em&gt; vs. &lt;em&gt;absolute&lt;/em&gt; links. If the linking is wrong, you will have issues when people try to navigate your website.&lt;/p&gt;

&lt;p&gt;In your Hugo config file &lt;em&gt;(config.toml)&lt;/em&gt;, you should comment out baseurl and set relativeURLs to true.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight toml&quot;&gt;&lt;code&gt;&lt;span&gt;# baseurl = ''&lt;/span&gt;
&lt;span&gt;relativeURLs&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there are still issues, you can fix them whenever you come across them incrementally.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;After all these steps, you should be able to successfully host your website on IPFS. If you do it, make sure to let me know by sending an email, a tweet or comment on where you&amp;rsquo;re reading this from.&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-25T21:47:03+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2017/06/unprotected-redis/">
	<title>Gokberk Yaltirakli (gkbrk): Unprotected Redis Instances in the Wild</title>
	<link>https://gkbrk.com/2017/06/unprotected-redis/</link>
	<content:encoded>&lt;p&gt;If you follow programming blogs, it is not uncommon to come across articles
that mention how MongoDB exposes your private information without any
protection on default settings. But Mongo is not alone in this. Even with sane
defaults, it is possible to find that a lot of people have misconfigured their
databases for &lt;em&gt;their convenience&lt;/em&gt;. In this list of exposed servers is our
beloved Redis.&lt;/p&gt;

&lt;p&gt;Redis is normally highly praised among developers. But even this doesn&amp;rsquo;t stop
it from being used incorrectly. The server can accept a plaintext protocol,
which will make it easier for us to use. To test; we can download Redis, create
a server and insert some dummy keys into it (like &lt;code&gt;key1&lt;/code&gt;, &lt;code&gt;key2&lt;/code&gt;, &lt;code&gt;key3&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If we look at the Redis documentation, we will find a function called
&lt;a href=&quot;https://redis.io/commands/randomkey&quot;&gt;RANDOMKEY&lt;/a&gt;. The name is pretty
self-explanatory, it returns the name of a random key from the database. If we
open a TCP connection to the server and send &lt;code&gt;RANDOMKEY\r\n&lt;/code&gt;, the server might
respond with &lt;code&gt;key2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to find Redis servers that allow anonymous access, we will write a
script to scan the internet. The script will&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Generate random IP addresses&lt;/li&gt;
&lt;li&gt;Try to connect to them on the Redis port 6379&lt;/li&gt;
&lt;li&gt;If the connection is successful, send the RANDOMKEY command and check if
there is any output.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sending the RANDOMKEY command will let us check if the server we connected to
is actually Redis. It also allows us to filter empty servers if we want to.&lt;/p&gt;

&lt;p&gt;We can use Go to write a short script for this purpose.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight c&quot;&gt;&lt;code&gt;&lt;span&gt;ip&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Sprintf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;%d.%d.%d.%d:6379&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;
                    &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code will generate a random IP address with the port 6379, and print it on
the screen. When we&amp;rsquo;re scanning for lots of random IP addresses, it is likely
that we will attempt to connect to lots of addresses that have no servers
listening. In order to prevent slowdowns, we will set a timeout of 2 seconds.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight c&quot;&gt;&lt;code&gt;&lt;span&gt;conn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;net&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;DialTimeout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;tcp&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If our connection is successful, we set a new timeout of 5 seconds and send the
command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight c&quot;&gt;&lt;code&gt;&lt;span&gt;conn&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetDeadline&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Now&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Second&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Fprintf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;conn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;RANDOMKEY&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this, we try to read a line from the socket and print it along with the
IP. This will allow us to see which servers are empty and which ones have
content. It also lets us filter potential false positives that aren&amp;rsquo;t actually
Redis servers.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight c&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;line&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;
&lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Fscanln&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;conn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;line&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;line&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s wrap all this in a function along with error handling, and spawn 200
coroutines to scan the internet for unprotected Redis servers.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight c&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
    &lt;span&gt;&quot;net&quot;&lt;/span&gt;
    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;
    &lt;span&gt;&quot;math/rand&quot;&lt;/span&gt;
    &lt;span&gt;&quot;time&quot;&lt;/span&gt;
&lt;span&gt;)&lt;/span&gt;

&lt;span&gt;func&lt;/span&gt; &lt;span&gt;scanner&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;timeout&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Second&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;
        &lt;span&gt;ip&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Sprintf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;%d.%d.%d.%d:6379&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;
                           &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rand&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Intn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
        &lt;span&gt;conn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;net&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;DialTimeout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;tcp&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;conn&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetDeadline&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Now&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Second&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
            &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Fprintf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;conn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;RANDOMKEY&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; &lt;span&gt;line&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;
            &lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Fscanln&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;conn&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;line&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;err&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
                &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
                &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;line&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;go&lt;/span&gt; &lt;span&gt;scanner&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Scanln&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A script like this can be used to find servers. While possible uses for these
servers include data storage and transfer, or just dumping all the data; the
responsible thing to do would be running a reverse DNS on the IP and contacting
the website and letting them know about the issue.&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-25T21:46:32+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2017/05/android-dialer-packets/">
	<title>Gokberk Yaltirakli (gkbrk): Android Dialers are Stealing Your Data</title>
	<link>https://gkbrk.com/2017/05/android-dialer-packets/</link>
	<content:encoded>&lt;p&gt;In Android, most functionality of your phone is provided by apps. And this includes making phone calls as well. Android lets you replace the dialer app on your phone with a custom one. This can be amazing and horrifying at the same time. It is amazing because it allows programmers to create interesting ways to call people. But it also allows the creators of malicious apps to secretly send your private data to their servers.&lt;/p&gt;

&lt;p&gt;For tech-savvy people this isn&amp;rsquo;t such a big issue, trust only your phone manufacturer and open source apps and you&amp;rsquo;re golden. But things aren&amp;rsquo;t always so simple when people who aren&amp;rsquo;t familiar with the best privacy practices see these apps on their app store. On top of that, things can get out of your hand when &lt;a href=&quot;https://martinruenz.de/article/data-privacy/2017/05/03/something-is-wrong.html&quot;&gt;a phone update replaces the default telephone app on your phone with TrueCaller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wanted to see just how bad the situation was with my own eyes, so I equipped myself with a packet sniffer and started installing those apps on my phone. &lt;em&gt;I know, I know, not the safest thing to do. But your choices are limited when your computer is too slow to emulate anything more complicated than an atari.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This article is also available in &lt;a href=&quot;https://www.neyaptik.com/blog/gizliligimizi-hice-sayan-android-uygulamalari/&quot;&gt;Turkish&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Drupe, our first test subject&lt;/h2&gt;

&lt;p&gt;When you first install this app, it greets you with a permission request for your contact list and refuses to start without being granted the permission. But that&amp;rsquo;s not too suspicious, an app that you use for calling people, an app that advertises itself as &lt;em&gt;&amp;ldquo;Contacts Phone Dialer&amp;rdquo;&lt;/em&gt; can have tons of valid reasons for needing access to your contacts. But unfortunately, the first thing this app does after getting the permission is serializing all your contacts into a big string and sending it over to their servers.&lt;/p&gt;

&lt;p&gt;{{&amp;lt; centerimage &amp;ldquo;/img/articles/android-dialer-packets/drupe-packet.jpg&amp;rdquo; 150 &amp;gt;}}&lt;/p&gt;

&lt;h2&gt;Asus Dialer&lt;/h2&gt;

&lt;p&gt;Asus Dialer is the app that comes preinstalled with Asus phones. In my tests, it didn&amp;rsquo;t send anything from my contact list to their server. Also, no communication was observed when calling other numbers. It is consistent with the opening paragraph that a telephone app by a phone manufacturer wouldn&amp;rsquo;t steal your data carelessly, it&amp;rsquo;s just unnecessary risk for them.&lt;/p&gt;

&lt;h2&gt;Dialer+ / Contacts+&lt;/h2&gt;

&lt;p&gt;An API call to an endpoint called &amp;lsquo;/report&amp;rsquo; was made with every call I did. This API call included my email address, a token and the number I was calling. I assume a copy of my contact list was also sent but I was unable to take a screenshot of that.&lt;/p&gt;

&lt;p&gt;{{&amp;lt; centerimage &amp;ldquo;/img/articles/android-dialer-packets/contactsplus.jpg&amp;rdquo; 150 &amp;gt;}}&lt;/p&gt;

&lt;h2&gt;TrueCaller&lt;/h2&gt;

&lt;p&gt;TrueCaller, the telephone app which another blogger was suspicious of, is also guilty in this regard. It sends all your call start-end times and some more data such as outgoing call and number dialed events to an analytics server. On top of that, it keeps track of calls and reports to their server when they start and end, along with the number called and a client ID.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
    &lt;a href=&quot;https://gkbrk.com/img/articles/android-dialer-packets/truecaller1.jpg&quot;&gt;
        &lt;img src=&quot;https://gkbrk.com/img/articles/android-dialer-packets/truecaller1.jpg&quot; width=&quot;150&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;https://gkbrk.com/img/articles/android-dialer-packets/truecaller2.jpg&quot;&gt;
        &lt;img src=&quot;https://gkbrk.com/img/articles/android-dialer-packets/truecaller2.jpg&quot; width=&quot;150&quot; /&gt;
    &lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;This extensive collection of information is enough to gather when you to talk with people, and who you talk with. Since these apps are installed by a lot of people and your name is in their contacts list, even if you don&amp;rsquo;t install the apps you can still be tracked to a degree.&lt;/p&gt;

&lt;h2&gt;The Sad State of Privacy&lt;/h2&gt;

&lt;p&gt;All the apps I tested were the top results for the search &lt;strong&gt;dialer&lt;/strong&gt;. Some of them were given the &lt;em&gt;Editor&amp;rsquo;s Choice&lt;/em&gt; branding and all of them had massive install numbers. If the most popular dialer apps, the ones that have been approved by &amp;ldquo;editors&amp;rdquo;, disregard our privacy like that; I can&amp;rsquo;t even imagine the kind of intrusion shady apps will do.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks for reading my blog post. If you subscribe to my RSS feed in 10 seconds you will have good privacy for 10 years, &lt;em&gt;I hope&lt;/em&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-25T21:45:11+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2017/04/graphs-from-my-todo-txt/">
	<title>Gokberk Yaltirakli (gkbrk): Graphs From My Todo.txt</title>
	<link>https://gkbrk.com/2017/04/graphs-from-my-todo-txt/</link>
	<content:encoded>&lt;p&gt;I am a really lazy person, there, I said it. I also get distracted really often. These two things combined might be the worst thing that can happen to one&amp;rsquo;s productivity. After trying many methods of creating todo lists, I have settled on two. Markdown files for detailed note-taking, and todo.txt for the list of things to do. On my phone, the &lt;a href=&quot;https://f-droid.org/repository/browse/?fdid=nl.mpcjanssen.simpletask&quot;&gt;Simpletask Cloudless&lt;/a&gt; app did an amazing job of bringing some order into my chaotic schedule.&lt;/p&gt;

&lt;p&gt;But I felt that I could use some more incentive to do work. Something to gameify my tasks, if you will. What better way do this than a fancy graph with some numbers. I decided to host the resulting graph on my website and regularly update it.&lt;/p&gt;

&lt;p&gt;If you want to see the final result, you can see the code file &lt;a href=&quot;https://gist.github.com/gkbrk/a610af06f5440836aa8f4844c596dec4&quot;&gt;here&lt;/a&gt; and the resulting graph &lt;a href=&quot;https://gkbrk.com/stats&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Parsing the todo file&lt;/h3&gt;

&lt;p&gt;Normally, we would need to parse the todo.txt format, but since we&amp;rsquo;re only going to look at the completed tasks, we can get by with some string splitting. Let&amp;rsquo;s write a Python function to &amp;ldquo;parse&amp;rdquo; the file and get some statistics from it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;get_stats&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;data&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{}&lt;/span&gt;
    &lt;span&gt;with&lt;/span&gt; &lt;span&gt;open&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;todofile&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;line&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;todofile&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
            &lt;span&gt;date&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;line&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;split&lt;/span&gt;&lt;span&gt;()[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;date&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;data&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
                &lt;span&gt;data&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
            &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
                &lt;span&gt;data&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function returns a dictionary of dates and the number of tasks completed. There&amp;rsquo;s only one problem with this, the days where we did nothing are skipped, making our graph look wrong. To fix this, we will write another function to return the dates of the last 15 days. We&amp;rsquo;ll use the &lt;a href=&quot;https://docs.python.org/3/library/datetime.html&quot;&gt;datetime&lt;/a&gt; library for this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;datetime&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt; &lt;span&gt;get_last_days&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;days&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;day&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;days&lt;/span&gt;&lt;span&gt;)[::&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]:&lt;/span&gt;
        &lt;span&gt;date&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;datetime&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;today&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; &lt;span&gt;datetime&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;timedelta&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;days&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;day&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;date&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isoformat&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;# Isoformat is 2017-04-18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that we can collect these values on an array, which we will use to make our final graph. My todo archive is at the Sync folder, which is synchronized with my phone regularly.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;stats&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;get_stats&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;/home/leonardo/Sync/default/done.txt&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;

&lt;span&gt;todoCounts&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[]&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; &lt;span&gt;date&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;get_last_days&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;# Get the value from the todo.txt file&lt;/span&gt;
    &lt;span&gt;# Use 0 as default&lt;/span&gt;
    &lt;span&gt;todoCounts&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;append&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;stats&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Creating the graph&lt;/h3&gt;

&lt;p&gt;The only thing left to do is plot these values on a graph. For the graph, we&amp;rsquo;ll use &lt;a href=&quot;https://matplotlib.org/index.html&quot;&gt;matplotlib&lt;/a&gt;. Let&amp;rsquo;s configure it a little so the graph looks like what we want.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;matplotlib.pyplot&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;plt&lt;/span&gt;

&lt;span&gt;plt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;grid&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;plt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;Todo.txt Progress&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;plt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ylabel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;Number of tasks done&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should display a grid behind the line graph and add titles to make the plot more clear.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;plt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;yticks&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;max&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;todoCounts&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;span&gt;plt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;xticks&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;range&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;get_last_days&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;rotation&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will make the Y axis only have integers and get rid of fractional values, giving us a cleaner graph. It will also write the dates below the graph, rotated 80 degrees to fit together.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s call the &lt;em&gt;plot&lt;/em&gt; function to put the values into our graph and save it to my websites public folder.
&amp;ldquo;`python
plt.plot(todoCounts, marker=&amp;quot;o&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;plt.tight_layout()
plt.savefig(&amp;ldquo;public/img/todo.jpeg&amp;rdquo;, dpi=100)
&amp;ldquo;`&lt;/p&gt;

&lt;h3&gt;Final words&lt;/h3&gt;

&lt;p&gt;I added this script to the hooks on my websites Makefile, so everytime I compile my blog it will get updated. One of the reasons I put it public is to give me some feeling of responsibility and judgement, even if practically no one will look at it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gkbrk.com/img/todo.jpeg&quot; alt=&quot;Todo list graph&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hey everyone! Thanks for reading my blog post. If you enjoyed it, you can check out my other posts or subscribe via RSS. RSS is still relevant, right?&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-25T21:44:27+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2017/02/numerical-domains-of-china/">
	<title>Gokberk Yaltirakli (gkbrk): Numerical Domains of China</title>
	<link>https://gkbrk.com/2017/02/numerical-domains-of-china/</link>
	<content:encoded>&lt;p&gt;I recently noticed that numbers are used a lot in China for email addresses and user names. I also found out that a number of popular websites, such as Alibaba and Baidu, had official domain names that are entirely numbers. It seemed that people had a preference for numbers instead of latin letters, and even big websites wanted to accommodate for this.&lt;/p&gt;

&lt;p&gt;My girlfriend later confirmed that there are indeed lots of websites using just numbers as their domains. She told me this is sometimes used as a way to hide websites, mostly gambling and porn, and in some cases even sell access to them by just getting money and giving the secret domain name in exchange.&lt;/p&gt;

&lt;p&gt;Wait a second! This sounds like security through obscurity, hiding things in plain sight. It&amp;rsquo;s a very creative way to restrict and sell access to websites, and it clearly works well enough for their purpose. But that&amp;rsquo;s not enough to stop us from finding them with a simple script. Numbers are very easy to generate and the fact that we&amp;rsquo;re looking for domains with all numbers increases our chances of coming across one.&lt;/p&gt;

&lt;h2&gt;Scanning random domains&lt;/h2&gt;

&lt;p&gt;My strategy in trying to find these websites is checking random domains until we find one. And the first step in anything involving randomness is to &lt;code&gt;import random&lt;/code&gt;. Now we can start our script by writing a generator for random domains.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;domains&lt;/span&gt;&lt;span&gt;():&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;&quot;{}.com&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;random&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;randint&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1000000&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will give us an endless stream of random domains. After this, we will want to check if these domains actually have a DNS record, which is basically checking if that domain exists. To do that; we can use the &lt;em&gt;socket&lt;/em&gt; library, mainly the &lt;em&gt;socket.gethostbyname&lt;/em&gt; function.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;ips&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;socket&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;gethostbyname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt; &lt;span&gt;socket&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All this code does is try to get the IP address for the domain and return it if we succeed. If the way we&amp;rsquo;re writing these functions look weird, don&amp;rsquo;t worry. They actually fit together quite nicely.&lt;/p&gt;

&lt;p&gt;These two functions should be enough to do random scans to see if anything turns up. We can use them together like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;domain&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;domains&lt;/span&gt;&lt;span&gt;():&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;ips&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will start scanning random domains and probably print lots of domains and their IP addresses. Here&amp;rsquo;s the full code of the scanner.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;socket&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;random&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt; &lt;span&gt;domains&lt;/span&gt;&lt;span&gt;():&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt; &lt;span&gt;True&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;&quot;{}.com&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;random&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;randint&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1000000&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt; &lt;span&gt;ips&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;socket&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;gethostbyname&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt; &lt;span&gt;socket&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;pass&lt;/span&gt;

&lt;span&gt;for&lt;/span&gt; &lt;span&gt;domain&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;domains&lt;/span&gt;&lt;span&gt;():&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;ips&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Future work and improvements&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re getting domains but you will notice some of them are just &lt;strong&gt;Domains for sale!&lt;/strong&gt; pages. In order to help us find interesting domains faster, we can write another function to grab the title of these websites.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;titles&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;html&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;requests&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;http://{}&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;),&lt;/span&gt; &lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;
        &lt;span&gt;title&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;re&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;search&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&amp;lt;title&amp;gt;(.*?)&amp;lt;/title&amp;gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;html&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;title&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
            &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;title&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;group&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can combine this with the two other functions in order to print valid domains with their title, and print just the domains if there isn&amp;rsquo;t any title.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;domain&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;domains&lt;/span&gt;&lt;span&gt;():&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;ips&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;title&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;titles&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
            &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;title&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
            &lt;span&gt;break&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
            &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;ip&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are some easy ways this script can be improved in the future. Adding multithreading or an asynchronous DNS implementation might increase the performance. Also highlighting certain keywords and characters in the title should help us find interesting websites more efficiently.&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-25T21:43:14+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="https://wozniak.ca/blog/2018/06/25/Massacring-C-Pointers/index.html">
	<title>Geoff Wozniak (GeoffWozniak): Massacring C Pointers</title>
	<link>https://wozniak.ca/blog/2018/06/25/Massacring-C-Pointers/index.html</link>
	<content:encoded>&lt;p&gt;
I'm taking a break from debugging books to talk about a calamitous shitshow of textbook writing: &lt;i&gt;Mastering C Pointers: Tools for Programming Power&lt;/i&gt;, by Robert J. Traister.
&lt;/p&gt;

&lt;p&gt;
I learned of the book through a &lt;a href=&quot;https://www.youtube.com/watch?v=8SUkrR7ZfTA&quot;&gt;talk&lt;/a&gt; by Brian Kernighan where he refers to the book as probably “the worst C programming textbook ever written.”&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;https://wozniak.ca/blog/rss.xml#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
He doesn't name it but &lt;a href=&quot;https://twitter.com/johnregehr/status/1003411102791692288&quot;&gt;with some help&lt;/a&gt; I was able to track down his obliquely accurate reference.
&lt;/p&gt;

&lt;p&gt;
This book has become my &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=white%20whale&quot;&gt;white whale&lt;/a&gt;.
Since I started reading debugging books, and especially now that I'm digging through older ones, I find bits of advice that simply don't work today.
While some of it could be construed as useless or idiotic, I've always found the authors come from a position of earnestness, attempting to draw the best conclusions based on decent principles and what they knew at the time they wrote it.
In some cases they may not have known much, but they're honestly and humbly trying to impart some wisdom.
&lt;/p&gt;

&lt;p&gt;
When Kernighan put up the following example, I saw what seemed to be the opposite of that.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
char *combine(s, t)
char *s, *t;
{

      int x, y;
      char r[100];

      strcpy(r, s);
      y = strlen(r);
      for (x = y; *t != '\0'; ++x)
           r[x] = *t++;

      r[x] = '\0';

      return(r);

}
&lt;/pre&gt;

&lt;p&gt;
This program (formatting preserved) is taken from the first edition of the book (p.146).
It's horrific (Kernighan calls it “malpractice”).
It does not exhibit the genuineness I have seen with, say, books from the late 1970s on how to debug BASIC programs.
I didn't know what it was.
Deceit?
Laziness?
Unremitting ignorance?
What is the mindset of someone who writes this, presumably thinking it's a good idea?
Can the whole book be that bad?
Kernighan said it was.
I had to know.
&lt;/p&gt;

&lt;p&gt;
The book has two editions: the first was published in 1990, the second in 1993.
The fact that there are two editions piqued my curiosity even more.
It sold enough to make another version?
Is that horrible example corrected?
I obtained a copy of each and read them.
&lt;/p&gt;

&lt;p&gt;
Reviewing the book is pointless.
Kernighan was right: it's garbage.
And the second edition only makes things worse.
Teaching from either one would be a breach of ethics.
If you follow Traister’s coding practices, even adjusted for today's standards, you are &lt;i&gt;guaranteed&lt;/i&gt; to create defects and vicious, latent bugs.
A subtly pernicious aspect of the book is the casual tone of the writing.
It’s informal enough that if you don’t really know much about C what he says sort of makes sense, despite the sloppy terminology and mixed, inaccurate metaphors.
&lt;/p&gt;

&lt;p&gt;
Any trained programmer will recognize the lessons as worthless.
His terminology is all over the map and typically inaccurate, if not plainly wrong.
Expressions “return a value.”
Values are “handed” into locations.
Constants are “written directly into the program.”
A union is a “specialized pointer.”
The terminology isn’t even consistent.
Micro-optimizations are stressed at all times, and program efficiency is valued over comprehension.
He can’t even define a pointer correctly: “A pointer is a special variable that returns the address of a memory location.”
It does not take long to realize Traister has no idea what he’s talking about.
&lt;/p&gt;

&lt;p&gt;
Although I’m not going to go over the content (that would take far too long since there’s nothing redeeming there), I did take extensive notes.
You can &lt;a href=&quot;https://wozniak.ca/blog/notes.html&quot;&gt;read them&lt;/a&gt;, if you are so inclined.
&lt;/p&gt;

&lt;p&gt;
I must, however, take a moment to single out the code.
It is universally bad and much of it is simply wrong.
(Imagine trying to learn programming principles from a book that contains a large number of programs that don’t even compile.)
I’ve &lt;a href=&quot;https://wozniak.ca/blog/code.html&quot;&gt;transcribed&lt;/a&gt; some of the programs and annotated them with comments so that you can get a taste of how inept Traister is as a C programmer.
One thing to keep in mind (both for the programs and the notes) is that C89/C90 was new at the time and that the code was written on (and for) MS-DOS systems of the late 1980s/early 1990s.
Things were a bit different then.
&lt;/p&gt;

&lt;p&gt;
Enough about the material.
I want to explore the question of how something so wrong even got written.  It’s not that everything in the book is wrong, but it feels like when it’s right, it’s right by accident.
&lt;/p&gt;

&lt;p&gt;
Traister has &lt;a href=&quot;https://www.amazon.com/Robert-J.-Traister/e/B001H6UPHY/ref=sr_ntt_srch_lnk_1?qid=1529540256&amp;sr=1-1&quot;&gt;written&lt;/a&gt; other books, some about electronics and some about programming, one called &lt;i&gt;Going from BASIC to C&lt;/i&gt;.
In &lt;i&gt;Mastering C Pointers&lt;/i&gt;, he talks about a product he created called CBREEZE that converts BASIC code to C.
Throughout the book he makes passing, roundabout references to BASIC and uses terminology that suggests he’s written a lot of BASIC code.
For example, there is a whole chapter on using pointers to access memory, where reading and writing memory is instead called “peeking” and “poking”, based on the PEEK and POKE instructions in BASIC.
He also says that it took him a couple of tries to learn C coming from BASIC.
In short, I’m convinced he’s knowledgeable about BASIC and has worked on writing software for small, electronic devices.
&lt;/p&gt;

&lt;p&gt;
Why is this important?
As I read the book (and if you read my notes, you know where this is going) I started to notice something in the wording and tone.
The further I progressed the more I became convinced of it, and I think it explains how he managed to mangle the explanation of C pointers so badly.
&lt;/p&gt;

&lt;p&gt;
I don’t think he understands the call stack.
&lt;/p&gt;

&lt;p&gt;
My argument for this interpretation requires a little knowledge of BASIC and embedded devices.
&lt;/p&gt;

&lt;p&gt;
With BASIC, the key thing to know about most implementations at the time is that there were no functions and no scope aside from the global scope.&lt;sup&gt;&lt;a id=&quot;fnr.2&quot; class=&quot;footref&quot; href=&quot;https://wozniak.ca/blog/rss.xml#fn.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
The closest thing to a function in BASIC is the GOSUB command.
The GOSUB command jumps to a line and executes code until it gets to a RETURN statement, where control is transferred back to the line following the GOSUB command.
Within a GOSUB you can jump somewhere else with another GOSUB.
The control follows a stack principle, but no arguments are passed.
GOSUB routines are a way to factor out common code, but that common code has to work on global variables.
(And yes, it’s as terrible as it sounds.)
&lt;/p&gt;

&lt;p&gt;
Now, consider the case of simple electronic devices.
Even today some embedded devices, usually programmed using C, do not have a call stack that dynamically allocates space for automatic variables.
There simply isn’t enough memory for it.
Instead, the compiler lays out memory such that each function’s local variables have fixed memory addresses (a “compiled stack” model).
The only stack you have is for return addresses and it is probably handled in hardware.
&lt;/p&gt;

&lt;p&gt;
Suppose you’re used to writing BASIC for small memory electronic devices and you learn about C.
You read about pointers and realize something: it’s possible to write a subroutine that can change variables &lt;i&gt;without knowing their names&lt;/i&gt;.
It’s manna from heaven!
You don’t have to devote global variables to being the “parameters” of your subroutines anymore.
Life is great.
&lt;/p&gt;

&lt;p&gt;
This is the mindset I think Traister had and never got past.
In the book there is one fleeting mention of the stack in reference to excessive (automatic) memory allocation.
(On MS-DOS, if the space for local variables is too large in the program, it might not compile.)
He consistently describes variables as having “exclusive” addresses in the program.
His writing about pointers suggests that he thinks, for each function, space is set aside to hold the local variables for the duration of the program, but you can only access them when inside the function in which they were declared.
So pointers are really powerful because you can provide this address to another function and it can change the value using only a parameter.
&lt;/p&gt;

&lt;p&gt;
Further evidence for his lack of understanding is that he frequently cites ridiculous space micro-optimizations within functions, such as avoiding the use of integers for index variables, if possible.
Another one, mentioned often, is local &lt;code&gt;char&lt;/code&gt; arrays that have a fixed size.
There are good reasons to not use them but his are not among them.
His admonishment is that they waste space.
Technically, that is true, but they don't exist until they're on the stack.
And he never talks about global or file variables.
He only refers to locals with “exclusive” addresses “set aside” for variables.
&lt;/p&gt;

&lt;p&gt;
This interpretation runs into some problems once you start asking how functions with malloc will work, but it's worth pointing out that there is almost no discussion about memory management.
In a book devoted to C pointers, that's a toxic mix of gross negligence and incompetence.
There is literally one short paragraph devoted to talking about the &lt;code&gt;free&lt;/code&gt; function&amp;#x2014;and it's characterized as a “side note.”
&lt;/p&gt;

&lt;p&gt;
Another sticking point in this interpretation is Traister’s incomprehensible approach to writing functions that take a variable number of arguments.
He does this by passing an arbitrary number of arguments to a function (the first being the number of arguments) and accessing them using offsets from the address of the first argument.
This suggests he has some idea about parameters being passed in a dynamic fashion, but it is so spectacularly wrong&lt;sup&gt;&lt;a id=&quot;fnr.3&quot; class=&quot;footref&quot; href=&quot;https://wozniak.ca/blog/rss.xml#fn.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; you’re left wondering if he even tried his programs out before publishing them.
&lt;/p&gt;

&lt;p&gt;
Honestly, this is the most generous interpretation of the text I could come up with, and it still paints a terrible picture.
Occam's Razor suggests that Traister is just clueless.
But like &lt;a href=&quot;https://www.youtube.com/watch?v=01l1WIC9mBo&quot;&gt;analyzing a terrible movie&lt;/a&gt; that somehow gets made, it's more fun to reason through the “behind the scenes” parts.
&lt;/p&gt;

&lt;p&gt;
Given the ineptness of the book, you'd think it was self-published.
You would be wrong.
It was published through Academic Press, which was a division of Harcourt, Brace &amp;amp; World at the time, but is now an “imprint of Elsevier.”
&lt;/p&gt;

&lt;p&gt;
In the preface of the second edition it says that the first edition was reviewed “by a professional C programmer hired by the publisher.”
That programmer said it should not be published.
That programmer was right, but the publisher went ahead and published it anyway.
&lt;/p&gt;

&lt;p&gt;
Since there was a second edition, the assumption is that the book sold well.
According to WorldCat, &lt;i&gt;Mastering C Pointers&lt;/i&gt; is in at least &lt;a href=&quot;https://www.worldcat.org/title/mastering-c-pointers/oclc/898329209&amp;referer=brief_results&quot;&gt;242 libraries&lt;/a&gt;, most appearing to be the first edition, but I didn’t check them all.&lt;sup&gt;&lt;a id=&quot;fnr.4&quot; class=&quot;footref&quot; href=&quot;https://wozniak.ca/blog/rss.xml#fn.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
It claims to be one of the first books to tackle the subject of pointers in C, which is often a sticking point for novice programmers.
The lack of material in this area at the time is probably why it sold.
I could not track down a review of this book anywhere (and yes, I looked through scans of Byte Magazine et al.), but I did find reviews for other C books in the 1980s and what I found suggested that pointers were not covered well, if at all.
In other words, like many books&amp;#x2014;and tech books in particular&amp;#x2014;it sold because of its title and good timing.&lt;sup&gt;&lt;a id=&quot;fnr.5&quot; class=&quot;footref&quot; href=&quot;https://wozniak.ca/blog/rss.xml#fn.5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;

&lt;p&gt;
If you browse search results for other books by Traister you’ll find a lot of questionable sounding titles: &lt;i&gt;Making money with your microcomputer&lt;/i&gt; (1982), &lt;i&gt;Leaping from BASIC to C++&lt;/i&gt; (1994), &lt;i&gt;Learn C in Two Weeks with Run/C and CBreeze&lt;/i&gt; (1987).
The breadth of topics covered in his works seems exhausting: &lt;i&gt;Beginner’s Guide to Reading Schematics&lt;/i&gt; (1991), &lt;i&gt;Astronomy and Telescopes: A Beginner’s Handbook&lt;/i&gt; (1983), &lt;i&gt;Make your own professional home video recordings&lt;/i&gt; (1982), &lt;i&gt;Cave Exploring&lt;/i&gt; (1983), just to name a few.
You start to wonder if this is actually the same person who writes all this.
Then you start to wonder if maybe all these books just touch on the topics, and are churned out mainly to try and make a buck.
I had a hard time finding a review for any of them (the best resource was &lt;a href=&quot;https://archive.org/search.php?query=robert%20j%20traister&amp;sin=TXT&quot;&gt;archive.org&lt;/a&gt;).
Practically all I could find about his books was ads for them&amp;#x2014;and even then it wasn’t that much, which is odd given the apparent volume of output from him.
I did manage to find two reviews for his book &lt;i&gt;Programming in C for the Microcomputer User&lt;/i&gt; (1984): one was favourable (80 Micro, Nov. 1984), the other was not (Practical Computing, Oct. 1985).
The only other book I can find of his that seems to have some staying power is the schematics book, which went to a third edition.&lt;sup&gt;&lt;a id=&quot;fnr.6&quot; class=&quot;footref&quot; href=&quot;https://wozniak.ca/blog/rss.xml#fn.6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;

&lt;p&gt;
Ultimately, the aspect of &lt;i&gt;Mastering C Pointers&lt;/i&gt; that truly disturbs me is that there are probably a fair number of people who actually learned C pointers from it.
There’s no way to know how much of an impact this book had on programmers in the 1990s, but given the number of copies in libraries it must have had some.
It’s hard not to wonder how much of the terrible C code that has made its way into production can be attributed to the awful advice in Traister’s travesty of a text.
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://wozniak.ca/blog/code.html&quot;&gt;Annotated code samples from the book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wozniak.ca/blog/notes.html&quot;&gt;Notes I took&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Thanks to John Regehr for helping me track down the book in the first place.
The title was &lt;del&gt;stolen&lt;/del&gt; inspired by one of his tweets.
&lt;/p&gt;


&lt;div class=&quot;timestamp&quot;&gt;
&lt;p&gt;
June 25, 2018
&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;https://wozniak.ca/blog/rss.xml#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class=&quot;footpara&quot;&gt;&lt;p class=&quot;footpara&quot;&gt;
His mention of the book comes at 27:44 in the linked talk.  Also, if you watch the talk, be forewarned that an alarm goes off at around the 55 minute mark and it's quite jarring.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.2&quot; class=&quot;footnum&quot; href=&quot;https://wozniak.ca/blog/rss.xml#fnr.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;div class=&quot;footpara&quot;&gt;&lt;p class=&quot;footpara&quot;&gt;
This is not strictly true.  You could define a function, but it could only take one argument and had to be defined by an expression that could fit on one line.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.3&quot; class=&quot;footnum&quot; href=&quot;https://wozniak.ca/blog/rss.xml#fnr.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;div class=&quot;footpara&quot;&gt;&lt;p class=&quot;footpara&quot;&gt;
Of course, it’s more nuanced than this because you can actually make his code work in some cases.  See the discussion in the code samples for more information.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.4&quot; class=&quot;footnum&quot; href=&quot;https://wozniak.ca/blog/rss.xml#fnr.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; &lt;div class=&quot;footpara&quot;&gt;&lt;p class=&quot;footpara&quot;&gt;
I tried to get some data on the number of times it had been loaned out by my alma mater’s library system, but was not able to get anything.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.5&quot; class=&quot;footnum&quot; href=&quot;https://wozniak.ca/blog/rss.xml#fnr.5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; &lt;div class=&quot;footpara&quot;&gt;&lt;p class=&quot;footpara&quot;&gt;
This is not meant to say anything particular about the tech publishing industry at the time.  I think the same opportunism that was in effect then is alive and well today, and probably always has been.  Arguably, it’s worse today.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.6&quot; class=&quot;footnum&quot; href=&quot;https://wozniak.ca/blog/rss.xml#fnr.6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; &lt;div class=&quot;footpara&quot;&gt;&lt;p class=&quot;footpara&quot;&gt;
I only know this because of an odd, rambling &lt;a href=&quot;https://www.youtube.com/watch?v=7hX1BkWlUso&quot;&gt;promotional video&lt;/a&gt; for the book where Traister’s name is forgotten by the new author.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2018-06-25T11:42:00+00:00</dc:date>
</item>
<item rdf:about="https://www.brautaset.org/articles/2018/org-mode-rss.html">
	<title>Stig Brautaset (stig): Creating an RSS feed with Org mode</title>
	<link>https://www.brautaset.org/articles/2018/org-mode-rss.html</link>
	<content:encoded>&lt;p&gt;
    A post to announce that this site now has an RSS feed generated from
    the front page's content, and explain how I create it.
    &lt;/p&gt;</content:encoded>
	<dc:date>2018-06-25T08:48:00+00:00</dc:date>
	<dc:creator>Stig Brautaset</dc:creator>
</item>
<item rdf:about="https://www.cambus.net/booting-openbsd-kernels-in-efi-mode-with-qemu/">
	<title>Frederic Cambus (fcambus): Booting OpenBSD kernels in EFI mode with QEMU</title>
	<link>https://www.cambus.net/booting-openbsd-kernels-in-efi-mode-with-qemu/</link>
	<content:encoded>&lt;p&gt;I've been working on stuff involving the EFI framebuffer lately, and needed a
way to quickly test kernels without having to reboot my development machine
each and every time.&lt;/p&gt;

&lt;p&gt;As it turns out, it's possible to achieve using &lt;strong&gt;OVMF&lt;/strong&gt; (Open Virtual Machine
Firmware), a BSD licensed &lt;strong&gt;UEFI firmware implementation&lt;/strong&gt; targetted at virtual
machines. A prebuilt image can be downloaded &lt;a href=&quot;https://sourceforge.net/projects/edk2/files/OVMF/OVMF-X64-r15214.zip/download&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will need to create two drives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;One drive using a FAT filesystem to store the EFI payload (the OpenBSD
bootloader)&lt;/li&gt;
  &lt;li&gt;Another drive using a FFS filesystem containing the OpenBSD kernel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thankfully, QEMU allows to create virtual drives with FAT filesystems from
local directories, and we can easily create an FFS filesystem image using
&lt;strong&gt;makefs(8)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We will start by creating a directory structure:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; bootloader/efi/boot
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; kernel/etc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then copy the OpenBSD &lt;strong&gt;EFI bootloader&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /usr/mdec/BOOTX64.EFI bootloader/efi/boot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, an OpenBSD EFI bootloader can be downloaded &lt;a href=&quot;https://fastly.cdn.openbsd.org/pub/OpenBSD/snapshots/amd64/BOOTX64.EFI&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, we need to place the EFI firmware image at the root of our directory, and
the OpenBSD kernel we want to boot in the kernel directory.&lt;/p&gt;

&lt;p&gt;The directory structure should look as follow:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OVMF.fd
bootloader
bootloader/efi
bootloader/efi/boot
bootloader/efi/boot/BOOTX64.EFI
kernel
kernel/etc
kernel/bsd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now create the &lt;strong&gt;random.seed&lt;/strong&gt; file and build the FFS filesystem image:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;dd &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/random &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kernel/etc/random.seed &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512 &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
makefs &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ffs kernel.img kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, let's start QEMU:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;qemu-system-x86_64 &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--bios&lt;/span&gt; OVMF.fd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raw,file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fat:rw:bootloader,media&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;disk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raw,file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kernel.img,media&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;disk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And boot our kernel:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boot&amp;gt; boot hd1a:/bsd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2018-06-24T11:50:00+00:00</dc:date>
</item>
<item rdf:about="http://pepijndevos.nl/2018/06/24/sysenv-virtualenv-for-system-packages">
	<title>Pepijn de Vos (pepijndevos): sysenv: virtualenv for system packages</title>
	<link>http://pepijndevos.nl/2018/06/24/sysenv-virtualenv-for-system-packages.html</link>
	<content:encoded>&lt;p&gt;I try to keep my Linux system as clean as possible, but for almost every project I inadvertently have to install some packages with &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;, build some from source with &lt;code class=&quot;highlighter-rouge&quot;&gt;make install&lt;/code&gt;, or even install some proprietary program that in turn requires more packages. So over time my system acquires more and more junk.&lt;/p&gt;

&lt;p&gt;To solve this problem, I made “&lt;code class=&quot;highlighter-rouge&quot;&gt;virualenv&lt;/code&gt; for system packages”, a little script that makes a &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; with an unholy combination of OverlayFS and bind mounts. From inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;, it looks and behaves exactly like your &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;, with no overhead or isolation whatsoever. The only difference is that writes to all system directories go to an overlay directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo bash activate.sh
(env)$ sudo apt-get install everything
(env)$ sudo make install
(env)$ echo &quot;Hello world&quot; &amp;gt; hello.txt
(env)$ ^D
$ everything
Command not found
$ cat hello.txt
Hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the Python world this is pretty much the standard. You make a &lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install&lt;/code&gt; all the things you need, and delete then environment after your project is done. I want this kind of behavior for &lt;em&gt;all&lt;/em&gt; of my software.&lt;/p&gt;

&lt;p&gt;Of course you can run everything in a VM, a Docker image, or a &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;. But these typically provide isolation that I don’t want or need. They also have a lot of overhead in RAM, disk space, and most importantly, effort on my part. However, the git-like overlay filesystems used by Docker gave me an idea.&lt;/p&gt;

&lt;p&gt;What if I made a &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;, but instead of putting an entire Debian installation inside it, make an overlay on my own system. The only trouble is that special directories like &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/sys&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev&lt;/code&gt; should work as usual, and preferably my &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; folder should also persist outside the &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The solution turns out to be relatively simple: My &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; and all the special directories are mounted with &lt;code class=&quot;highlighter-rouge&quot;&gt;mount --bind&lt;/code&gt;. All system directories like &lt;code class=&quot;highlighter-rouge&quot;&gt;/lib&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; are mounted with &lt;code class=&quot;highlighter-rouge&quot;&gt;mount -t overlay&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It works great for from-source installs and proprietary software. It also works for &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;, but I’m sure weird things will happen once you upgrade your system. Once it gets wonky, just nuke the env and start over.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pepijndevos/sysenv&quot;&gt;Get the code here&lt;/a&gt;, pull requests welcome.&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-24T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://www.jeffcarp.com/posts/cryptography-in-tensorflow/">
	<title>Jeff Carpenter (jeffcarp): Doing Cryptography in Tensorflow</title>
	<link>https://www.jeffcarp.com/posts/cryptography-in-tensorflow/</link>
	<content:encoded>TensorFlow, a popular machine learning framework, is actually more generally a platform for doing computation over tensors in the structure of a graph.
Cryptographic algorithms are frequently structured as the manipulation of vectors and matrices of bytes in the structure of a graph.
You might begin to see where this is going.
What follows is a completely frivolous experiment to implement various cryptographic algorithms in TensorFlow.
Important note: dear god please don&amp;rsquo;t use this code for real cryptography!</content:encoded>
	<dc:date>2018-06-23T20:00:14+00:00</dc:date>
</item>
<item rdf:about="https://silky.github.io/posts/2018-06-23-Diagrams-In-Hakyll.html">
	<title>Noon van der Silk (silky): Diagrams In Hakyll!</title>
	<link>https://silky.github.io/posts/2018-06-23-Diagrams-In-Hakyll.html</link>
	<content:encoded>&lt;div class=&quot;info&quot;&gt;
    Posted on June 23, 2018
    
        by Noon van der Silk
    
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;I stumbled across this blogpost of &lt;a href=&quot;http://www.corentindupont.info/blog/posts/Programming/2015-09-14-diagrams.html&quot;&gt;Corentin Dupont&lt;/a&gt; where he put together a library that allows you to modify your hakyll blog so that you can have inline diagrams! As anyone knows, this was amazingly exciting to me, because I love &lt;a href=&quot;https://archives.haskell.org/projects.haskell.org/diagrams/&quot;&gt;&lt;code&gt;diagrams&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;So I quickly tried to set it up; but, much to my sadness it didn’t immediately work.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Luckily, however, I was able to make it worked by hacking around in the two relevant repos:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://github.com/silky/diagrams-pandoc&quot;&gt;diagrams-pandoc&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;
&lt;a href=&quot;https://github.com/silky/hakyll-diagrams&quot;&gt;hakyll-diagrams&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The main result is a function, &lt;code&gt;pandocCompilerDiagrams&lt;/code&gt;, that I included into my hakyll site file like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;match &amp;quot;posts/*&amp;quot; $ do
    route $ setExtension &amp;quot;html&amp;quot;
    compile $ 
            (pandocCompilerDiagrams &amp;quot;images/diagrams&amp;quot; &amp;lt;|&amp;gt; pandocMathCompiler)
        &amp;gt;&amp;gt;= loadAndApplyTemplate &amp;quot;templates/post.html&amp;quot;    postCtx
        &amp;gt;&amp;gt;= saveSnapshot &amp;quot;content&amp;quot;
        &amp;gt;&amp;gt;= loadAndApplyTemplate &amp;quot;templates/default.html&amp;quot; postCtx
        &amp;gt;&amp;gt;= relativizeUrls&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;And so now, I can have inline diagrams! Check it out:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Imagine we had a circle:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;img src=&quot;http://silky.github.io/images/diagrams/374a326c0114a031.png&quot; /&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;example &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; circle &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;But now, what if the circle was repeated 5 times&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;img src=&quot;http://silky.github.io/images/diagrams/08c4ef90376ce8a9.png&quot; /&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;example &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; hcat (take &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;$&lt;/span&gt; repeat (circle &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Cool!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;To celebrate, let’s draw the Sierpinksi triangle:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The basic building block:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;img src=&quot;http://silky.github.io/images/diagrams/173ff52710458947.png&quot; /&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;sierp d &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; d &lt;span class=&quot;fu&quot;&gt;===&lt;/span&gt; (d &lt;span class=&quot;fu&quot;&gt;|||&lt;/span&gt; d) &lt;span class=&quot;fu&quot;&gt;#&lt;/span&gt; centerXY
example &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; sierp (triangle &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Let’s go!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;img src=&quot;http://silky.github.io/images/diagrams/ddbe64a73b5cee43.png&quot; /&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;sierp d &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; d &lt;span class=&quot;fu&quot;&gt;===&lt;/span&gt; (d &lt;span class=&quot;fu&quot;&gt;|||&lt;/span&gt; d) &lt;span class=&quot;fu&quot;&gt;#&lt;/span&gt; centerXY
example &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; foldl (\d _ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; sierp d) (triangle &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Colours!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;img src=&quot;http://silky.github.io/images/diagrams/3d45411fafd7d24c.png&quot; /&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import &lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Data.Colour.Palette.ColorSet&lt;/span&gt;

color n &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; rybColor (n&lt;span class=&quot;fu&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
 
sierp d n &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; d1 &lt;span class=&quot;fu&quot;&gt;===&lt;/span&gt; (d2 &lt;span class=&quot;fu&quot;&gt;|||&lt;/span&gt; d2) &lt;span class=&quot;fu&quot;&gt;#&lt;/span&gt; centerX
    &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;
        d1 &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; d &lt;span class=&quot;fu&quot;&gt;#&lt;/span&gt; bg (color n)
        d2 &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; d &lt;span class=&quot;fu&quot;&gt;#&lt;/span&gt; bg (color (n&lt;span class=&quot;fu&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))

example &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; foldl step d0 [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;]
    &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;
        d0       &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; triangle &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;#&lt;/span&gt; lw &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
        step d n &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; sierp d (n&lt;span class=&quot;fu&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Happy days!&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2018-06-23T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://defn.io/2018/06/23/ann-molten/">
	<title>Bogdan Popa (bogdan): Announcing Molten</title>
	<link>https://defn.io/2018/06/23/ann-molten/</link>
	<content:encoded>Today marks the first public release of molten, a modern API framework for Python I&amp;rsquo;ve been working on over the past couple of weeks.
Check it out and let me know what you think!</content:encoded>
	<dc:date>2018-06-23T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://pepijndevos.nl/2018/06/22/ev3-soccer-robot-with-ros">
	<title>Pepijn de Vos (pepijndevos): EV3 soccer robot with ROS</title>
	<link>http://pepijndevos.nl/2018/06/22/ev3-soccer-robot-with-ros.html</link>
	<content:encoded>&lt;p&gt;When I said that &lt;a href=&quot;http://pepijndevos.nl/2018/06/13/lego-ev3-robocup-robot.html&quot;&gt;ROS would be a steep learning curve&lt;/a&gt;, I did not expect to become a &lt;a href=&quot;https://github.com/pepijndevos/ev3dev-ros/blob/master/ev3-ros-cross.dockerfile&quot;&gt;Docker expert&lt;/a&gt; and a &lt;a href=&quot;https://github.com/ev3dev/ev3-kernel/commit/3a8f45f0a1953e441823e3804e260beb9ba12b3e&quot;&gt;kernel developer&lt;/a&gt; in the progress. But in the end it worked, with only a few seconds of lag.&lt;/p&gt;

 

&lt;p&gt;Meanwhile RoboTeam Twente &lt;a href=&quot;https://www.youtube.com/watch?v=0ePLMrKmb4U&amp;t=4235s&quot;&gt;won a game against Robodragons&lt;/a&gt;, but that’s sadly the only game they won. The finals looked a bit more fast-paced than this game, but not by a lot. It’s 10 minutes game time in an hour clock time. These top teams have impressive ball control though. There is some work to be done for Twente… But for now, back to ROS and EV3.&lt;/p&gt;

&lt;h3 id=&quot;installing-ros-on-the-ev3&quot;&gt;Installing ROS on the EV3&lt;/h3&gt;

&lt;p&gt;I headed over the ROS installation page, which states that on Debian they only provide x64 packages, not ARM. So I was kindly redirected to their page about compiling from source. However, the EV3 is far from powerful enough to compile ROS on the device, so a cross-compiler is needed.&lt;/p&gt;

&lt;p&gt;Ev3dev uses Docker images with Qemu to do this. But they provide several kinds of images, useful for either cross-compilation or for generating boot images for the EV3. However, ROS does not have a nicely self-contained installation process, so what I needed is a cross-compilation image that could also generate a boot image.&lt;/p&gt;

&lt;p&gt;ROS is like a fractal of package management, breaking at every stage. First you install Python packages to install stuff in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt; and then you install a bunch of stuff into a workspace, and then you tell it to install system packages for the dependencies of that stuff. Then you combine this into a standalone workspace, which can be used install &lt;em&gt;more&lt;/em&gt; packages in &lt;em&gt;more&lt;/em&gt; workspaces.&lt;/p&gt;

&lt;p&gt;So at this point I was learning about Dockerfiles and base images and Qemu and ROS releases and contexts and environments and source lists. And after a day of trying and hours of waiting, I had a shiny boot image with my cross-compiled ROS installation. And then David Lechner casually mentioned Debian does actually provide ARM packages, available with a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install ros-robot&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;learning-ros&quot;&gt;Learning ROS&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://pepijndevos.nl/images/robocup/rosgraph.png&quot; alt=&quot;graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So after you’re three levels deep in workspaces that you have &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;d, you can begin creating your own packages, by – you guessed it – more package management. So you edit your package XML file for the dependencies of your package and run &lt;code class=&quot;highlighter-rouge&quot;&gt;rosmake&lt;/code&gt; which is like CMake for ROS. You also need to run &lt;code class=&quot;highlighter-rouge&quot;&gt;rosmake&lt;/code&gt; on Python projects to resolve dependencies and generate more code.&lt;/p&gt;

&lt;p&gt;In exchange for all this work, ROS provides a lot of powerful tools, like &lt;code class=&quot;highlighter-rouge&quot;&gt;roscd&lt;/code&gt;, which is like &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; but for ROS, &lt;code class=&quot;highlighter-rouge&quot;&gt;rosed&lt;/code&gt;, which is like &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; but for ROS, and &lt;code class=&quot;highlighter-rouge&quot;&gt;rosrun&lt;/code&gt; which is like running your code, but for ROS. I think you can guess what &lt;code class=&quot;highlighter-rouge&quot;&gt;rosls&lt;/code&gt; is for.&lt;/p&gt;

&lt;p&gt;After you have created a package, you can start creating nodes. Nodes can be written in a number of languages, as long as they can talk to the central ROS server which routes all the messages on different topics to all the interested nodes. As per Greenspun’s tenth rule, ROS contains an ad-hoc, informally-specified, bug-ridden, slow implementation of half of Erlang. An actor system is not provided, only callbacks.&lt;/p&gt;

&lt;p&gt;So now you have all these packages and nodes, and of course it would be silly to &lt;code class=&quot;highlighter-rouge&quot;&gt;rosrun&lt;/code&gt; all of them individually. So they provide &lt;code class=&quot;highlighter-rouge&quot;&gt;roslaunch&lt;/code&gt;, which is like &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; but for ROS. So you write some more XML, and &lt;code class=&quot;highlighter-rouge&quot;&gt;roslaunch&lt;/code&gt; will do the rest. It will even &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into remote machines to launch nodes on it.&lt;/p&gt;

&lt;p&gt;The goal was to run ROS on the EV3, but not all of ROS. To be more specific, one single node. The EV3 does not have enough RAM for two operating systems at the same time. So on the EV3 you &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; all the workspaces and &lt;code class=&quot;highlighter-rouge&quot;&gt;roscd&lt;/code&gt; into your package where you can &lt;code class=&quot;highlighter-rouge&quot;&gt;rosrun&lt;/code&gt; the node. But before doing that, you have to tell it where the server lives with &lt;code class=&quot;highlighter-rouge&quot;&gt;export ROS_MASTER_URI=http://pepijn-Latitude-E6420.local:11311&lt;/code&gt;. I tried to get &lt;code class=&quot;highlighter-rouge&quot;&gt;roslaunch&lt;/code&gt; to do it, but it’d run out of RAM and crash.&lt;/p&gt;

&lt;p&gt;So next I ran the listener from the tutorial on the EV3 and the talker on my laptop. Everything would appear to be fine, but no messages arrived. Long story short, it turns out you also need to set &lt;code class=&quot;highlighter-rouge&quot;&gt;ROS_HOSTNAME&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ROS_IP&lt;/code&gt; on both ends so that they can actually reach each other.&lt;/p&gt;

&lt;h3 id=&quot;writing-a-ros-node&quot;&gt;Writing a ROS node&lt;/h3&gt;

&lt;p&gt;With ROS running on my laptop and the EV3, and the basic listener working, it was time to actually write some code. But first, some more package management!&lt;/p&gt;

&lt;p&gt;ROS has a &lt;code class=&quot;highlighter-rouge&quot;&gt;joy&lt;/code&gt; package, to read joysticks, and a &lt;code class=&quot;highlighter-rouge&quot;&gt;teleop_twist_joy&lt;/code&gt; package that provides a node that converts &lt;code class=&quot;highlighter-rouge&quot;&gt;joy&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;twist&lt;/code&gt; messages. These packages are supposed to be in your system package manager, but they are not. So I installed them from source, but… package management… fast forward… I &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get purge&lt;/code&gt; the Ubuntu packages and use the official ROS Melodic packages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;launch&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pkg=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;joy&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;joy&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;joy_node&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;screen&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dev&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;str&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/dev/input/js0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deadzone&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;double&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pkg=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;teleop_twist_joy&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;twist&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;teleop_node&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;screen&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;enable_button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;int&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;axis_linear/x&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;int&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;axis_linear/y&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;int&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scale_linear/x&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;double&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scale_linear/y&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;double&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;axis_angular&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;int&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scale_angular&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;double&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/launch&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Now&lt;/em&gt; I can finally start writing code on the EV3. So I copy the Python code from last time, and replace the joystick code with &lt;code class=&quot;highlighter-rouge&quot;&gt;rospy&lt;/code&gt; listener code. As I get ready to test my code, it dawns on my that &lt;code class=&quot;highlighter-rouge&quot;&gt;rospy&lt;/code&gt; is Python 2, while &lt;code class=&quot;highlighter-rouge&quot;&gt;ev3dev-lang-python&lt;/code&gt; is Python 3. I go back to my Docker image and change it to Python 3. An hour later it crashes with an Unicode error, and another hour later with a package version mismatch. The next day it &lt;a href=&quot;https://hub.docker.com/r/pepijndevos/ev3dev-ros/&quot;&gt;finally works&lt;/a&gt;, but it seems to be missing half the packages.&lt;/p&gt;

&lt;p&gt;I consider writing my node in C++, but worry about all the package management needed to get &lt;code class=&quot;highlighter-rouge&quot;&gt;ev3dev-lang-c++&lt;/code&gt; into the ROS universe. I consider my alternatives, and without further package management, I succeed in using a Vala/GTK/GObject binding called &lt;code class=&quot;highlighter-rouge&quot;&gt;Ev3devKit&lt;/code&gt; from Python 2.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gi&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;require_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Ev3devKit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'0.5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gi.repository&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ev3devKit&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ev3devKit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DevicesDeviceManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;motors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_tacho_motors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;motors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ev3-ports:'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'stop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_speed_sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'run-forever'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that in place, all that is left is a few trivial changes to the code from last time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python2&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;threading&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;geometry_msgs.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Twist&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sensor_msgs.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Joy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rospy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kit&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## Initializing ##&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;angles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deg2rad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;36.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;36.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MotorThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Engine running!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'outA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'outB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'outD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'outC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'outA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'outB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'outD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'outC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;motor_thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotorThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;motor_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#rospy.loginfo(data)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;btn_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal_shutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'button pressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ev3dev'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anonymous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cmd_vel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Twist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;joy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Joy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subscribed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</content:encoded>
	<dc:date>2018-06-22T00:00:00+00:00</dc:date>
</item>
<item rdf:about="tag:kmjn.org,2018-06-21:stamping_pdfs">
	<title>Mark J. Nelson (mjn): Stamping copyright information onto academic papers</title>
	<link>http://www.kmjn.org/notes/stamping_pdfs.html</link>
	<content:encoded>&lt;p&gt;
&lt;div class=&quot;fig figopt&quot;&gt;&lt;img src=&quot;http://www.kmjn.org/notes/images/acm_copyrightblock.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;
When preparing conference proceedings in computer science, a common
administrative task for the proceedings chair, after all the accepted papers
have been collected, is to stamp some kind of copyright or venue information
onto the first page of each paper. (Sometimes authors are asked to do this
directly, but it's also pretty common for the proceedings chair to add this
information later.)

&lt;p&gt;
I've run into this a few times now, and have even heard of people doing the
tedious job manually. Fortunately, it can be automated without much effort.
One way is with &lt;a href=&quot;https://www.pdflabs.com/tools/pdftk-server/&quot;&gt;pdftk&lt;/a&gt;, &quot;the PDF
toolkit&quot;.

&lt;p&gt;
First, prepare a 2-page &quot;stamp PDF&quot;. Its first page should have the text
you want overlaid onto the first page of the paper, at the position you want it
overlaid, taking care to match letter/a4 paper sizes, etc.; the rest of the
page should be blank. The second page of the stamp PDF should be completely
blank.

&lt;p&gt;
The pdftk command &lt;code&gt;multistamp&lt;/code&gt; takes a stamp PDF and overlays it
onto an input PDF as follows: it stamps the first page of the stamp pdf onto
the first page of the input pdf, the 2nd page onto the 2nd, and so on; but if
it runs out of stamp pages, it'll keep stamping the last one repeatedly onto
the rest of the input pages. Hence the blank 2nd stamp page here, since we only
want an overlay on the first page.

&lt;p&gt;
To stamp one file:
&lt;p&gt;
&lt;code&gt;pdftk paper.pdf multistamp stamp.pdf output paper_stamped.pdf&lt;/code&gt;

&lt;p&gt;
A Unix shell script to stamp all PDFs in the current directory, outputting
stamped versions into a new subdirectory without modifying the originals:

&lt;p&gt;
&lt;pre&gt;
mkdir stamped
for file in *.pdf
do
  pdftk &quot;$file&quot; multistamp stamp.pdf output &quot;stamped/$file&quot;
done
&lt;/pre&gt;

&lt;p&gt;
A similar process can be used if you want something stamped onto &lt;i&gt;every&lt;/i&gt;
page of a PDF, rather than only the first. In that case, make a single-page
stamp PDF, and use the pdftk command &lt;code&gt;stamp&lt;/code&gt; instead of
&lt;code&gt;multistamp&lt;/code&gt;.&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-21T12:00:00+00:00</dc:date>
</item>
<item rdf:about="https://cryptolosophy.org/defer-stacking-go">
	<title>Cryptolosophy (awn): Harnessing LIFO Defer Stacking in Go</title>
	<link>https://cryptolosophy.org/defer-stacking-go/</link>
	<content:encoded>&lt;p&gt;One of Go’s many useful features is the &lt;a href=&quot;https://golang.org/ref/spec#Defer_statements&quot;&gt;defer statement&lt;/a&gt;. It allows you to say, “I don’t want to do this right now, but please do it when this function returns”.&lt;/p&gt;

&lt;p&gt;Consider the following code:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start counting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;finished counting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Deferred statements are executed in last-in-first-out order, so this will output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;start counting
finished counting
2
1
0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can test it out for yourself on the &lt;a href=&quot;https://play.golang.org/p/2ped-RQAbcd&quot;&gt;playground&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But why is this property useful, and how can we use it to our advantage? Well, consider a slightly more complicated example:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// EqualBytes compares the contents of a container with a given slice.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EqualBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Attain the mutex.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// If sealed, first unseal.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unseal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reseal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Compare and return the result.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we see a comparison method for some object, a &lt;code class=&quot;highlighter-rouge&quot;&gt;*container&lt;/code&gt;. This object exposes a mutex and also has multiple states: sealed and unsealed. There’s two defer statements; the first releases the mutex and the second reseals the container.&lt;/p&gt;

&lt;p&gt;The obvious problem (?) is that after the function returns, there may be a delay before the container is resealed and so another thread could mistakenly access or modify the unsealed container before we have a chance to reseal it.&lt;/p&gt;

&lt;p&gt;Or could it? Look again. With LIFO, the order of execution will be:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// -&amp;gt; function returns&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reseal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The way &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; is designed made it so that we still own the mutex when we unseal, and so as long as we designed the rest of our API correctly, there should be no accidental access issues in multi-threaded applications.&lt;/p&gt;

&lt;p&gt;It’s worth thinking about this useful property the next time you use &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; in your code, and really taking advantage of it.&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-21T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://brooker.co.za/blog/2018/06/20/littles-law">
	<title>Marc Brooker (mjb): Telling Stories About Little's Law</title>
	<link>http://brooker.co.za/blog/2018/06/20/littles-law.html</link>
	<content:encoded>&lt;h1&gt;Telling Stories About Little's Law&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;Building Up Intuition with Narrative&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Little's_law&quot;&gt;Little's Law&lt;/a&gt; is widely used as a tool for understanding the behavior of distributed systems. The law says that the mean concurrency in the system (𝐿) is equal to the mean rate at which requests arrive (λ) multiplied by the mean time that each request spends in the system (𝑊):&lt;/p&gt;

&lt;p&gt;𝐿 = λ𝑊&lt;/p&gt;

&lt;p&gt;As I've &lt;a href=&quot;http://brooker.co.za/blog/2017/12/28/mean.html&quot;&gt;written about before&lt;/a&gt;, Little's law is useful because it gives us a clear way to reason about the capacity of a system, which is often difficult to observe directly, based on quantities like arrival rate (requests per second) and latency which are easier to measure directly. Concurrency is a useful measure of capacity in real systems, because it directly measures consumption of resources like threads, memory, connections, file handles and anything else that's numerically limited. It also provides an indirect way to think about contention: if the concurrency in a system is high, then it's likely that contention is also high.&lt;/p&gt;

&lt;p&gt;I like Little's Law as a mathematical tool, but also as a narrative tool. It provides a powerful way to frame stories about system behavior.&lt;/p&gt;

&lt;h3&gt;Feedback&lt;/h3&gt;

&lt;p&gt;The way Little's Law is written, each of the terms are long-term averages, and λ and 𝑊 are independent. In the real world, distributed systems don't tend to actually behave this nicely.&lt;/p&gt;

&lt;p&gt;Request time (𝑊) tends to increase as concurrency (𝐿) increases. &lt;a href=&quot;https://en.wikipedia.org/wiki/Amdahl%27s_law&quot;&gt;Amdahl's Law&lt;/a&gt; provides the simplest model of this: each request has some portion of work which is trivially parallelizable, and some portion of work that is forced to be serialized in some way. Amdahl's law is also wildly optimistic: most real-world systems don't see throughput level out under contention, but rather see throughput drop as contention rises beyond some limit. The &lt;a href=&quot;http://www.perfdynamics.com/Manifesto/USLscalability.html&quot;&gt;universal scalability law&lt;/a&gt; captures one model of this behavior. The fundamental reason for this is that contention itself has a cost.&lt;/p&gt;

&lt;p&gt;Even in the naive, beautiful, Amdahl world, latency increases as load increases because throughput starts to approach some maximum. In the USL world, this increase can be dramatically non-linear. In both cases 𝑊 is a function of 𝐿.&lt;/p&gt;

&lt;p&gt;Arrival rate (λ) also depends on request time (𝑊), and typically in a non-linear way. There are three ways to see this relationship:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrival rate drops as request time increases (λ ∝ 1/𝑊). In this model there is a finite number of clients and each has its own finite concurrency (or, in the simplest world is calling serially in a loop). As each call goes up, clients keep their concurrency fixed, so the arrival rate drops.&lt;/li&gt;
&lt;li&gt;Arrival rate does not depend on latency. If clients don't change their behavior based on how long requests take, or on requests failing, then there's no relationship. The widely-used Poisson process client model behaves this way.&lt;/li&gt;
&lt;li&gt;Arrival rate increases as request time increases (λ ∝ 𝑊). One cause of this is &lt;em&gt;timeout and retry&lt;/em&gt;: if a client sees a request exceed some maximum time (so 𝑊&gt;𝜏) they may retry. If that timeout 𝜏 is shorter than their typical inter-call time, this will increase the per-client rate. Other kinds of stateful client behavior can also kick in here. For example, clients may interpret long latencies as errors that don't only need to be retried, but can trigger entire call chains to be retried.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The combination of these effects tends to be that the dynamic behavior of distributed systems has scary cliffs. Systems have plateaus where they behave well where 𝑊, 𝐿 and λ are either close-to-independent or inversely proportional, and cliffs where direct proportionality kicks in and they spiral down to failure. Throttling, admission control, back pressure, backoff and other mechanisms can play a big role in avoiding these cliffs, but they still exist.&lt;/p&gt;

&lt;h3&gt;Arrival Processes and Spiky Behavior&lt;/h3&gt;

&lt;p&gt;The mean, &lt;a href=&quot;http://brooker.co.za/blog/2017/12/28/mean.html&quot;&gt;like all descriptive statistics&lt;/a&gt;, doesn't tell the whole story about data. The mean is very convenient in the mathematics of Little's law, but tends to hide effects caused by high-percentile behavior. Little's law's use of long-term means also tends to obscure the fact that real-world statistical processes are frequently non-stationary: they include trends, cycles, spikes and seasonality which are not well-modeled as a single stationary time series. Non-stationary behavior can affect 𝑊, but is most noticeable in the arrival rate λ.&lt;/p&gt;

&lt;p&gt;There are many causes for changes in λ. Seasonality is a big one: the big gift-giving holidays, big sporting events, and other large correlated events can significantly increase arrival rate during some period of time. Human clients tend to exhibit significant daily, weekly, and yearly cycles. People like to sleep. For many systems, though, the biggest cause of spikes is the combination of human biases and computer precision: &lt;em&gt;cron&lt;/em&gt; jobs. When humans pick a time for a task to be done (&lt;em&gt;backup once a day&lt;/em&gt;, &lt;em&gt;ping once a minute&lt;/em&gt;), they don't tend to pick a uniformly random time. Instead, they cluster the work around the boundaries of months, days, hours, minutes and seconds. This leads to significant spikes of traffic, and pushes the distribution of arrival time away from the Poisson process ideal&lt;sup&gt;&lt;a href=&quot;http://brooker.co.za/blog/rss.xml#foot1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Depending on how you define &lt;em&gt;long term mean&lt;/em&gt;, these cyclic changes in λ can either show up in the distribution of λ as high percentiles, or show up in λ being non-stationary. Depending on the data and the size of the spikes it's still possible to get useful results out of Little's law, but they will be less precise and potentially more misleading.&lt;/p&gt;

&lt;h3&gt;Telling Stories&lt;/h3&gt;

&lt;p&gt;Somewhat inspired by Little's law, we can build up a difference equation that captures more of real-world behavior:&lt;/p&gt;

&lt;p&gt;W&lt;sub&gt;n+1&lt;/sub&gt; = 𝑊(L&lt;sub&gt;n&lt;/sub&gt;, λ&lt;sub&gt;n&lt;/sub&gt;, t)&lt;/p&gt;

&lt;p&gt;λ&lt;sub&gt;n+1&lt;/sub&gt; = λ(L&lt;sub&gt;n&lt;/sub&gt;, W&lt;sub&gt;n&lt;/sub&gt;, t)&lt;/p&gt;

&lt;p&gt;L&lt;sub&gt;n+1&lt;/sub&gt; = λ&lt;sub&gt;n+1&lt;/sub&gt; 𝑊&lt;sub&gt;n+1&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;I find that this is a powerful mental model, even if it's lacking some precision and is hard to use for clean closed-form results. Breaking the behavior of the system down into time steps provides a way to tell a story about the way the system behaves in the next time step, and how the long-term behavior of the system emerges. It's also useful for building simple simulations of the dynamics of systems.&lt;/p&gt;

&lt;p&gt;Telling stories about our systems, for all its potential imprecision, is a powerful way to build and communicate intuition.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The system was ticking along nicely, then just after midnight a spike of requests from arrived from a flash sale. This caused latency to increase because of increased lock contention on the database, which in turn caused 10% of client calls to time-out and be retried. A bug in backoff in our client meant that this increased call rate to 10x the normal for this time of day, further increasing contention.&lt;/em&gt; And so on...&lt;/p&gt;

&lt;p&gt;Each step in the story evolves by understanding the relationship between latency, concurrency and arrival rate. The start of the story is almost always some triggering event that increases latency or arrival rate, and the end is some action or change that breaks the cycle. Each step in the story offers an opportunity to identify something to make the system more robust. Can we reduce the increase in 𝑊 when λ increases? Can we reduce the increase in λ when 𝑊 exceeds a certain bound? Can we break the cycle without manual action?&lt;/p&gt;

&lt;p&gt;The typical resiliency tools, like backoff, backpressure and throttling, are all answers to these types of questions, but are far from the full set of answers. Telling the stories allows us to look for more answers.&lt;/p&gt;

&lt;h3&gt;Footnotes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a name=&quot;foot1&quot;&gt;&lt;/a&gt; Network engineers have long known that the Poisson model is less bursty than many real systems. &lt;a href=&quot;https://pdfs.semanticscholar.org/3226/e025b4ab4afa664b2c9b0418227ee76ac13c.pdf&quot;&gt;An Empirical Workload Model for Driving Wide-Area TCP/IP Network Simulations&lt;/a&gt; and &lt;a href=&quot;http://cs.uccs.edu/~cchow/pub/master/xhe/doc/p226-paxson-floyd.pdf&quot;&gt;Wide Area Traffic: The Failure of Poisson Modeling&lt;/a&gt; are classics in that genre. I'm not aware of good research on this problem in microservice or SoA architectures, but I'm sure there are some interesting results to be found there.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2018-06-20T00:00:00+00:00</dc:date>
	<dc:creator>Marc Brooker</dc:creator>
</item>
<item rdf:about="https://gkbrk.com/2018/06/fetching-activitypub-feeds/">
	<title>Gokberk Yaltirakli (gkbrk): Fetching ActivityPub Feeds</title>
	<link>https://gkbrk.com/2018/06/fetching-activitypub-feeds/</link>
	<content:encoded>&lt;p&gt;Mastodon is a federated social network that uses the ActivityPub protocol to
connect separate communities into one large network. Both Mastodon and the
ActivityPub protocol are increasing in usage every day. Compared to formats like
RSS, which are pull-based, ActivityPub is push-based. This means rather than
your followers downloading your feed regularly to check if you have shared
anything, you send each follower (or each server as an optimization) the content
you shared.&lt;/p&gt;

&lt;p&gt;While this decreases latency in your followers receiving your updates, it does
complicate the implementation of readers. But fortunately, it is still possible
to pull the feed of ActivityPub users. Just like the good old days.&lt;/p&gt;

&lt;p&gt;In this article; we&amp;rsquo;re going to start from a handle like &lt;code&gt;leo@niu.moe&lt;/code&gt;, and end
up with a feed of my latest posts.&lt;/p&gt;

&lt;h2&gt;WebFinger&lt;/h2&gt;

&lt;p&gt;First of all, let&amp;rsquo;s look at how the fediverse knows how to find the ActivityPub
endpoint for a given handle. The way this is done is quite similar to email.&lt;/p&gt;

&lt;p&gt;To find the domain name, let&amp;rsquo;s split the handle into the username and domain
parts.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;handle&lt;/span&gt;           &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'leo@niu.moe'&lt;/span&gt;
&lt;span&gt;username&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;domain&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;handle&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;split&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'@'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to make a request to the domain&amp;rsquo;s webfinger endpoint in order to
find more data about the account. This is done by performing a GET request to
&lt;code&gt;/.well-known/webfinger&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;wf_url&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'https://{}/.well-known/webfinger'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;domain&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;wf_par&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;'resource'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'acct:{}'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;handle&lt;/span&gt;&lt;span&gt;)}&lt;/span&gt;
&lt;span&gt;wf_hdr&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;'Accept'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'application/jrd+json'&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;# Perform the request&lt;/span&gt;
&lt;span&gt;wf_resp&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;requests&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;wf_url&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;headers&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;wf_hdr&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;params&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;wf_par&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have our WebFinger response. We can filter this data in order to find the
correct ActivityPub endpoint. We need to do this because webfinger can return a
variety of URLs, not just ActivityPub.&lt;/p&gt;

&lt;h2&gt;Filtering the endpoints&lt;/h2&gt;

&lt;p&gt;The response we get from WebFinger looks like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight json&quot;&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;subject&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;acct:leo@niu.moe&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;aliases&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;&quot;https://niu.moe/@leo&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;&quot;https://niu.moe/users/leo&quot;&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;&quot;links&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;rel&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;http://webfinger.net/rel/profile-page&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;href&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;https://niu.moe/@leo&quot;&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;rel&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;http://schemas.google.com/g/2010#updates-from&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;application/atom+xml&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;href&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;https://niu.moe/users/leo.atom&quot;&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;rel&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;self&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;application/activity+json&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;
      &lt;/span&gt;&lt;span&gt;&quot;href&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;https://niu.moe/users/leo&quot;&lt;/span&gt;&lt;span&gt;
    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
  &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Depending on the server, there might be more or less entries in the &lt;em&gt;links&lt;/em&gt;
key. What we are intereted in is the URL with the type
&lt;code&gt;application/activity+json&lt;/code&gt;. Let&amp;rsquo;s go through the array and find the link URL
we&amp;rsquo;re looking for.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;matching&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;link&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'href'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; &lt;span&gt;link&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;wf_resp&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'links'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;link&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'type'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;'application/activity+json'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;user_url&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;matching&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Fetching the feed link&lt;/h2&gt;

&lt;p&gt;We can fetch our feed URL using &lt;em&gt;requests&lt;/em&gt; like before. One detail to note here
is the content type that we need to specify in order to get the data in the
format we want.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;as_header&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;'Accept'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'application/ld+json; profile=&quot;https://www.w3.org/ns/activitystreams&quot;'&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;user_json&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;requests&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user_url&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;headers&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;as_header&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;user_json&lt;/em&gt; is a dictionary that contains information about the user. This
information includes the username, profile summary, profile picture and other
URLs related to the user. One such URL is the &lt;em&gt;&amp;ldquo;Outbox&amp;rdquo;&lt;/em&gt;, which is basically a
feed of whatever that user shares publicly.&lt;/p&gt;

&lt;p&gt;This is the final URL we need to follow, and we will have the user feed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;feed_url&lt;/span&gt;  &lt;span&gt;=&lt;/span&gt; &lt;span&gt;user_json&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'outbox'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In ActivityPub, the feed is an &lt;em&gt;OrderedCollection&lt;/em&gt;. And those can be
paginated. The first page can be empty, or have all the content. Or it can be
one event for each page. This is completely up to the implementation. In order
to handle this transparently, let&amp;rsquo;s write a generator that will fetch the next
pages when they are requested.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;parse_feed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;feed&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;requests&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;headers&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;as_header&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'orderedItems'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;feed&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;item&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;feed&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'orderedItems'&lt;/span&gt;&lt;span&gt;]:&lt;/span&gt;
            &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;

    &lt;span&gt;next_url&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'first'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;feed&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;next_url&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;feed&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'first'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
    &lt;span&gt;elif&lt;/span&gt; &lt;span&gt;'next'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;feed&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;next_url&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;feed&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'next'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;next_url&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;item&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;parse_feed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;next_url&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
            &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Now; for the purposes of a blog post and for writing simple feed parsers, this
code works with most servers. But this is not a fully spec-complient function
for grabbing all the pages of content. Technically &lt;em&gt;next&lt;/em&gt; and &lt;em&gt;first&lt;/em&gt; can be
lists of events instead of other links, but I haven&amp;rsquo;t come across that in the
wild. It is probably a good idea to write your code to cover more edge cases
when dealing with servers on the internet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Printing the first 10 posts&lt;/h2&gt;

&lt;p&gt;The posts in ActivityPub contain HTML and while this is okay for web browsers,
we should strip the HTML tags before printing them to the terminal.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how we can do that with the &lt;em&gt;BeautifulSoup&lt;/em&gt; and &lt;em&gt;html&lt;/em&gt; modules.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight python&quot;&gt;&lt;code&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;clean_html&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;text&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;BeautifulSoup&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;'html.parser'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get_text&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;html&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;unescape&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;

&lt;span&gt;i&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; &lt;span&gt;item&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;parse_feed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;feed_url&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;# Only new tweets&lt;/span&gt;
        &lt;span&gt;assert&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'type'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;'Create'&lt;/span&gt;
        &lt;span&gt;content&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'object'&lt;/span&gt;&lt;span&gt;][&lt;/span&gt;&lt;span&gt;'content'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
        &lt;span&gt;text&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;clean_html&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;

        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
        &lt;span&gt;i&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;continue&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;
        &lt;span&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Future Work&lt;/h2&gt;

&lt;p&gt;Mastodon is not the only implementation of ActivityPub, and each implementation
can do things in slightly different ways. While writing code to interact with
ActivityPub servers, you should always consult the specification document.&lt;/p&gt;

&lt;h2&gt;Useful Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/2018/REC-activitypub-20180123/&quot;&gt;ActivityPub Spec (at the time of writing)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/activitypub/&quot;&gt;ActivityPub Spec (Latest)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2018-06-18T15:17:37+00:00</dc:date>
	<dc:creator>Gokberk Yaltirakli</dc:creator>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/06/18/limiting-peers-with-dynamicsupervisor-options/">
	<title>Pete Corey (petecorey): Limiting Peers with DynamicSupervisor Options</title>
	<link>http://www.petecorey.com/blog/2018/06/18/limiting-peers-with-dynamicsupervisor-options/</link>
	<content:encoded>&lt;p&gt;Last month &lt;a href=&quot;http://www.petecorey.com/blog/2018/05/21/spreading-through-the-bitcoin-network/&quot;&gt;I posted an article&lt;/a&gt; about using Elixir’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;DynamicSupervisor&lt;/span&gt;&lt;/code&gt; behavior to recursively connect our Elixir-based node to peers throughout Bitcoin’s peer-to-peer network.&lt;/p&gt;

&lt;p&gt;The last part of that article talked about how we could limit the exponential growth of our set of connected peers by setting a hard cap on the number of processes supervised by our dynamic &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;/code&gt; process.&lt;/p&gt;

&lt;p&gt;We went through the rigmarole of building this child process cap ourselves, but &lt;a href=&quot;https://www.reddit.com/r/elixir/comments/8ljzr1/spreading_through_the_bitcoin_network/e0m2sv4/&quot;&gt;it was pointed out to me&lt;/a&gt; that we could have used &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;DynamicSupervisor&lt;/span&gt;&lt;/code&gt;’s built in &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:max_children&lt;/span&gt;&lt;/code&gt; option to accomplish the same thing!&lt;/p&gt;

&lt;h2 id=&quot;our-hand-rolled-solution&quot;&gt;Our Hand-Rolled Solution&lt;/h2&gt;

&lt;p&gt;When we implemented our own restriction on the number of peers we allow our node to connect to, we did it within the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;BitcoinNetwork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect_to_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def connect_to_node(ip, port) do
  if count_peers() &amp;lt; Application.get_env(:bitcoin_network, :max_peers) do
    DynamicSupervisor.start_child(BitcoinNetwork.Node.Supervisor, %{
      id: BitcoinNetwork.Node,
      start: {BitcoinNetwork.Node, :start_link, [{ip, port}]},
      restart: :transient
    })
  else
    {:error, :max_peers}
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;count_peers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt; helper function simply calls out to &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;DynamicSupervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; to count the number of processes being supervised by our dynamic &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
BitcoinNetwork.Node.Supervisor
|&amp;gt; DynamicSupervisor.count_children()
|&amp;gt; Map.get(:active)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the number of active peers is less than our specified number of &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:max_peers&lt;/span&gt;&lt;/code&gt;, we allow the connection. Otherwise, we return an &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;/code&gt; tuple.&lt;/p&gt;

&lt;h2 id=&quot;elixirs-solution&quot;&gt;Elixir’s Solution&lt;/h2&gt;

&lt;p&gt;If we read through &lt;a href=&quot;https://hexdocs.pm/elixir/DynamicSupervisor.html#t:init_option/0&quot;&gt;the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;DynamicSupervisor&lt;/span&gt;&lt;/code&gt; documentation&lt;/a&gt;, we’ll find that we can pass a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:max_children&lt;/span&gt;&lt;/code&gt; option to &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;DynamicSupervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt;. Digging through Elixir’s source, we can see that, when present, &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/v1.6.5/lib/elixir/lib/dynamic_supervisor.ex#L627-L635&quot;&gt;the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:max_children&lt;/span&gt;&lt;/code&gt; option does literally exactly what we did in our hand-rolled solution&lt;/a&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
if dynamic &amp;lt; max_children do
  handle_start_child(child, %{state | dynamic: dynamic + 1})
else
  {:reply, {:error, :max_children}, state}
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;dynamic&lt;/span&gt;&lt;/code&gt;, the number of processes currently being supervised by the supervisor, is less than the specified &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;max_children&lt;/span&gt;&lt;/code&gt;, add the child. Otherwise, return an &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;/code&gt; tuple.&lt;/p&gt;

&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;Refactoring our original solution to make use of the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:max_children&lt;/span&gt;&lt;/code&gt; option largely consists of removing our original solution. We’ll start by gutting the guard in our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;BitcoinNetwork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect_to_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;/code&gt; function:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
def connect_to_node(ip, port) do
  DynamicSupervisor.start_child(BitcoinNetwork.Node.Supervisor, %{
    id: BitcoinNetwork.Node,
    start: {BitcoinNetwork.Node, :start_link, [{ip, port}]},
    restart: :transient
  })
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means we can also remove our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;count_peers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt; helper function.&lt;/p&gt;

&lt;p&gt;Now we simply need to add the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:max_children&lt;/span&gt;&lt;/code&gt; option to our dynamic supervisor when it starts up:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
{:ok, pid} =
  Supervisor.start_link(
    [
      {DynamicSupervisor,
        name: BitcoinNetwork.Node.Supervisor,
        strategy: :one_for_one,
        max_children: Application.get_env(:bitcoin_network, :max_peers)}
    ],
    strategy: :one_for_one
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s all there is to it!&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/limiting-peers-with-dynamicsupervisor-options/01.png&quot; /&gt;
  &lt;p&gt;Our limited set of peers.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Spinning up our Bitcoin node with a low value for &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:max_peers&lt;/span&gt;&lt;/code&gt; shows that our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;/code&gt; is honoring our limit.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;My final thoughts are that I should really spend more time reading through the Elixir and Erlang documentation. There’s quite a few gems hidden in plain sight that would do me quite a bit of good to know about.&lt;/p&gt;

&lt;p&gt;I’d also like to thank the Redditor who pointed the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:max_children&lt;/span&gt;&lt;/code&gt; option out to me. Thanks, &lt;a href=&quot;https://www.reddit.com/r/elixir/comments/8ljzr1/spreading_through_the_bitcoin_network/e0m2sv4/&quot;&gt;ParticularHabit&lt;/a&gt;!&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-18T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://beza1e1.tuxen.de/m302_rf_id_reader.html">
	<title>Andreas Zwinkau (qznc): Using an M302 RF ID Reader with Linux</title>
	<link>http://beza1e1.tuxen.de/m302_rf_id_reader.html</link>
	<content:encoded>&lt;p&gt;How to get a cheap RF ID reader running with Ubuntu and Python&lt;/p&gt;
    &lt;p&gt;&lt;a href=&quot;http://beza1e1.tuxen.de/m302_rf_id_reader.html&quot;&gt;Read full article!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://beza1e1.tuxen.de/img/m302_mifare_rfid_reader.jpg&quot; /&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-17T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://www.brautaset.org/articles/2004/water-please.html">
	<title>Stig Brautaset (stig): Can I have some Water please?</title>
	<link>https://www.brautaset.org/articles/2004/water-please.html</link>
	<dc:date>2018-06-16T20:31:00+00:00</dc:date>
	<dc:creator>Stig Brautaset</dc:creator>
</item>
<item rdf:about="https://www.brautaset.org/articles/2002/heinlein.html">
	<title>Stig Brautaset (stig): Heinlein's list of skills</title>
	<link>https://www.brautaset.org/articles/2002/heinlein.html</link>
	<dc:date>2018-06-16T20:31:00+00:00</dc:date>
	<dc:creator>Stig Brautaset</dc:creator>
</item>
<item rdf:about="https://silky.github.io/posts/2018-06-16-when-will-google-translate-be-great.html">
	<title>Noon van der Silk (silky): When will Google Translate be great?</title>
	<link>https://silky.github.io/posts/2018-06-16-when-will-google-translate-be-great.html</link>
	<content:encoded>&lt;div class=&quot;info&quot;&gt;
    Posted on June 16, 2018
    
        by Noon van der Silk
    
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;I’ve been reading “&lt;a href=&quot;https://www.amazon.com/Surfaces-Essences-Analogy-Fuel-Thinking/dp/0465018475/&quot;&gt;Surfaces and Essences&lt;/a&gt;” by Doug Hofstadter and Emmanuel Sander.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;center&gt;
&lt;/center&gt;&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;https://www.amazon.com/Surfaces-Essences-Analogy-Fuel-Thinking/dp/0465018475/&quot;&gt;&lt;img src=&quot;http://silky.github.io/images/surfaces-and-essences.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;You can essentially judge this book by it’s cover: It argues that analogies are the key technique we use to think and understand. I quite love this book, in particular because it presents lots of interesting ideas for people interested in the topic, and for people interested in AI and machine learning.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The reason I enjoy this book so much is because I think it presents a very strong task for machine learning people to tackle; namely to build a system that is capable of this analogical reasoning. One thing that’s true of &lt;strong&gt;all&lt;/strong&gt; modern machine learning systems it that their knowlege is very “narrow” and, almost all of the time, the bounds of it are determined entirely before training.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In any case, we’re focused right now on translation. Doug recently wrote about his thoughts here: &lt;a href=&quot;https://www.theatlantic.com/technology/archive/2018/01/the-shallowness-of-google-translate/551570/&quot;&gt;The Shallowness of Google Translate&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;I’m not going to go into a lot of detail here; I just want to track the progress of a specific phrase that Doug and Emmanuel hvea in the book. They started tracking it in 2004, and it being 2018 now; 14 years later! I wanted to see how things had progressed.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Here’s the complex paragraph (in French) and the task is to translate it into English:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Original&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;Parfois, le succès ne fut pas au rendez-vous. On a beau y penser très fort, le bon numéro ne sort pas forcément. Sagan prenait échecs d’auteur dramatique comme les revers casino, avec respect pour les caprices de la banque et du ciel. Il faut bien pedre un peu, pour mieux savourer la gagne du lendemain. Qui ne l’a pas vue « récupérer » en quelques quarts d’heure les pertes de toute une nuit ne peut comprendre comme c’est joyeux de narguer le sort.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Human-translation by Doug and Emmanuel&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;Sometimes things just didn’t work out right; no matter how har she wished for it, the dice simply wouldn’t come up her way. But Sagan always took her failures as a playwright much as she took her gambling losses, acknowledging the arbitrary whims of the house and of divine fate. After all, everyone has to lose now and then, so that the next day’s victory will taste all the sweeter. And if you never saw her win back a whole night’s losses, often in well under an hour, you just can’t have any idea of the glee she took in laughing in the face of destiny.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Then here are the translations over the years (the first two coming from the book itself):&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Google Translate, 2004&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;Sometimes, success was not with go. One thinks of it in vain very extremely, the good number does not leave inevitable. Sagan took the failures of dramatic author like in the reverses of casino, with respect for the whims of the bank and the sky. It is necessary well to lose a little, for better enjoying gains it following day. Who did not see it “recovering” in a few fifteen minutes the losses of a whole night cannot include/understand as they is merry of narguer the fate.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;em&gt;Verdict&lt;/em&gt;: Terrible.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Google Translate, 2009&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;Sometimes, success was not there. It was nice to think very hard, the proper number does not necessarily spell. Sagan took the failures as a dramatist such as backhand casino, with respect to the whims of the Bank and the sky. It must be losig a little, better enjoy the gains overnight. Who did not see “recover” in a few minutes lost a whole night can not understand how happy it is the sort of taunt.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;em&gt;Verdict&lt;/em&gt;: Still terrible.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Google Translate, 2018&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;Sometimes the success was not there. We can think about it very well, the good number does not necessarily come out. Sagan took dramatic draftsman’s chess like the casino setbacks, with respect for the whims of the bank and the sky. It is necessary to lose a little, to better savor the gain of tomorrow. Whoever has not seen her “recover” in a few quarters of an hour the losses of a whole night can not understand how happy it is to taunt the spell.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;em&gt;Verdict&lt;/em&gt;: &lt;em&gt;Still&lt;/em&gt; terrible, 14 years later!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It’s very interesting to think about how to build systems that could conveivably translate phrases like this “properly”, by using the ideas from the book.&lt;/p&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2018-06-16T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://pepijndevos.nl/2018/06/13/lego-ev3-robocup-robot">
	<title>Pepijn de Vos (pepijndevos): LEGO EV3 RoboCup Robot</title>
	<link>http://pepijndevos.nl/2018/06/13/lego-ev3-robocup-robot.html</link>
	<content:encoded>&lt;p&gt;This is a story about how my curiosity led me to be conscripted into a student team.&lt;/p&gt;

 

&lt;p&gt;One of my friends is a member of &lt;a href=&quot;http://roboteamtwente.nl/&quot;&gt;RoboTeam Twente&lt;/a&gt; and is currently in Canada with the rest of the team to compete in the RoboCup &lt;a href=&quot;http://wiki.robocup.org/Small_Size_League&quot;&gt;Small Size League&lt;/a&gt;. They only started last year, and will be competing against teams that have been playing for decades. You can follow their progress live &lt;a href=&quot;https://www.facebook.com/roboteamtwente/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having worked non-stop on my bachelor thesis in Electrical Engineering, my hands were itching to do some programming. So I nudged my friend if I could maybe entertain myself with their code. It turns out a few weeks before the competition is not a good time to introduce new people to the codebase, but this initiated an avalanche of requests to please join the team of next year, full-time please, and we’re looking for board members.&lt;/p&gt;

&lt;p&gt;However, this left me with my immediate itch to program something. Since I already started thinking about ideas for their soccer robots, I figured I might as well build my own robot from LEGO to satisfy my itch, while they are having fun in Canada. Before I knew it, I had already ordered a set of omni-wheels and borrowed an orange golf ball from the team (on the condition that I’d join… oh well)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://pepijndevos.nl/images/robocup/roboteam.png&quot; alt=&quot;RoboTeam robot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The RoboTeam robot is a holonomic platform with 4 omni-wheels that allow it to move in any direction. It has two solenoids for kicking and “chipping” (kicking the ball in the air) powered by a 200V capacitor. It also has a “dribbler”, which is a rotating bar that keeps the ball against the kicker while moving.&lt;/p&gt;

&lt;p&gt;My first challenge was figuring out how to implement that with an EV3 with only 4 motor ports. I figured I could do with 3 omni-wheel, and ditch the chipper. That leaves one motor for both dribbling and shooting. I thought that maybe with some slip gears I could dribble going one way, and shoot going the other way. The most powerful shooting technique I could think of is to compress a spring with a worm wheel, and release it.&lt;/p&gt;

&lt;p&gt;I went through several iterations of this crucial and complex part, trying to make it more compact and sturdy. I used a medium motor that connects to a worm wheel and to a normal gear that drives a perpendicular axle. The worm gear drives a slip gear to a crankshaft that pulls the kicker back and releases it. The perpendicular axle drives another slip gear that drives the dribble bar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://pepijndevos.nl/images/robocup/kicker.jpg&quot; alt=&quot;Kicker detail&quot; /&gt;
&lt;img src=&quot;http://pepijndevos.nl/images/robocup/dribbler.jpg&quot; alt=&quot;Dribbler detail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After being somewhat satisfied with the kicker/dribbler, I moved on to the rear wheel. This was fairly straightforward, making a sturdy housing for the omni-wheel. The only issue was finding a space for the motor. This ended up looking a bit tacky because I had to move the motor to the back because it got in the way of the side wheels.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://pepijndevos.nl/images/robocup/rearwheel.jpg&quot; alt=&quot;Rear wheel detail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was surprisingly hard to design the side wheels. To obtain a proper holonomic platform, most people opt to construct an equilateral triangle, but this was not an option with the kicker in the mix. Instead I went for two 3:4:5 Pythagorean triangles on the sides of the body, giving me 36.8° angles for the side wheels. Note that the side wheel is attached one unit higher than the rear wheel, because the arms attach one unit below the main frame.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://pepijndevos.nl/images/robocup/sidewheel.jpg&quot; alt=&quot;Rear wheel detail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Due to the crankshaft of the kicker, I had to place the side wheels quite far back. That in turn meant that the rear wheel motor had to move. This combined means that the robot is larger than would be legal in the SSL. I believe it would be possible to comply with the rules, but a complete redesign is needed. All I wanted is to have some fun and write some software, so I’ll leave it at this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://pepijndevos.nl/images/robocup/legoteamtwente.jpg&quot; alt=&quot;Whole robot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now I can finally begin to write software. My initial plan was to use Lejos, as it has ready-made classes for holonomic robots. But after some struggling with a two year old “beta” release, I decided it’d be easier to just do the math in Python myself, and use the much more actively maintained ev3dev-lang-python.&lt;/p&gt;

&lt;p&gt;As a start, I blatantly copied &lt;a href=&quot;http://www.ev3dev.org/docs/tutorials/using-ps3-sixaxis/&quot;&gt;this script&lt;/a&gt;, and adapted it for my Xbox controller and robot. The math ended up only being a few lines of numpy, much easier than I expected.&lt;/p&gt;

&lt;p&gt;Next thing I want to try is to use ROS, which is also used at the RoboTeam. There is &lt;em&gt;some&lt;/em&gt; documentation about using it on the EV3, but not much. So that will be a steep learning curve.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;evdev&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ev3dev.auto&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev3&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;threading&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## Initializing ##&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Finding xbox controller...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evdev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evdev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_devices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Microsoft X-Box 360 pad'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gamepad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;angles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deg2rad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;36.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;36.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MotorThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motor_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LargeMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ev3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motor_back&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LargeMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ev3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT_B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motor_right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LargeMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ev3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motor_kick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediumMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ev3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT_C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Engine running!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motor_left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_forever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed_sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motor_back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_forever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed_sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motor_right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_forever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed_sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motor_kick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_direct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duty_cycle_sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;OSError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motor_left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motor_back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motor_right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;motor_thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotorThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;motor_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gamepad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evdev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ABS_X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ABS_Y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ABS_RX'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ABS_Z'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ABS_RZ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;kick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;307&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</content:encoded>
	<dc:date>2018-06-13T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://atilanevesoncode.wordpress.com/?p=767">
	<title>Átila on Code (atilaneves): Myths programmers believe</title>
	<link></link>
	<content:encoded>I&amp;#8217;m fascinated by misconceptions. I used to regularly host pub quizzes (aka trivia nights in some parts of our blue marble), and anyone who&amp;#8217;s attended a few of my quizzes know that if it sounds like a trick question, it probably is. I&amp;#8217;ve done more than a fair share of &amp;#8220;True or False&amp;#8221; rounds where [&amp;#8230;]</content:encoded>
	<dc:date>2018-06-12T13:20:25+00:00</dc:date>
</item>
<item rdf:about="https://cryptolosophy.org/pursuit-of-posthumous-peace">
	<title>Cryptolosophy (awn): The Pursuit of Posthumous Peace</title>
	<link>https://cryptolosophy.org/pursuit-of-posthumous-peace/</link>
	<content:encoded>&lt;p&gt;The origin of religion is likely in the human need for some way to cope with the unknown. Each person must formulate some internal philosophy for their existence which will then guide their outlook and actions in life. The philosophy that you decide to stick with will have a pretty significant impact on you, down to who you are as a person and how you think.&lt;/p&gt;

&lt;p&gt;The most common is probably the heaven or hell ultimatum, aka infinite reward vs. infinite retribution. Followers of this hypothesis believe that they are in control of some probability  of reaching heaven, where  is the set of possible choices made in a lifetime. In this situation, the control over  is what lends the believer comfort in death.&lt;/p&gt;

&lt;p&gt;But it is a precarious comfort. See, the ideal behaviour of  is such that as you approach death, the probability of achieving infinite reward should approach one. As in, as you age, you’ll control the  in  such that,&lt;/p&gt;



&lt;p&gt;As long as this trend exists, you may lead a happy life (or at least a life without worrying about what will happen when you die). Of course  at  could also suddenly be close to, without converging to, one (and vice versa), but that hardly constitutes a life free of worry.&lt;/p&gt;

&lt;p&gt;But if this trend doesn’t exist—say the opposite is true and  actually approaches zero—then what? Your problems have been exacerbated and now instead of worrying about the unknown, you’re worrying about eternal damnation.&lt;/p&gt;

&lt;p&gt;(There’s also the consideration that having to be careful about all  is a pretty restricting way to live, but if one can find happiness in it, as many do, then that’s not an issue.)&lt;/p&gt;

&lt;p&gt;The opposing view is that there is no god and that after death there is absolutely nothing. You cease to exist, and there is no longer a &lt;em&gt;you&lt;/em&gt; to say “I am”. The question you could ask yourself is why—if we didn’t experience the first ~14 billion years before we existed—would we experience the next N after we stop existing?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;https://cryptolosophy.org/assets/images/xkcd-beliefs.jpg&quot; alt=&quot;xkcd-beliefs&quot; width=&quot;80%&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;xkcd: Beliefs&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This view stems from various different schools of thought (simulation hypothesis, atheism, agnosticism, etc) that all share the conviction that we are simply the inevitable result of probability, time, and the principle of natural selection—since that’s the scientifically accepted model of the universe. The idea is to believe only what you can justify believing and discard everything else.&lt;/p&gt;

&lt;p&gt;It is a comforting belief to hold too: when someone you love inevitably shuffles off this mortal coil, you will know that they’re not suffering. Everyone is &lt;em&gt;guaranteed&lt;/em&gt; to be at ultimate peace, which is a gift that monotheism cannot provide. By adopting this philosophy you will lose out on the potential infinite happiness promised by monotheists, but you will also ultimately be avoiding hell.&lt;/p&gt;

&lt;p&gt;There’s also a third option: reincarnation. It shares some resemblance with the monotheistic approach in that control over your actions, , determines your afterlife, but that’s where the similarities end. Instead of being designated to heaven or hell, you are instead “reborn” as a new being where you will again be given control over your actions, and again, and again, each time either improving or worsening the situation in your next life.&lt;/p&gt;

&lt;p&gt;Reincarnation is an interesting one because it focuses on individual peace as opposed to comfort in relationships. You are constantly trying to live your own best life such that your next one is even better, all the while being unable to remember your past. It provides similar levels of comfort in death as monotheism does, and yet neither the happiness nor the suffering are eternal. There’s always another chance.&lt;/p&gt;

&lt;p&gt;But at the end of the day, all of these “philosophies” are just different things that we tell ourselves to keep away the monster at night. Our beliefs are potentially limitless and our knowledge is limited by our senses, so what do we really know?&lt;/p&gt;

&lt;p&gt;We just have to choose.&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-11T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.petecorey.com/blog/2018/06/11/generating-test-fixtures-with-wireshark/">
	<title>Pete Corey (petecorey): Generating Test Fixtures with Wireshark</title>
	<link>http://www.petecorey.com/blog/2018/06/11/generating-test-fixtures-with-wireshark/</link>
	<content:encoded>&lt;p&gt;My &lt;a href=&quot;https://github.com/pcorey/bitcoin_network/&quot;&gt;in-progress Elixir-based Bitcoin node&lt;/a&gt; is woefully lacking on the test front. This is especially problematic considering how finicky &lt;a href=&quot;https://en.bitcoin.it/wiki/Protocol_documentation&quot;&gt;the Bitcoin protocol parsing and serialization process can be&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But how can we test this functionality without going through the mind-numbing process of manually constructing each packet under test and asserting that it parses and serializes as expected?&lt;/p&gt;

&lt;p&gt;Thankfully, Wireshark’s support of the Bitcoin protocol turns this into a simple task. Let’s dig into how we can use &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; to generate binary fixtures for each of our Bitcoin packets under test, and explore how we can test against them using Elixir.&lt;/p&gt;

&lt;h2 id=&quot;generating-our-fixtures&quot;&gt;Generating Our Fixtures&lt;/h2&gt;

&lt;p&gt;Wireshark supports the Bitcoin protocol out of the box. That makes the process of generating test fixtures incredibly simple. To create a binary fixture for a given Bitcoin packet, we just need to follow these three steps:&lt;/p&gt;

&lt;p&gt;Step one: Fire up Wireshark, start capturing on your network interface, and set &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;bitcoin&lt;/span&gt;&lt;/code&gt; as your display filter:&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/generating-test-fixtures-with-wireshark/01.png&quot; /&gt;
  &lt;p&gt;Filtering for bitcoin packets.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Step two: Start &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;bitcoind&lt;/span&gt;&lt;/code&gt;, and watch the packets roll in:&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/generating-test-fixtures-with-wireshark/02.png&quot; /&gt;
  &lt;p&gt;Bitcoin packets on the wire.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Step three: Notice that Wireshark teases out the Bitcoin-specific portion of every matching TCP packet it receives. Each packet can be exported by right clicking on the “Bitcoin protocol” breakdown, and choosing “Export Packet Bytes.”&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/generating-test-fixtures-with-wireshark/03.png&quot; /&gt;
  &lt;p&gt;High level packet information.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The bytes we’re exporting represent the entire packet, as it comes in over the wire.&lt;/p&gt;

&lt;h2 id=&quot;parsing-our-fixtures&quot;&gt;Parsing Our Fixtures&lt;/h2&gt;

&lt;p&gt;Now that we’ve saved a handful of packets we’d like to test against, we can start the process of incorporating them into our test suite.&lt;/p&gt;

&lt;p&gt;Let’s assume that we’ve saved all of our exported packets into a &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixtures&lt;/span&gt;&lt;/code&gt; folder within our project. Let’s also assume that we want to start by testing our “version” packet (the most interesting packet we’re able to parse, so far).&lt;/p&gt;

&lt;p&gt;Let’s make a new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;VersionTest&lt;/span&gt;&lt;/code&gt; test module and lay down some boilerplate:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
defmodule BitcoinNetwork.Protocol.VersionTest do
  use ExUnit.Case

  alias BitcoinNetwork.Protocol
  alias BitcoinNetwork.Protocol.{Message, Version}
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll add our test:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
test &quot;parses a version payload&quot; do
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing we’ll need to do is load the data from our exported version packet binary:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
assert {:ok, packet} = File.read(&quot;test/fixtures/version.bin&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use Elixir’s &lt;a href=&quot;https://hexdocs.pm/elixir/File.html#read/1&quot;&gt;&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; to read the contents of our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;/code&gt; file, and assert that we’ll receive an &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;/code&gt; tuple containing the binary contents of our file in our new &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;/code&gt; assignment.&lt;/p&gt;

&lt;div class=&quot;post-footer&quot;&gt;
    &lt;div class=&quot;signup-form&quot;&gt;
        &lt;form action=&quot;http://east5th.us11.list-manage.com/subscribe/post?u=f8833fd40e2b1b28545d9f382&amp;id=c56ceba687&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; target=&quot;_blank&quot;&gt;
            &lt;p&gt;Sign up for &lt;a href=&quot;http://www.petecorey.com/newsletter&quot;&gt;Pete's mailing list&lt;/a&gt; and have fresh content delivered to you, hot off the presses every week!&lt;/p&gt;
            &lt;div class=&quot;email-wrapper&quot;&gt;
                &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;FNAME&quot; class=&quot;&quot; id=&quot;mce-FNAME&quot; /&gt;&lt;!--
                                                                                                           --&gt;&lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; id=&quot;mce-EMAIL&quot; /&gt;&lt;!--
                                                                                                                                                                                                    --&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; /&gt;
            &lt;/div&gt;
            &lt;div&gt;&lt;input type=&quot;text&quot; name=&quot;b_f8833fd40e2b1b28545d9f382_c56ceba687&quot; tabindex=&quot;-1&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Next, we’ll parse the binary, just like we do within our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt;&lt;/code&gt; with a call to &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
assert {:ok, message, &amp;lt;&amp;lt;&amp;gt;&amp;gt;} = Message.parse(packet)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once again, we assert that we’ll receive an &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;/code&gt; tuple with our resulting &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;/code&gt;. Because the data we exported from Wireshark relates specifically to our version packet, we expect the list of remaining, unparsed binary data to be empty (&lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now that we’ve parsed the message, we can compare the resulting &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Version&lt;/span&gt;&lt;/code&gt; struct found in &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed_payload&lt;/span&gt;&lt;/code&gt; with a pre-defined, expected &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;/code&gt; struct and assert that they’re equal:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
assert message.parsed_payload == version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But where does &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;/code&gt; come from? How can we know the contents of our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;/code&gt; packet without manually parsing it ourselves, byte by byte?&lt;/p&gt;

&lt;h2 id=&quot;interpreting-our-fixtures&quot;&gt;Interpreting Our Fixtures&lt;/h2&gt;

&lt;p&gt;Once again, Wireshark comes to the rescue. In addition to letting us export our Bitcoin packets as raw binaries, Wireshark also lets us inspect the parsed contents of each of our Bitcoin packets.&lt;/p&gt;

&lt;p&gt;If we go back to our version packet in our Wireshark capture file, we can open up the “Bitcoin protocol” section and see a complete breakdown of not only the high level message metadata, but also the specific information sent along in the version message:&lt;/p&gt;

&lt;div&gt;
  &lt;img src=&quot;https://s3-us-west-1.amazonaws.com/www.east5th.co/img/generating-test-fixtures-with-wireshark/04.png&quot; /&gt;
  &lt;p&gt;Filtering for bitcoin packets.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;We can use this information to construct our pre-defined &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;/code&gt; struct at the top of our test:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
version = %Version{
  version: 70015,
  services: 13,
  timestamp: 1_528_146_756,
  recv_ip: &amp;lt;&amp;lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 160, 16, 233, 215&amp;gt;&amp;gt;,
  recv_port: 18333,
  recv_services: 9,
  from_ip: &amp;lt;&amp;lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&amp;gt;&amp;gt;,
  from_port: 0,
  from_services: 13,
  nonce: 15_116_783_876_185_394_608,
  user_agent: &quot;/Satoshi:0.14.2/&quot;,
  start_height: 1_322_730
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And with that, we have a solid test of our version parsing functionality.&lt;/p&gt;

&lt;h2 id=&quot;testing-serialization&quot;&gt;Testing Serialization&lt;/h2&gt;

&lt;p&gt;We can test the serialization of our version packet much like we tested the parsing functionality.&lt;/p&gt;

&lt;p&gt;Let’s start off by adding a new test to our &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;VersionTest&lt;/span&gt;&lt;/code&gt; module:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
test &quot;serializes a version struct&quot; do
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once again, we’ll start off by using &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; to load our binary fixture, and using &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; to parse the resulting binary:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
assert {:ok, packet} = File.read(&quot;test/fixtures/version.bin&quot;)
assert {:ok, message, &amp;lt;&amp;lt;&amp;gt;&amp;gt;} = Message.parse(packet)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rather than comparing the &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed_payload&lt;/span&gt;&lt;/code&gt; to some pre-defined &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Version&lt;/span&gt;&lt;/code&gt; struct, we’ll instead serialize it with a call to &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;no&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt; and compare the newly serialized version against the message’s &lt;code class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;/code&gt; binary:&lt;/p&gt;

&lt;pre class=&quot;language-elixir&quot;&gt;&lt;code class=&quot;language-elixir&quot;&gt;
assert Protocol.serialize(message.parsed_payload) == message.payload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s it!&lt;/p&gt;

&lt;p&gt;If our version serialization code is working correctly, it should return a binary identical to the version portion of the packet exported from Wireshark.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;I’d like to give a huge shout out to &lt;a href=&quot;http://blog.lucidsimple.com/2014/08/14/binary-fixtures-with-wireshark.html&quot;&gt;Lucid Simple’s article on “Binary Fixtures with Wireshark”&lt;/a&gt;. It was a huge inspiration for me and a very well written article. I highly recommend you check it out if you’d like a more in-depth exploration of using Wireshark-generated binary fixtures.&lt;/p&gt;

&lt;p&gt;For what it’s worth, this kind of testing has already resulted in a positive return on investment. Shortly after implementing these tests, I noticed that my version struct was incorrectly serializing messages, resulting in some strange behavior I’d been noticing with my node. Using the tests as a guide, I was able to quickly fix my implementation.&lt;/p&gt;

&lt;p&gt;Three cheers for testing!&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-11T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://www.brautaset.org/articles/2018/no-more-superloopy.html">
	<title>Stig Brautaset (stig): No More Superloopy</title>
	<link>https://www.brautaset.org/articles/2018/no-more-superloopy.html</link>
	<content:encoded>&lt;p&gt;
    Why this site is moving from the superloopy.io domain to brautaset.org.
    &lt;/p&gt;</content:encoded>
	<dc:date>2018-06-09T23:00:00+00:00</dc:date>
	<dc:creator>Stig Brautaset</dc:creator>
</item>
<item rdf:about="http://www.the-paper-trail.org/page/cap-faq/">
	<title>Henry Robinson (henryr): The CAP FAQ</title>
	<link>http://www.the-paper-trail.org/page/cap-faq/</link>
	<content:encoded>0. What is this document? No subject appears to be more controversial to distributed systems engineers than the oft-quoted, oft-misunderstood CAP theorem. The purpose of this FAQ is to explain what is known about CAP, so as to help those new to the theorem get up to speed quickly, and to settle some common misconceptions or points of disagreement.
Of course, there&amp;rsquo;s every possibility I&amp;rsquo;ve made superficial or completely thorough mistakes here.</content:encoded>
	<dc:date>2018-06-08T23:22:58+00:00</dc:date>
	<dc:creator>Henry Robinson</dc:creator>
</item>
<item rdf:about="https://silky.github.io/posts/2018-06-06-fugu-the-generalised-relu-activation-function.html">
	<title>Noon van der Silk (silky): fugu, the generalised relu activation function</title>
	<link>https://silky.github.io/posts/2018-06-06-fugu-the-generalised-relu-activation-function.html</link>
	<content:encoded>&lt;div class=&quot;info&quot;&gt;
    Posted on June  6, 2018
    
        by Noon van der Silk
    
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Recall the standard &lt;code&gt;ReLU&lt;/code&gt; function from neural networks:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;$$
\texttt{ReLU}(x) = \max(0, x) = \begin{cases}
    x &amp;amp; x &amp;gt; 0 \\
    0 &amp;amp; \text{otherwise}
    \end{cases}
$$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;All well-and-good. But what if I want to apply a function to the lower-half of this function, instead of setting it to &lt;span class=&quot;math inline&quot;&gt;0&lt;/span&gt;? Infact, what if I want to apply a function to the top-half as well! And while we’re at it, why should the inflexion point be &lt;span class=&quot;math inline&quot;&gt;0&lt;/span&gt; always?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;So, here’s the &lt;code&gt;fugu&lt;/code&gt; function:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;$$
\texttt{fugu}(x, f, g, p) = \begin{cases}
    g(x) &amp;amp; x &amp;gt; p \\
    f(x) &amp;amp; \text{otherwise}
    \end{cases}
$$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Then, &lt;span class=&quot;math inline&quot;&gt;&lt;code&gt;ReLU&lt;/code&gt;(&lt;em&gt;x&lt;/em&gt;)=&lt;code&gt;fugu&lt;/code&gt;(&lt;em&gt;x&lt;/em&gt;, 0, id, 0)&lt;/span&gt;, if you wish.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Here’s the &lt;code&gt;fugu&lt;/code&gt; function in Python TensorFlow:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; fugu (x, f, g&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x: x, point&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;):
    cond   &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.less(x, point)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; tf.where(cond, f(x), g(x))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;There, &lt;code&gt;tf.nn.relu(x) = fugu(x, tf.zeros_like)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;What kinds of cool/useful functions can you build with this?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Exercise: Can you use the &lt;code&gt;fugu&lt;/code&gt; function to build a kind of “stairway-to-relu” function?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;center&gt;
&lt;/center&gt;&lt;/div&gt;
&lt;div&gt;
&lt;img src=&quot;http://silky.github.io/images/stairway-to-relu.png&quot; /&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2018-06-06T00:00:00+00:00</dc:date>
</item>
<item rdf:about="https://begriffs.com/posts/2018-06-05-mailing-list-vs-github.html">
	<title>Joe Nelson (begriffs): Mailing lists vs Github</title>
	<link>https://begriffs.com/posts/2018-06-05-mailing-list-vs-github.html</link>
	<content:encoded>&lt;p&gt;Most fledgling open source projects use Github or Gitlab to collaborate on code. However there’s an older method that developers ought to know about because it offers some advantages.&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;https://begriffs.com/images/gh-vs-mail.png&quot; alt=&quot;Github vs Email&quot; /&gt;
&lt;p class=&quot;caption&quot;&gt;Github vs Email&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The alternative method is the developer mailing list. It arose in the late eighties to early nineties, and predates the popularity of the web browser. But far from being a mere historical curiosity, the discussion list is still the primary method of development in many important open source projects, from databases to operating systems to web browsers.&lt;/p&gt;
&lt;p&gt;In this article I’ll carefully compare the use of mailing lists with code collaboration web sites such as Github. I’ll do my best to present the pros and cons of each, so that projects assessing the two can make an informed decision.&lt;/p&gt;
&lt;h3 id=&quot;briefly-how-does-each-work&quot;&gt;Briefly, how does each work?&lt;/h3&gt;
&lt;p&gt;Github hosts a git server, a bug tracker, a wiki, as well as release artifacts. Participation in discussions or code changes requires a Github identity. Code changes are proposed by making another Github-hosted project (a “fork”), modifying a remote branch, and using the GUI to open a pull request from your branch to the original. Project members debate the change in comments, with subsequent changes pushed as commits to the pull request branch. Ultimately a project owner can decide to merge the commits.&lt;/p&gt;
&lt;p&gt;A mailing list maintains a list of subscribers who receive all messages sent to a “reflector” email address. A project must host its own version control server elsewhere. Code changes are proposed by sending an email to the reflector, with a textual diff of the changes either attached or inline. List members debate the change with email replies, sending subsequent changes as more diffs, either to replace or amend the original. Ultimately a project committer can decide to apply the patch(es) to the codebase.&lt;/p&gt;
&lt;h3 id=&quot;advantages-of-mailing-lists&quot;&gt;Advantages of mailing lists&lt;/h3&gt;
&lt;h4 id=&quot;precise-flexible-communication&quot;&gt;Precise, flexible communication&lt;/h4&gt;
&lt;p&gt;Mailing lists have three properties that allow developers to communicate with greater precision and flexibility than is possible in the Github UI: the threaded nature of emails, the user generation of patches, and the free mixing of discussion and patches.&lt;/p&gt;
&lt;h5 id=&quot;threading&quot;&gt;Threading&lt;/h5&gt;
&lt;p&gt;The Github web UI has a limited model of threading, where there is one thread for the pull request as a whole, and other threads attached to single changed lines of code. The UI shows a few lines of code for context around the line chosen for discussion, but the full chunk of code under discussion must be inferred.&lt;/p&gt;
&lt;p&gt;Email sub-threads allow specialized discussion about different aspects or sections of the code. A linear Github-style discussion would mix those conversations.&lt;/p&gt;
&lt;p&gt;Conversations over email have a greater permanence and reference value than Github comments. On Github, comments continually change. They become “outdated” and disappear when attached to a line that has been changed. Same for the commits, which vanish after a force-push to the pull request branch. In an email thread, by contrast, the original messages and proposed changes remain for comparison with later messages and patches.&lt;/p&gt;
&lt;p&gt;Furthermore, patches from multiple authors can’t mix in a Github pull request. The person opening the pull request “owns” it. Other participants can drop code suggestions as comments, but what gets merged by the UI is ultimately the commits on the branch. The pull requester must turn those comments into commits on the branch if he or she wants to incorporate the suggested changes.&lt;/p&gt;
&lt;p&gt;On a mailing list, anyone is free to reply to an existing thread with a new proposed set of patches. Another nice effect is that other people can carry the patch to the finish line if the original author stops caring or being involved. (I’ve encountered a number of MIA authors in pull requests on my projects over the years.)&lt;/p&gt;
&lt;h5 id=&quot;patch-format&quot;&gt;Patch Format&lt;/h5&gt;
&lt;p&gt;Custom patches are another way that the email process improves communication over the Github UI. Contributors can shape the patches to make them more readable for other people.&lt;/p&gt;
&lt;p&gt;With Github you commit your changes and then Github chooses how to render the diff to the reviewer, but when creating the patch yourself you can tweak the settings. Diffs can be in &lt;em&gt;unified&lt;/em&gt; or &lt;em&gt;context&lt;/em&gt; format, and for the latter the number of context lines is configurable. (To be fair, Github allows expanding the view of context around changes too.)&lt;/p&gt;
&lt;p&gt;Some people feel that git-style unified diffs are clearest for small changes of a few lines, and context diffs are more suitable for changing larger ranges, especially lines with indentation changes. (To be fair, I should note that Github will hide indentation changes if you add &lt;code&gt;?w=1&lt;/code&gt; to the URL displaying the change.)&lt;/p&gt;
&lt;p&gt;Finally, creating patches by hand with &lt;code&gt;diff&lt;/code&gt; can take advantage of other options, like annotating the hunk headers with which C functions are affected (using the &lt;code&gt;-p&lt;/code&gt; flag), and the choice of &lt;a href=&quot;http://fabiensanglard.net/git_code_review/diff.php&quot;&gt;various algorithms&lt;/a&gt; such as “patience.”&lt;/p&gt;
&lt;p&gt;Patience does a little more work to calculate its results, but the output makes more sense for humans. For instance, a standard (non-patience) diff might look like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode diff&quot;&gt;&lt;code class=&quot;sourceCode diff&quot;&gt; void func1() {
     x += 1
&lt;span class=&quot;va&quot;&gt;+}&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;+void functhreehalves() {&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;+    x += 1.5&lt;/span&gt;
 }

 void func2() {
     x += 2
 }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whereas a patience diff shows the function added as a unit:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode diff&quot;&gt;&lt;code class=&quot;sourceCode diff&quot;&gt; void func1() {
     x += 1
 }

&lt;span class=&quot;va&quot;&gt;+void functhreehalves() {&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;+    x += 1.5&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;+}&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;+&lt;/span&gt;
 void func2() {
     x += 2
 }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, there’s nothing to stop the mailing list style of collaboration from adapting to emerging diff formats, such as &lt;a href=&quot;https://begriffs.com/posts/2014-04-08-pilgrimage-report-structural-merging.html&quot;&gt;structural diffs&lt;/a&gt;. That’s because patches in emails directly describe changes whereas Github renders commit deltas without nuance.&lt;/p&gt;
&lt;h5 id=&quot;patchdiscussion-mix&quot;&gt;Patch/Discussion mix&lt;/h5&gt;
&lt;p&gt;The bulk of communication around a new feature is in its proposal, not around the subsequent code. A contributor proposes the feature, justifies it, and confirms the scope before writing any code. The community responds, and often by the time anyone implements anything, the idea has shifted significantly from the start of the process.&lt;/p&gt;
&lt;p&gt;This is again where emails fit the group discussion well, with inline replies and the threaded structure as mentioned above. When it’s time to get coding there’s no discontinuity of switching from an “issue” to a “pull request.” The author simply replies again with patches attached.&lt;/p&gt;
&lt;h4 id=&quot;control-and-customization&quot;&gt;Control and customization&lt;/h4&gt;
&lt;p&gt;While web apps deliver a centrally-controlled user interface, native applications allow each person to customize their own experience. Open protocols like SMTP encourage a proliferation of clients. So it is with with mail clients, each providing its own functions, filters, folders, flags and fun. Mail clients provide ways to mark a message important, or set it back as unread. In general you don’t have to unsuccessfully beg a central committee over five years for an interface change. (It happens, see this &lt;a href=&quot;https://github.com/isaacs/github/issues/50&quot;&gt;petition&lt;/a&gt; in an unofficial repo designed to supplicate the Github deities.)&lt;/p&gt;
&lt;p&gt;Some people script their mail client so that they can apply patches with a keyboard shortcut, others go minimalist, and still others even use webmail. Each person is different, and so is their software, but the nature of the mailing list allows them all to work together.&lt;/p&gt;
&lt;p&gt;Another area of control is the ability to search and interact with a mailing list while offline. This is often by choice rather than necessity. Urban and suburban areas usually have internet access available anywhere at any time, using cellular service if need be. Things are no longer as they once were with intermittent dial-up connections, but working offline is a choice that some people simply prefer.&lt;/p&gt;
&lt;p&gt;Although git is itself distributed and operates locally without a network connection, Github requires connectivity to review issues and pull requests. Demanding connectivity for an essentially reflective solitary task is unreasonable.&lt;/p&gt;
&lt;p&gt;Remember that being online applies in two directions: the developer’s connection to the internet and also Github’s uptime. Although the latter has been pretty stable for a while, I do remember a handful of times where my entire office got derailed by Github downtime. Taking Github down is a big attractive target for angry nations and ambitious hackers.&lt;/p&gt;
&lt;p&gt;With a native email client you can review all emails and attachments offline. You can even send replies to messages offline and the client will queue them until internet access becomes available.&lt;/p&gt;
&lt;p&gt;For the other side, the uptime of the mailing list server, mail sent to an offline server will eventually go through. Mail transfer agents along the email chain are designed to retry transmissions. In addition, developer lists recommend that users “Reply All” to messages so that everyone involved in a thread as well as the list reflector address get the message. That way even if the reflector is offline, your email can go through to those most recently involved.&lt;/p&gt;
&lt;p&gt;Ultimately the control and customizability enjoyed by the mailing list style of development comes from diverse tools built for open standards. Patchfiles are universally supported (git itself directly &lt;a href=&quot;https://git-scm.com/docs/git-format-patch&quot;&gt;supports&lt;/a&gt; &lt;a href=&quot;https://git-scm.com/docs/git-am&quot;&gt;patches&lt;/a&gt;), SMTP has an RFC. Tools can work together, rather than having a GUI locked in the browser.&lt;/p&gt;
&lt;h4 id=&quot;politics-and-profit&quot;&gt;Politics and Profit&lt;/h4&gt;
&lt;p&gt;Git was originally created as an escape from BitKeeper, a version control system with associated centralized hosting. BitKeeper granted a free license for open source projects, and required projects to store their metadata on company servers.&lt;/p&gt;
&lt;p&gt;What a twist of history, then, that users of git chose Github… a centralized host granting free licenses for open source projects, and requiring projects to store their metadata on company servers.&lt;/p&gt;
&lt;p&gt;Github can legally delete projects or users with or without cause. This makes sense of course, since the projects are using computers owned by Github. Also, while not explicitly prohibiting development of competing projects like BitKeeper did, Github can still view the private source code of all companies who choose to host with them.&lt;/p&gt;
&lt;p&gt;Really, what’s the future of Github (or any profit-driven yet free code hosting service)? History provides the example of SourceForge, the premier code collaboration platform at the turn of the century. After acquisition by dice.com, and in a last-ditch effort to grab some more money, SourceForge hijacked hosted projects so that their installers would include adware and spyware.&lt;/p&gt;
&lt;p&gt;When I first began notes for this article, the implications for Github were purely hypothetical, but even as of this writing news has emerged that Microsoft is buying Github. It doesn’t feel far-fetched to suggest that Github may be moving into its “SourceForge stage.”&lt;/p&gt;
&lt;p&gt;Let this lesson be broader than Github though. The same logic applies to other web platforms that centralize and combine programmer communication and hosting.&lt;/p&gt;
&lt;p&gt;Some major open source projects like the PostgreSQL database played it safe and explicitly chose never to put their code on external company servers (other than for mirroring). Postgres also takes pains to place control in a governing body spanning multiple companies. No company is allowed a majority of committers, and the organization is designed to survive independently.&lt;/p&gt;
&lt;p&gt;Not all projects are important enough to require this level of neutrality, but all projects deserve to control their own destiny.&lt;/p&gt;
&lt;h4 id=&quot;right-tool-for-the-job&quot;&gt;Right tool for the job&lt;/h4&gt;
&lt;p&gt;The fundamental task we’re talking about is asynchronous group communication of code changes. Patches are a universally understood way of describing code changes, and email is a universally understood method of communication. So it seems that this approach matches the problem at hand.&lt;/p&gt;
&lt;p&gt;In fact emailing patches works with any version control system, not just Git. The OpenBSD project still happily uses mailing lists with CVS. Patch authors don’t need any version control software installed at all. An author can download the source release tarball, make changes in the copy, capture the diff, and email it.&lt;/p&gt;
&lt;p&gt;Sending and applying patches cuts out busywork like cleaning up remote branches after merge, or creating a local branch in the forked repo in preparation for a pull request. For comparison, I remember teaching a group of new programmers how to use Github, and was conscious at the time of all the weird steps I asked them to do.&lt;/p&gt;
&lt;p&gt;There’s also less busywork for finished communications. There aren’t things to “clean up” like abandoned pull requests, merged branches, or issues to mark closed. The replies just stop on those threads. More on some downsides of this later, but for now look on the bright side.&lt;/p&gt;
&lt;p&gt;Using email also decouples digital identity from the accounts on a site like Github, and ultimately places that trust in the DNS system managed by an international organization, ICANN. For more about this, see my article &lt;a href=&quot;https://begriffs.com/posts/2016-07-08-returning-original-social-network.html&quot;&gt;Returning to the Original Social Network&lt;/a&gt;. PGP provides a further guarantee of identity, verified through a decentralized web of trust. See my recording of Neal Walfield’s talk &lt;a href=&quot;https://begriffs.com/posts/2016-11-05-advanced-intro-gnupg.html&quot;&gt;An Advanced Intro to GnuPG&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;challenges-for-mailing-lists&quot;&gt;Challenges for mailing lists&lt;/h3&gt;
&lt;p&gt;The mailing list approach raises quite a few questions and difficulties. I’ve done my best to try to acknowledge them and suggest possible solutions.&lt;/p&gt;
&lt;h4 id=&quot;unfamiliarity-and-obscurity&quot;&gt;Unfamiliarity and obscurity&lt;/h4&gt;
&lt;h5 id=&quot;variety-of-process&quot;&gt;Variety of process&lt;/h5&gt;
&lt;p&gt;When you browse a Github project you know exactly how it works. Sure, the addons/CI/hooks may differ, and setting up the project might involve some contortions, but the process of browsing code, finding known bugs, and submitting changes is always the same. This is most definitely not true for projects with their own web presence and mailing lists.&lt;/p&gt;
&lt;p&gt;I’ve heard people go so far as to say, “If a project is not on Github then there is a 0% chance that I will contribute.” To be honest I can’t say that I’ve contributed to non-Github projects either. After I migrated to Github from Google Code my only non-Github contributions (if you want to call them that) were filing a bug report for Chrome, and another for a tool on Gitlab.&lt;/p&gt;
&lt;p&gt;One more source of unfamiliarity is that many people, especially younger devs, have never seen a real mail client like &lt;code&gt;mutt&lt;/code&gt;. In their minds they may picture an overflowing GMail inbox full of &lt;a href=&quot;https://en.wikipedia.org/wiki/Posting_style#Top-posting&quot;&gt;top posted&lt;/a&gt; replies all mixed together from different projects. That’s not an enticing image. Perhaps this article can start these developers on the path to rediscovering the care and engineering that went into classic email clients (“MUAs” as they are called).&lt;/p&gt;
&lt;p&gt;Given the unfamiliarity, a self-hosted project needs to communicate very clearly how it does collaboration. A mailing list alone is not enough; a project needs to explain itself on the web, and provide information about getting involved.&lt;/p&gt;
&lt;p&gt;A final note about unfamiliarity. Beware that offline users can be misunderstood in today’s connected age. It can look silly to write an email while offline, only to have it queue, send, and arrive after another better response renders yours unnecessary. It’s probably wise to include a signature line saying something like, “Note: composed offline, may lack recent context.”&lt;/p&gt;
&lt;h5 id=&quot;social-proof&quot;&gt;Social proof&lt;/h5&gt;
&lt;p&gt;The next problem that projects outside Github face is the lack of social proof through star voting. It’s harder for new projects to build reputation without stars. People take notice of a project with thousands of stars in a way that the mere project description doesn’t evoke. While much established software like OSes, browsers, and databases do fine without the stars, they won their acceptance years ago, or are promoted by big companies.&lt;/p&gt;
&lt;p&gt;One way to help self-hosted project popularity is to hook into Github without going too deep. What some projects like git and Linux do is run their own servers, but offer a read-only mirror on Github for public admiration and code browsing.&lt;/p&gt;
&lt;p&gt;Two tools that can help are the &lt;a href=&quot;http://nopullrequests.com/&quot;&gt;Pull Request Rejection Bot&lt;/a&gt; and the built-in setting to &lt;a href=&quot;https://help.github.com/articles/disabling-issues/&quot;&gt;disable issues&lt;/a&gt;. After disabling pull requests and issues, the project README needs to include information about how and where to contribute.&lt;/p&gt;
&lt;p&gt;The self-hosted git server will also need a post-commit hook to keep Github up to date. This command should do the trick in the hook:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;fu&quot;&gt;git&lt;/span&gt; push github_remote -f --mirror&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;disorganization&quot;&gt;Disorganization&lt;/h4&gt;
&lt;h5 id=&quot;patch-state&quot;&gt;Patch state&lt;/h5&gt;
&lt;p&gt;A big difficulty for mailing lists is sharing the global state of email threads. Not the content of the messages, obviously, but the decisions that require action. Individual contributors can flag messages for action in their mail clients, but this status remains private for each individual. It’s helpful to record publicly that a patch has been accepted for future application, or that a previously reported bug was fixed.&lt;/p&gt;
&lt;p&gt;Projects do this in one of two ways: adding metadata to the git repository itself, or using an external tool that ties into the mailing list.&lt;/p&gt;
&lt;p&gt;For instance PostgreSQL had a problem where patches hung around without being accepted or rejected (there are up to ~250 proposed patches to consider at one time!). So the team created &lt;a href=&quot;https://commitfest.postgresql.org/&quot;&gt;commitfest.postgresql.org&lt;/a&gt;. Contributors now register the patches on this site for final review. Several times per year committers stop their own work and make time to accept/defer/reject/apply the patches.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jk.ozlabs.org/projects/patchwork/&quot;&gt;Patchwork&lt;/a&gt; is a similar tool that is not tied to Postgres and is more suitable for general use. Patchwork supplements a mailing list by subscribing to the list just like a person would, and capturing patches from the emails. For each patch it creates a web page. It doesn’t fragment discussion because it doesn’t allow commenting through the web interface, it merely reflects any comments from the emails, and allows maintainers to mark patches with a state such as Accepted, Rejected, or Under Review.&lt;/p&gt;
&lt;h5 id=&quot;comprehensive-bug-list&quot;&gt;Comprehensive bug list&lt;/h5&gt;
&lt;p&gt;Here’s something surprising I just learned: the PostgreSQL project does not have any place a new contributor can go to find a list of open bugs for the project. There is a separate mailing list, pgsql-bugs, where people report them, but there’s nothing that ties that with the activity on pgsql-hackers to indicate whether the bug is resolved. Interestingly, OpenBSD also has a &lt;code&gt;bugs&lt;/code&gt; email list and no central bug status.&lt;/p&gt;
&lt;p&gt;Postgres is still searching for a system which matches how they like to work and which doesn’t detract from the mailing lists. I don’t believe OpenBSD desires a bug tracker. As they quipped on IRC, “If we did [have one] we would be FreeBSD, wouldn’t we?”&lt;/p&gt;
&lt;p&gt;For projects that do want a bug tracker, one good contender is &lt;a href=&quot;https://www.debian.org/Bugs/&quot;&gt;Debbugs&lt;/a&gt; from the Debian project. It provides an email interface to manipulate the bugs and can be used for projects other than Debian.&lt;/p&gt;
&lt;p&gt;Other bug systems work by adding files or objects into the project git repo itself. Thus fixing a bug on a branch could mean deleting the bug from the repo along with the other changes on that branch. Like email, this preserves offline access to bug information. Probably one of the best is &lt;a href=&quot;http://bugseverywhere.org/&quot;&gt;Bugs Everywhere&lt;/a&gt;. Another pretty clean one is simply called &lt;a href=&quot;https://github.com/driusan/bug&quot;&gt;bug&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&quot;message-history&quot;&gt;Message history&lt;/h5&gt;
&lt;p&gt;Once you subscribe to a mailing list, new messages flow into your client and are available for searching. Hooray! But what about messages sent before you joined the list? Furthermore, how do you “link” to old messages from newer ones? Every issue on Github has its own URL, so issues can refer to each other, but how would an email say something like, “we already discussed this in message X, look there.”?&lt;/p&gt;
&lt;p&gt;The way this works is with the &lt;code&gt;Message-ID&lt;/code&gt; header. Every email has one, and they are part of how replies work. They are big GUIDs that look like &lt;code&gt;8953.1527887111@sss.pgh.pa.us&lt;/code&gt; or &lt;code&gt;CAFjFpReKyYrsUF8sP5GoPYyyp9ZSqm_mLeD8kQLigX-3CzDiUg@mail.gmail.com&lt;/code&gt;. So an email could say, “We discussed this issue in 8953.1527887111@sss.pgh.pa.us, let’s move the discussion there.”&lt;/p&gt;
&lt;p&gt;Reading a message sent prior to your joining the list requires going to the list archive on the web. Good archives provide links to &lt;a href=&quot;https://en.wikipedia.org/wiki/Mbox&quot;&gt;mbox&lt;/a&gt; files which can be imported into a native mail client. This makes the old messages available for search/reply in the mail client. Archives also usually provide a web interface to read the messages as HTML, but navigating threads in these old interfaces is usually way more painful than in a good mail client.&lt;/p&gt;
&lt;p&gt;As an example, check out the &lt;a href=&quot;https://www.postgresql.org/list/pgsql-hackers/&quot;&gt;archives&lt;/a&gt; for pgsql-hackers. Notice the mbox file links. You can download an mbox for a month’s worth of messages, for individual messages or for full threads. To navigate to a certain message id, use the url &lt;code&gt;https://www.postgresql.org/message-id/:the-id&lt;/code&gt;. Try one of the ids I listed earlier. Similarly the Linux kernel mailing list archives can display a message by id via &lt;code&gt;lkml.kernel.org&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Remember that all emails have a Message-ID header, this isn’t something special having to do with mailing lists. If you want to &lt;em&gt;reply&lt;/em&gt; to a message that’s not imported in your mail client, you need to include the email header &lt;code&gt;In-Reply-To: &amp;lt;message-id&amp;gt;&lt;/code&gt; or the thread will be split, regardless of the subject line you use.&lt;/p&gt;
&lt;h5 id=&quot;external-tools&quot;&gt;External tools&lt;/h5&gt;
&lt;p&gt;Email and patch files are both old interoperable standards, so, theoretically, running patches through continuous integration ought not to be a problem. However I don’t know that the tooling here is well-developed. Where Gitlab has a CI server built in, and several addons exist for Github, I don’t know of any clearly dominant thing for a patch based workflow. IBM built a tool called &lt;a href=&quot;https://github.com/ruscur/snowpatch&quot;&gt;snowpatch&lt;/a&gt; to do this, but I don’t know what tomfoolery is involved.&lt;/p&gt;
&lt;p&gt;It is possible to read patches from a list and then script an integration to a CI tool via patching and pushing to Github. Thomas Munro recently created &lt;a href=&quot;http://cfbot.cputube.org/&quot;&gt;cfbot&lt;/a&gt; to do this for Postgres. (See the interesting &lt;a href=&quot;https://www.pgcon.org/2018/schedule/attachments/499_pgcon%202018%20-%20continuous%20integration.pdf&quot;&gt;slides&lt;/a&gt; about its development.) It’s a creative use for Github that doesn’t compromise the mailing list flow.&lt;/p&gt;
&lt;h4 id=&quot;barrier-to-entry&quot;&gt;Barrier to entry&lt;/h4&gt;
&lt;p&gt;Related to the unfamiliarity mentioned earlier, using a mailing list well requires new skills for contributors, and infrastructure for maintainers.&lt;/p&gt;
&lt;h5 id=&quot;tooling-and-the-protocol&quot;&gt;Tooling and the protocol&lt;/h5&gt;
&lt;p&gt;Although you can subscribe to a list with Outlook or GMail and call it a day, neither you nor the people you interact with will be happy about it. Email is a precise tool from ye olde Unix days, where people care about things like the plain text lines you send over the wire, or the way you use MIME types.&lt;/p&gt;
&lt;p&gt;But even before crafting these little RFC-821 gems you have to go through a dance every time you want to subscribe to a list, confirming your address and adding a folder and filter to the mail client. It’s not like jotting a note in the issues of another Github repo, unless the mailing list is “open” meaning accepts mail from non-registered addresses. Most lists are “closed” because of spam. Such is the price we pay for basing identity on the DNS system and not on a corporate collaborative coding site profile.&lt;/p&gt;
&lt;p&gt;Once on the list and ready to send some messages or patches, there are a few guidelines to follow that pretty much all lists ask. They help accommodate the diversity of mail clients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send with plain text&lt;/li&gt;
&lt;li&gt;Disable all HTML “enhancements”&lt;/li&gt;
&lt;li&gt;At most 72 characters per line&lt;/li&gt;
&lt;li&gt;Do not top-post&lt;/li&gt;
&lt;li&gt;Keep quoted text small and relevant&lt;/li&gt;
&lt;li&gt;Strip out company legal footers&lt;/li&gt;
&lt;li&gt;Shorten lengthy signatures&lt;/li&gt;
&lt;li&gt;Use Reply-All&lt;/li&gt;
&lt;li&gt;If replying, ensure &lt;code&gt;In-Reply-To&lt;/code&gt; is set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If your message contains a patch then there are more rules to observe, and they vary by community. Linux, OpenBSD and FreeBSD say, “No MIME, no links, no compression, no attachments. Just plain text.” The patch goes right in the body of the message at the bottom. If the mail client would mangle the code (such as by wrapping long lines), then attaching with MIME is permissible. For patches above 300kb, host them online and include a link.&lt;/p&gt;
&lt;p&gt;Postgres, on the other hand, wants patches attached as type &lt;code&gt;text/x-patch&lt;/code&gt;, with &lt;code&gt;disposition: inline&lt;/code&gt; for tiny patches and &lt;code&gt;disposition: attachment&lt;/code&gt; for substantial ones. And in both cases including a unique filename for the patch in the Content-Disposition. Also different reviewers prefer different patch formats, like Tom Lane will only accept context diffs, but other people want unified diffs.&lt;/p&gt;
&lt;h5 id=&quot;hosting-requirements&quot;&gt;Hosting requirements&lt;/h5&gt;
&lt;p&gt;On the maintainer side, it’s not as easy to make a new project as it is clicking a button on Github. Maintainers need to host the mailing list and &lt;em&gt;optionally&lt;/em&gt; a patch status app and a bug tracker.&lt;/p&gt;
&lt;p&gt;I’d advise creating a general purpose listserv for your personal use, which can run lists for all your small projects. Then create project pages off your homepage or something. I just can’t see taking the overhead to spin up new infrastructure for a dinky experimental open source utility.&lt;/p&gt;
&lt;p&gt;There are probably commercially hosted listservs for rent, or you can host your own. Probably the best ones for self-hosting are &lt;a href=&quot;https://www.gnu.org/software/mailman/&quot;&gt;GNU Mailman&lt;/a&gt; or &lt;a href=&quot;http://mlmmj.org/&quot;&gt;Mlmmj&lt;/a&gt;. There’s also a service called &lt;a href=&quot;https://www.mail-archive.com/&quot;&gt;The Mail Archive&lt;/a&gt; which can add an archive to any list. Might also be worth looking into &lt;a href=&quot;https://public-inbox.org/README.html&quot;&gt;public-inbox&lt;/a&gt; which is a new approach that shares a mailbox itself over Git. Git to hold the mailing list to talk about git – inception!&lt;/p&gt;
&lt;p&gt;For your listserv you’ll also want to install Spamassassin and restrict allowed MIME types to plain text and patches. Also remember to configure the list to use &lt;code&gt;Reply-To&lt;/code&gt; rather than &lt;code&gt;From&lt;/code&gt; for DMARC compatibility. This whole ordeal isn’t something you want to have to do twice!&lt;/p&gt;
&lt;p&gt;Optionally you may want to host a lightweight web interface for browsing git. The simplest seem to be one of these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git.zx2c4.com/cgit/about/&quot;&gt;cgit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git.2f30.org/stagit/&quot;&gt;stagit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://klausdemo.lophus.org/klaus/&quot;&gt;klaus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/en/v2/Git-on-the-Server-GitWeb&quot;&gt;GitWeb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alternately you could just use Github for the actual git server and code browsing. Or mirror there.&lt;/p&gt;
&lt;p&gt;Finally, you could go really hard-core and let people use git’s builtin functionality for pulling a shallow clone rather than providing any web interface:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# get the latest commit&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;git&lt;/span&gt; clone --depth=1 --single-branch --branch master &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;remote&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# or get it and don't even include the .git folder&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;git&lt;/span&gt; archive --remote=&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;remote&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is rather unfriendly though.&lt;/p&gt;
&lt;h4 id=&quot;topic-specialization&quot;&gt;Topic specialization&lt;/h4&gt;
&lt;p&gt;Sometimes it’s useful to restrict the general purpose nature of email messages. For instance bug reports should follow a certain format and include details about the environment. Github offers &lt;a href=&quot;https://blog.github.com/2016-02-17-issue-and-pull-request-templates/&quot;&gt;issue templates&lt;/a&gt;; what’s the equivalent for email?&lt;/p&gt;
&lt;p&gt;Some projects address this with helper programs that collect information and format an email on your behalf. The information is thus specialized for the type of software involved. GNU has &lt;a href=&quot;https://www.gnu.org/software/gnats/&quot;&gt;GNATS&lt;/a&gt;, OpenBSD has &lt;a href=&quot;https://man.openbsd.org/sendbug&quot;&gt;sendbug&lt;/a&gt;, Debian has &lt;a href=&quot;https://www.debian.org/Bugs/&quot;&gt;debbugs&lt;/a&gt; and Postgres has a bug &lt;a href=&quot;https://www.postgresql.org/account/submitbug/&quot;&gt;report form&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Noob questions are another kind of specialized topic, as are topics that interest only a small subset of the list. Lists full of kernel developers or database hackers tend to be… stern. Communities which still use mailing lists are usually the ones full of scary wizards who invent the world that the rest of us play in. Thus it can be intimidating to ask basic questions there. What projects usually do is create a beginner list separate from the main developer zone. Also IRC is a good way to ask questions that fade away.&lt;/p&gt;
&lt;h4 id=&quot;why-not-nntp&quot;&gt;Why not NNTP?&lt;/h4&gt;
&lt;p&gt;Isn’t the whole email list concept a bit of a hack for turning a protocol designed for small-group communication into a behemoth? After all, NNTP is made for threaded large group discussion.&lt;/p&gt;
&lt;p&gt;NNTP has slightly worse offline characteristics though. While email allows the Reply-All trick to keep things limping along during a list outage, replies through NNTP have to route through a central server. Also identity verification needs to happen on the server, whereas email can delegate to SPF/DKIM/DMARC. There are also a greater number of clients for email than NNTP, and clients that continue to be supported.&lt;/p&gt;
&lt;p&gt;Finally, if you like reading a mailing list with a newsreader, go right ahead. Use a bridge like &lt;a href=&quot;http://www.gmane.org/&quot;&gt;GMANE&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;I hope that I’ve given mailing lists a fair comparison with today’s more common web interfaces. It seems that mailing lists offer real advantages, and that some projects could benefit from making the switch. The biggest difficulty with mailing lists seems to be simply setting them up. Perhaps if there was a deployable server image including necessary software and configuration, that would help boost adoption.&lt;/p&gt;</content:encoded>
	<dc:date>2018-06-05T00:00:00+00:00</dc:date>
</item>

</rdf:RDF>
